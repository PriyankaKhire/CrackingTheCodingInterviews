{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red63\green110\blue116;
\red0\green116\blue0;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 static\cf0  \cf2 const\cf0  \cf2 int\cf0  size = \cf3 10\cf0 ;\
\cf2 int\cf0  queue[\cf4 size\cf0 ];\
\cf2 int\cf0  front = -\cf3 1\cf0 ;\
\cf2 int\cf0  rear = -\cf3 1\cf0 ;\
\
\cf5 /*Simple Queue: In Simple queue Insertion occurs at the rear of the list, and deletion occurs at the front of the list.*/\cf0 \
\
\cf2 void\cf0  Simple_insert(\cf2 int\cf0  data)\
\{\
    \cf2 if\cf0 (\cf4 front\cf0  == \cf4 size\cf0 -\cf3 1\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Queue full\\n"\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf4 front\cf0 ++;\
        \cf4 queue\cf0 [\cf4 front\cf0 ] = data;\
    \}\
\}\
\
\cf2 void\cf0  Simple_deletion()\
\{\
    \cf2 if\cf0 (\cf4 rear\cf0  == \cf4 front\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Queue is empty \\n"\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf4 rear\cf0 ++;\
        \cf6 cout\cf0 <<\cf7 "Deleted item is "\cf0 <<\cf4 queue\cf0 [\cf4 rear\cf0 ]<<\cf8 endl\cf0 ;\
        \cf4 queue\cf0 [\cf4 rear\cf0 ]=\cf3 0\cf0 ;\
    \}\
\}\
\
\cf5 // Circular queue\cf0 \
\
\cf2 void\cf0  circular_insert(\cf2 int\cf0  data)\
\{\
    \cf2 if\cf0 (\cf4 front\cf0  == \cf4 size\cf0 -\cf3 1\cf0  && \cf4 rear\cf0  != -\cf3 1\cf0 )\
    \{\
        \cf4 front\cf0  =\cf3 0\cf0 ;\
        \cf4 queue\cf0 [\cf4 front\cf0 ] = data;\
        \cf6 cout\cf0 <<\cf4 front\cf0 <<\cf8 endl\cf0 ;\
        \cf6 cout\cf0 <<\cf4 rear\cf0 <<\cf8 endl\cf0 ;\
        \
    \}\
    \cf2 else\cf0  \cf2 if\cf0 ((\cf4 front\cf0  == \cf4 rear\cf0  && \cf4 front\cf0  != -\cf3 1\cf0  && \cf4 rear\cf0  !=-\cf3 1\cf0 ) || (\cf4 rear\cf0  == -\cf3 1\cf0  && \cf4 front\cf0  == \cf4 size\cf0 -\cf3 1\cf0 ))\
    \{\
        \cf6 cout\cf0 <<\cf7 "Queue is full\\n"\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf4 front\cf0 ++;\
        \cf4 queue\cf0 [\cf4 front\cf0 ] = data;\
        \cf6 cout\cf0 <<\cf4 front\cf0 <<\cf8 endl\cf0 ;\
        \cf6 cout\cf0 <<\cf4 rear\cf0 <<\cf8 endl\cf0 ;\
    \}\
\}\
\
\cf2 void\cf0  circular_delete()\
\{\
    \cf2 if\cf0 (\cf4 rear\cf0  == -\cf3 1\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Queue is empty \\n"\cf0 ;\
    \}\
    \cf2 if\cf0 (\cf4 front\cf0  == \cf4 rear\cf0  && \cf4 queue\cf0 [\cf4 rear\cf0 ] ==\cf3 0\cf0 )\
    \{\
        \cf4 front\cf0  = \cf4 rear\cf0  = -\cf3 1\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Queue empty\\n"\cf0 ;\
    \}\
    \cf2 if\cf0  (\cf4 rear\cf0  == \cf4 size\cf0 -\cf3 1\cf0  && \cf4 front\cf0  !=-\cf3 1\cf0 )\
    \{\
        \cf4 rear\cf0  = \cf3 0\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Deleted item is "\cf0 <<\cf4 queue\cf0 [\cf4 rear\cf0 ]<<\cf8 endl\cf0 ;\
        \cf4 queue\cf0 [\cf4 rear\cf0 ]=\cf3 0\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf4 rear\cf0 ++;\
        \cf6 cout\cf0 <<\cf7 "Deleted item is "\cf0 <<\cf4 queue\cf0 [\cf4 rear\cf0 ]<<\cf8 endl\cf0 ;\
        \cf4 queue\cf0 [\cf4 rear\cf0 ]=\cf3 0\cf0 ;\
        \cf6 cout\cf0 <<\cf4 rear\cf0 <<\cf8 endl\cf0 ;\
\
        \
    \}\
\}\
\
\cf2 void\cf0  Dsiplay()\
\{\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i<=\cf4 size\cf0 -\cf3 1\cf0 ; i++)\
    \{\
        \cf6 cout\cf0 <<\cf7 "|"\cf0 <<\cf4 queue\cf0 [i]<<\cf7 "|"\cf0 ;\
    \}\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf2 int\cf0  data;\
    \
    \cf2 char\cf0  ch;\
    \cf6 cout\cf0 <<\cf7 "Insert ? (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>ch;\
    \cf2 while\cf0 (ch ==\cf3 'y'\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "enter item \\n"\cf0 ;\
        \cf6 cin\cf0 >>data;\
        \cf9 Simple_insert\cf0 (data);\
        \cf9 Dsiplay\cf0 ();\
        \cf6 cout\cf0 <<\cf8 endl\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Insert ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>ch;\
    \}\
    \cf6 cout\cf0 <<\cf7 "Delete ? (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>ch;\
    \cf2 while\cf0 (ch ==\cf3 'y'\cf0 )\
    \{\
        \
        \cf9 Simple_deletion\cf0 ();\
        \cf9 Dsiplay\cf0 ();\
        \cf6 cout\cf0 <<\cf8 endl\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Delete ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>ch;\
    \}\
    \
    \
    \cf6 cout\cf0 <<\cf7 "Circular Insert ? (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>ch;\
    \cf2 while\cf0 (ch ==\cf3 'y'\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "enter item \\n"\cf0 ;\
        \cf6 cin\cf0 >>data;\
        \cf9 circular_insert\cf0 (data);\
        \cf9 Dsiplay\cf0 ();\
        \cf6 cout\cf0 <<\cf8 endl\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Circular Insert ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>ch;\
    \}\
    \
    \cf6 cout\cf0 <<\cf7 "Circular Delete ? (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>ch;\
    \cf2 while\cf0 (ch ==\cf3 'y'\cf0 )\
    \{\
        \
        \cf9 circular_delete\cf0 ();\
        \cf9 Dsiplay\cf0 ();\
        \cf6 cout\cf0 <<\cf8 endl\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Circular Delete ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>ch;\
    \}\
    \
\
    \
    \
\}}