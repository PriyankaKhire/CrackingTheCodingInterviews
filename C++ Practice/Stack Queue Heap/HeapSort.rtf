{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red63\green110\blue116;\red38\green71\blue75;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
 Heap\
 \
 implementing max heap where the root is bigger than the childern\
 */\cf0 \
\
\cf3 static\cf0  \cf3 const\cf0  \cf3 int\cf0  n = \cf4 10\cf0 ;\
\cf3 int\cf0  heap[\cf5 n\cf0 ];\
\cf3 int\cf0  numberOfElements = \cf4 0\cf0 ;\
\cf3 int\cf0  HeapPointer = \cf4 0\cf0 ;\
\
\cf3 bool\cf0  isFull()\
\{\
    \cf3 if\cf0 (\cf5 numberOfElements\cf0  == \cf5 n\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 bool\cf0  isEmpty()\
\{\
    \cf3 if\cf0 (\cf5 numberOfElements\cf0  == \cf4 0\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 int\cf0  LeftChildIndex(\cf3 int\cf0  parentIndex)\
\{\
    \cf3 return\cf0  (\cf4 2\cf0 *parentIndex)+\cf4 1\cf0 ;\
\}\
\
\cf3 int\cf0  RightChildIndex(\cf3 int\cf0  parentIndex)\
\{\
    \cf3 return\cf0  (\cf4 2\cf0 *parentIndex)+\cf4 2\cf0 ;\
\}\
\
\cf3 int\cf0  ParentIndex(\cf3 int\cf0  childIndex)\
\{\
    \cf3 if\cf0 (childIndex%\cf4 2\cf0  == \cf4 0\cf0 )\
    \{\
        \cf2 //Right Child\cf0 \
        \cf3 return\cf0  (childIndex-\cf4 2\cf0 )/\cf4 2\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf2 //Left Child\cf0 \
        \cf3 return\cf0  (childIndex-\cf4 1\cf0 )/\cf4 2\cf0 ;\
    \}\
\}\
\
\cf3 void\cf0  swap(\cf3 int\cf0  &a, \cf3 int\cf0  &b)\
\{\
    \cf3 int\cf0  temp = a;\
    a = b;\
    b = temp;\
\}\
\
\cf3 void\cf0  BottomHeapify(\cf3 int\cf0  childIndex)\
\{\
    \cf3 if\cf0 (childIndex > \cf4 0\cf0 )\
    \{\
        \cf3 int\cf0  parentIndex = \cf6 ParentIndex\cf0 (childIndex);\
        \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] < \cf5 heap\cf0 [childIndex])\
        \{\
            \cf6 swap\cf0 (\cf5 heap\cf0 [parentIndex], \cf5 heap\cf0 [childIndex]);\
            \cf6 BottomHeapify\cf0 (parentIndex);\
        \}\
    \}\
\}\
\
\cf3 void\cf0  TopHeapify(\cf3 int\cf0  parentIndex)\
\{\
    \cf3 if\cf0 (parentIndex < \cf5 HeapPointer\cf0 )\
    \{\
        \cf3 int\cf0  rChildIndex = \cf6 RightChildIndex\cf0 (parentIndex);\
        \cf3 int\cf0  lChildIndex = \cf6 LeftChildIndex\cf0 (parentIndex);\
        \
        \cf3 if\cf0 (rChildIndex < \cf5 HeapPointer\cf0  && lChildIndex < \cf5 HeapPointer\cf0 )\
        \{\
            \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] > \cf5 heap\cf0 [lChildIndex])\
            \{\
                \cf2 //Right Child big\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] < \cf5 heap\cf0 [rChildIndex])\
                \{\
                    \cf6 swap\cf0 (\cf5 heap\cf0 [rChildIndex], \cf5 heap\cf0 [parentIndex]);\
                    \cf6 TopHeapify\cf0 (rChildIndex);\
                \}\
            \}\
            \cf3 else\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] < \cf5 heap\cf0 [lChildIndex])\
            \{\
                \cf2 //Left child big\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] < \cf5 heap\cf0 [lChildIndex])\
                \{\
                    \cf6 swap\cf0 (\cf5 heap\cf0 [lChildIndex], \cf5 heap\cf0 [parentIndex]);\
                    \cf6 TopHeapify\cf0 (lChildIndex);\
                \}\
            \}\
        \}\
    \}\
\}\
\
\cf3 void\cf0  del(\cf3 int\cf0  pos)\
\{\
    \cf3 if\cf0 (\cf6 isEmpty\cf0 ())\
    \{\
        \cf7 cout\cf0 <<\cf8 "Heap is empty\\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 numberOfElements\cf0 --;\
        \cf5 HeapPointer\cf0 --;\
        \cf5 heap\cf0 [pos] = \cf5 heap\cf0 [\cf5 HeapPointer\cf0 ];\
        \cf5 heap\cf0 [\cf5 HeapPointer\cf0 ] = \cf4 0\cf0 ;\
        \cf6 TopHeapify\cf0 (pos);\
    \}\
\}\
\
\cf3 void\cf0  insert(\cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf6 isFull\cf0 ())\
    \{\
        \cf7 cout\cf0 <<\cf8 "Heap is Full\\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 numberOfElements\cf0 ++;\
        \cf5 heap\cf0 [\cf5 HeapPointer\cf0 ] = data;\
        \cf6 BottomHeapify\cf0 (\cf5 HeapPointer\cf0 );\
        \cf5 HeapPointer\cf0 ++;\
    \}\
\}\
\
\cf3 void\cf0  display()\
\{\
    \cf3 int\cf0  j = \cf4 0\cf0 ;\
    \cf3 int\cf0  l = \cf4 0\cf0 ;\
    \cf3 while\cf0 (j< \cf5 HeapPointer\cf0 )\
    \{\
        \cf3 int\cf0  numberOfNodesAtEachLevel = \cf9 pow\cf0 (\cf4 2\cf0 , l);\
        \cf3 int\cf0  NodeCount = \cf4 0\cf0 ;\
        \cf3 while\cf0 (NodeCount < numberOfNodesAtEachLevel && j<\cf5 HeapPointer\cf0 )\
        \{\
            NodeCount++;\
            \cf7 cout\cf0 <<\cf5 heap\cf0 [j]<<\cf8 " "\cf0 ;\
            j++;\
        \}\
        l++;\
        \cf7 cout\cf0 <<\cf9 endl\cf0 ;\
    \}\
    \
\}\
\
\cf3 void\cf0  SortHeapify(\cf3 int\cf0  parentIndex, \cf3 int\cf0  n)\
\{\
    \cf2 //Basicall same as top heapify but with bound as n and not HeapPointer\cf0 \
    \cf3 if\cf0 (parentIndex <= n)\
    \{\
        \cf3 int\cf0  rChildIndex = \cf6 RightChildIndex\cf0 (parentIndex);\
        \cf3 int\cf0  lChildIndex = \cf6 LeftChildIndex\cf0 (parentIndex);\
        \
        \cf3 if\cf0 (rChildIndex <= n && lChildIndex <= n)\
        \{\
            \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] > \cf5 heap\cf0 [lChildIndex])\
            \{\
                \cf2 //Right Child big\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] < \cf5 heap\cf0 [rChildIndex])\
                \{\
                    \cf6 swap\cf0 (\cf5 heap\cf0 [rChildIndex], \cf5 heap\cf0 [parentIndex]);\
                    \cf6 SortHeapify\cf0 (rChildIndex, n);\
                \}\
            \}\
            \cf3 else\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] < \cf5 heap\cf0 [lChildIndex])\
                \{\
                    \cf2 //Left child big\cf0 \
                    \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] < \cf5 heap\cf0 [lChildIndex])\
                    \{\
                        \cf6 swap\cf0 (\cf5 heap\cf0 [lChildIndex], \cf5 heap\cf0 [parentIndex]);\
                        \cf6 SortHeapify\cf0 (lChildIndex, n);\
                    \}\
                \}\
        \}\
    \}\
\
\}\
\
\cf3 void\cf0  sort(\cf3 int\cf0  top ,\cf3 int\cf0  n)\
\{\
    \cf3 if\cf0 (n > \cf4 0\cf0 )\
    \{\
        \cf6 swap\cf0 (\cf5 heap\cf0 [top], \cf5 heap\cf0 [n]);\
        \cf6 SortHeapify\cf0 (\cf4 0\cf0 , n-\cf4 1\cf0 );\
        \cf6 sort\cf0 (top, n-\cf4 1\cf0 );\
    \}\
    \cf3 if\cf0 (n == \cf4 0\cf0 )\
    \{\
        \cf3 if\cf0 (\cf5 heap\cf0 [n] > \cf5 heap\cf0 [n+\cf4 1\cf0 ])\
        \{\
            \cf6 swap\cf0 (\cf5 heap\cf0 [n], \cf5 heap\cf0 [n+\cf4 1\cf0 ]);\
        \}\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf6 insert\cf0 (\cf4 16\cf0 );\
    \cf6 insert\cf0 (\cf4 14\cf0 );\
    \cf6 insert\cf0 (\cf4 2\cf0 );\
    \cf6 insert\cf0 (\cf4 4\cf0 );\
    \cf6 insert\cf0 (\cf4 10\cf0 );\
    \cf6 insert\cf0 (\cf4 8\cf0 );\
    \cf6 insert\cf0 (\cf4 7\cf0 );\
    \cf6 del\cf0 (\cf4 0\cf0 );\
    \cf6 insert\cf0 (\cf4 9\cf0 );\
    \cf6 insert\cf0 (\cf4 3\cf0 );\
    \cf6 insert\cf0 (\cf4 1\cf0 );\
    \cf6 display\cf0 ();\
    \cf6 sort\cf0 (\cf4 0\cf0 , \cf5 HeapPointer\cf0 -\cf4 1\cf0 );\
    \cf6 display\cf0 ();\
\}\
\
\
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\
\cf2 /*\
 Heap\
 \
 implementing MIN heap where the root is bigger than the childern\
 */\cf0 \
\
\cf3 static\cf0  \cf3 const\cf0  \cf3 int\cf0  n = \cf4 10\cf0 ;\
\cf3 int\cf0  heap[\cf5 n\cf0 ];\
\cf3 int\cf0  numberOfElements = \cf4 0\cf0 ;\
\cf3 int\cf0  HeapPointer = \cf4 0\cf0 ;\
\
\cf3 bool\cf0  isFull()\
\{\
    \cf3 if\cf0 (\cf5 numberOfElements\cf0  == \cf5 n\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 bool\cf0  isEmpty()\
\{\
    \cf3 if\cf0 (\cf5 numberOfElements\cf0  == \cf4 0\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 int\cf0  LeftChildIndex(\cf3 int\cf0  parentIndex)\
\{\
    \cf3 return\cf0  (\cf4 2\cf0 *parentIndex)+\cf4 1\cf0 ;\
\}\
\
\cf3 int\cf0  RightChildIndex(\cf3 int\cf0  parentIndex)\
\{\
    \cf3 return\cf0  (\cf4 2\cf0 *parentIndex)+\cf4 2\cf0 ;\
\}\
\
\cf3 int\cf0  ParentIndex(\cf3 int\cf0  childIndex)\
\{\
    \cf3 if\cf0 (childIndex%\cf4 2\cf0  == \cf4 0\cf0 )\
    \{\
        \cf2 //Right Child\cf0 \
        \cf3 return\cf0  (childIndex-\cf4 2\cf0 )/\cf4 2\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf2 //Left Child\cf0 \
        \cf3 return\cf0  (childIndex-\cf4 1\cf0 )/\cf4 2\cf0 ;\
    \}\
\}\
\
\cf3 void\cf0  swap(\cf3 int\cf0  &a, \cf3 int\cf0  &b)\
\{\
    \cf3 int\cf0  temp = a;\
    a = b;\
    b = temp;\
\}\
\
\cf3 void\cf0  BottomHeapify(\cf3 int\cf0  childIndex)\
\{\
    \cf3 if\cf0 (childIndex > \cf4 0\cf0 )\
    \{\
        \cf3 int\cf0  parentIndex = \cf6 ParentIndex\cf0 (childIndex);\
        \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] > \cf5 heap\cf0 [childIndex])\
        \{\
            \cf6 swap\cf0 (\cf5 heap\cf0 [parentIndex], \cf5 heap\cf0 [childIndex]);\
            \cf6 BottomHeapify\cf0 (parentIndex);\
        \}\
    \}\
\}\
\
\cf3 void\cf0  TopHeapify(\cf3 int\cf0  parentIndex)\
\{\
    \cf3 if\cf0 (parentIndex < \cf5 HeapPointer\cf0 )\
    \{\
        \cf3 int\cf0  rChildIndex = \cf6 RightChildIndex\cf0 (parentIndex);\
        \cf3 int\cf0  lChildIndex = \cf6 LeftChildIndex\cf0 (parentIndex);\
        \
        \cf3 if\cf0 (rChildIndex < \cf5 HeapPointer\cf0  && lChildIndex < \cf5 HeapPointer\cf0 )\
        \{\
            \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] < \cf5 heap\cf0 [lChildIndex])\
            \{\
                \cf2 //Right Child big\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] > \cf5 heap\cf0 [rChildIndex])\
                \{\
                    \cf6 swap\cf0 (\cf5 heap\cf0 [rChildIndex], \cf5 heap\cf0 [parentIndex]);\
                    \cf6 TopHeapify\cf0 (rChildIndex);\
                \}\
            \}\
            \cf3 else\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] > \cf5 heap\cf0 [lChildIndex])\
                \{\
                    \cf2 //Left child big\cf0 \
                    \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] > \cf5 heap\cf0 [lChildIndex])\
                    \{\
                        \cf6 swap\cf0 (\cf5 heap\cf0 [lChildIndex], \cf5 heap\cf0 [parentIndex]);\
                        \cf6 TopHeapify\cf0 (lChildIndex);\
                    \}\
                \}\
        \}\
    \}\
\}\
\
\cf3 void\cf0  del(\cf3 int\cf0  pos)\
\{\
    \cf3 if\cf0 (\cf6 isEmpty\cf0 ())\
    \{\
        \cf7 cout\cf0 <<\cf8 "Heap is empty\\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 numberOfElements\cf0 --;\
        \cf5 HeapPointer\cf0 --;\
        \cf5 heap\cf0 [pos] = \cf5 heap\cf0 [\cf5 HeapPointer\cf0 ];\
        \cf5 heap\cf0 [\cf5 HeapPointer\cf0 ] = \cf4 0\cf0 ;\
        \cf6 TopHeapify\cf0 (pos);\
    \}\
\}\
\
\cf3 void\cf0  insert(\cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf6 isFull\cf0 ())\
    \{\
        \cf7 cout\cf0 <<\cf8 "Heap is Full\\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 numberOfElements\cf0 ++;\
        \cf5 heap\cf0 [\cf5 HeapPointer\cf0 ] = data;\
        \cf6 BottomHeapify\cf0 (\cf5 HeapPointer\cf0 );\
        \cf5 HeapPointer\cf0 ++;\
    \}\
\}\
\
\cf3 void\cf0  display()\
\{\
    \cf3 int\cf0  j = \cf4 0\cf0 ;\
    \cf3 int\cf0  l = \cf4 0\cf0 ;\
    \cf3 while\cf0 (j< \cf5 HeapPointer\cf0 )\
    \{\
        \cf3 int\cf0  numberOfNodesAtEachLevel = \cf9 pow\cf0 (\cf4 2\cf0 , l);\
        \cf3 int\cf0  NodeCount = \cf4 0\cf0 ;\
        \cf3 while\cf0 (NodeCount < numberOfNodesAtEachLevel && j<\cf5 HeapPointer\cf0 )\
        \{\
            NodeCount++;\
            \cf7 cout\cf0 <<\cf5 heap\cf0 [j]<<\cf8 " "\cf0 ;\
            j++;\
        \}\
        l++;\
        \cf7 cout\cf0 <<\cf9 endl\cf0 ;\
    \}\
    \cf7 cout\cf0 <<\cf8 "\\n------------------\\n"\cf0 ;\
\}\
\
\cf3 void\cf0  ArrayDispaly()\
\{\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 HeapPointer\cf0 ; i++)\
    \{\
        \cf7 cout\cf0 <<\cf5 heap\cf0 [i]<<\cf8 " "\cf0 ;\
    \}\
    \cf7 cout\cf0 <<\cf9 endl\cf0 ;\
\}\
\
\cf3 void\cf0  SortHeapify(\cf3 int\cf0  parentIndex, \cf3 int\cf0  n)\
\{\
    \cf2 //Basicall same as top heapify but with bound as n and not HeapPointer\cf0 \
    \cf3 if\cf0 (parentIndex <= n)\
    \{\
        \cf3 int\cf0  rChildIndex = \cf6 RightChildIndex\cf0 (parentIndex);\
        \cf3 int\cf0  lChildIndex = \cf6 LeftChildIndex\cf0 (parentIndex);\
        \
        \cf3 if\cf0 (rChildIndex <= n && lChildIndex <= n)\
        \{\
            \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] < \cf5 heap\cf0 [lChildIndex])\
            \{\
                \cf2 //Right Child big\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] > \cf5 heap\cf0 [rChildIndex])\
                \{\
                    \cf6 swap\cf0 (\cf5 heap\cf0 [rChildIndex], \cf5 heap\cf0 [parentIndex]);\
                    \cf6 SortHeapify\cf0 (rChildIndex, n);\
                \}\
            \}\
            \cf3 else\cf0 \
                \cf3 if\cf0 (\cf5 heap\cf0 [rChildIndex] > \cf5 heap\cf0 [lChildIndex])\
                \{\
                    \cf2 //Left child big\cf0 \
                    \cf3 if\cf0 (\cf5 heap\cf0 [parentIndex] > \cf5 heap\cf0 [lChildIndex])\
                    \{\
                        \cf6 swap\cf0 (\cf5 heap\cf0 [lChildIndex], \cf5 heap\cf0 [parentIndex]);\
                        \cf6 SortHeapify\cf0 (lChildIndex, n);\
                    \}\
                \}\
        \}\
    \}\
    \
\}\
\
\cf3 void\cf0  sort(\cf3 int\cf0  top ,\cf3 int\cf0  n)\
\{\
    \cf3 if\cf0 (n > \cf4 0\cf0 )\
    \{\
        \cf6 swap\cf0 (\cf5 heap\cf0 [top], \cf5 heap\cf0 [n]);\
        \cf6 SortHeapify\cf0 (\cf4 0\cf0 , n-\cf4 1\cf0 );\
        \cf6 sort\cf0 (top, n-\cf4 1\cf0 );\
    \}\
    \cf3 if\cf0 (n == \cf4 0\cf0 )\
    \{\
        \cf3 if\cf0 (\cf5 heap\cf0 [n] > \cf5 heap\cf0 [n+\cf4 1\cf0 ])\
        \{\
            \cf6 swap\cf0 (\cf5 heap\cf0 [n], \cf5 heap\cf0 [n+\cf4 1\cf0 ]);\
        \}\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf3 int\cf0  N = \cf4 10\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i <N; i++)\
    \{\
        \cf6 insert\cf0 (i+\cf4 1\cf0 );\
        \cf3 if\cf0 ((i+\cf4 1\cf0 )%\cf4 2\cf0  == \cf4 0\cf0 )\
        \{\
            \cf2 //Even number of elements\cf0 \
            \cf6 ArrayDispaly\cf0 ();\
            \cf3 float\cf0  mean = (\cf5 heap\cf0 [(\cf5 HeapPointer\cf0 -\cf4 1\cf0 )/\cf4 2\cf0 ]+ \cf5 heap\cf0 [((\cf5 HeapPointer\cf0 -\cf4 1\cf0 )/\cf4 2\cf0 )+\cf4 1\cf0 ])/\cf4 2\cf0 ;\
            \cf7 cout\cf0 <<\cf8 "i = "\cf0 <<i<<\cf8 " mean = "\cf0 <<mean<<\cf9 endl\cf0 ;\
            \cf7 cout\cf0 <<\cf8 "-------------\\n"\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf2 //Odd Number of elements\cf0 \
            \cf6 ArrayDispaly\cf0 ();\
            \cf7 cout\cf0 <<\cf8 "i = "\cf0 <<i<<\cf8 " mean = "\cf0 <<\cf5 heap\cf0 [(\cf5 HeapPointer\cf0 -\cf4 1\cf0 )/\cf4 2\cf0 ]<<\cf9 endl\cf0 ;\
            \cf7 cout\cf0 <<\cf8 "-------------\\n"\cf0 ;\
        \}\
    \}\
    \
\}\
}