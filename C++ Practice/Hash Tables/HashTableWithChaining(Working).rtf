{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red92\green38\blue153;\red196\green26\blue22;
\red28\green0\blue207;\red63\green110\blue116;\red0\green116\blue0;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 struct\cf0  HashTable\
\{\
    \cf3 string\cf0  key = \cf4 "null"\cf0 ;\
    \cf2 int\cf0  value = \cf5 0\cf0 ;\
    \cf6 HashTable\cf0  *link = \cf2 NULL\cf0 ;\
\};\
\
\cf6 HashTable\cf0  **Directory = \cf2 new\cf0  \cf6 HashTable\cf0 *[\cf5 5\cf0 ]; \cf7 //Notice how the array of opinters is initialised\cf0 \
\cf2 int\cf0  TableSize = \cf5 5\cf0 ;\
\
\cf2 int\cf0  HashFunction(\cf3 string\cf0  key)\
\{\
    \cf2 int\cf0  index;\
    \cf2 int\cf0  sum = \cf5 0\cf0 ;\
    \
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf5 0\cf0 ; i < key.\cf8 length\cf0 (); i++)\
    \{\
        sum += key[\cf8 i\cf0 ];\
    \}\
    \
    index = sum % \cf6 TableSize\cf0 ;\
    \cf7 //cout<< key<<endl<<index<<endl;\cf0 \
    \cf2 return\cf0  index;\
\}\
\
\cf2 void\cf0  chaining(\cf3 string\cf0  key, \cf2 int\cf0  value)\
\{\
    \cf6 HashTable\cf0  *chainBox;\
    chainBox = \cf2 new\cf0  \cf6 HashTable\cf0 ;\
    \
    chainBox->\cf6 key\cf0  = key;\
    chainBox->\cf6 value\cf0  = value;\
    chainBox->\cf6 link\cf0  = \cf2 NULL\cf0 ;\
    \
    \cf2 int\cf0  index;\
    index = \cf9 HashFunction\cf0 (key);\
    \
    \cf6 HashTable\cf0  *ptr;\
    ptr = \cf6 Directory\cf0 [index];\
    \
    \cf2 while\cf0  (ptr->\cf6 link\cf0  != \cf2 NULL\cf0 )\
    \{\
        ptr = ptr->\cf6 link\cf0 ;\
    \}\
    \
    ptr->\cf6 link\cf0  = chainBox;\
\}\
\
\cf2 void\cf0  chainingRetrive(\cf3 string\cf0  key)\
\{\
    \cf2 int\cf0  index;\
    index = \cf9 HashFunction\cf0 (key);\
    \
    \cf6 HashTable\cf0  *ptr;\
    ptr = \cf6 Directory\cf0 [index];\
    \
    \cf2 while\cf0  (ptr != \cf2 NULL\cf0 )\
    \{\
        \cf2 if\cf0 (ptr->\cf6 key\cf0  == key)\
        \{\
            \cf3 cout\cf0 <<\cf4 "Key = "\cf0 <<ptr->\cf6 key\cf0 <<\cf4 " Value = "\cf0 <<ptr->\cf6 value\cf0 <<\cf8 endl\cf0 ;\
            \cf2 break\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            ptr = ptr->\cf6 link\cf0 ;\
        \}\
    \}\
    \cf2 if\cf0 (ptr == \cf2 NULL\cf0 )\
    \{\
        \cf3 cout\cf0 <<\cf4 "Doesn't exist"\cf0 ;\
    \}\
    \
\}\
\
\cf2 int\cf0  main(\cf2 int\cf0  argc, \cf2 const\cf0  \cf2 char\cf0  * argv[])\
\{\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf5 0\cf0  ; i < \cf5 5\cf0 ; i++)\
    \{\
        \cf6 Directory\cf0 [i] = \cf2 new\cf0  \cf6 HashTable\cf0 ;  \cf7 // This is to initialise each n every node of array of opinters\cf0 \
    \}\
    \
    \cf2 char\cf0  ch;\
    \cf3 string\cf0  key;\
    \cf2 int\cf0  value, index;\
    \cf3 cout\cf0 <<\cf4 "Enter data (y/n)"\cf0 ;\
    \cf3 cin\cf0 >>ch;\
    \cf2 while\cf0 (ch != \cf5 'n'\cf0 )\
    \{\
        \cf3 cout\cf0 <<\cf4 "key = "\cf0 ;\
        \cf3 cin\cf0 >>key;\
        \cf3 cin\cf0 .\cf8 ignore\cf0 ();\
        index = \cf9 HashFunction\cf0 (key);\
        \cf3 cout\cf0 <<\cf4 "Value = "\cf0 ;\
        \cf3 cin\cf0 >>value;\
        \cf2 if\cf0 (\cf6 Directory\cf0 [index]->\cf6 value\cf0  == \cf5 0\cf0  && \cf6 Directory\cf0 [index]->\cf6 key\cf0  == \cf4 "null"\cf0 )\
        \{\
        \cf6 Directory\cf0 [index]->\cf6 value\cf0  = value;\
        \cf6 Directory\cf0 [index]->\cf6 key\cf0  = key;\
        \cf6 Directory\cf0 [index]->\cf6 link\cf0  = \cf2 NULL\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf3 cout\cf0 <<\cf4 "Something present there"\cf0 <<\cf8 endl\cf0 ;\
            \cf9 chaining\cf0 (key, value);\
            \
        \}\
        \cf3 cout\cf0 <<\cf4 "Enter data (y/n)"\cf0 ;\
        \cf3 cin\cf0 >>ch;\
    \}\
    \cf3 cout\cf0 <<\cf4 "Retrive data (y/n)"\cf0 ;\
    \cf3 cin\cf0 >>ch;\
    \cf2 while\cf0 (ch != \cf5 'n'\cf0 )\
    \{\
        \cf3 cout\cf0 <<\cf4 "key = "\cf0 ;\
        \cf3 cin\cf0 >>key;\
        \cf3 cin\cf0 .\cf8 ignore\cf0 ();\
        index = \cf9 HashFunction\cf0 (key);\
        \cf2 if\cf0 (\cf6 Directory\cf0 [index]->\cf6 value\cf0  != \cf5 0\cf0  && \cf6 Directory\cf0 [index]->\cf6 key\cf0  == key)\
        \{\
            \cf3 cout\cf0 <<\cf4 "Key = "\cf0 <<\cf6 Directory\cf0 [index]->\cf6 key\cf0 <<\cf4 " Value = "\cf0 <<\cf6 Directory\cf0 [index]->\cf6 value\cf0 <<\cf8 endl\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf9 chainingRetrive\cf0 (key);\
        \}\
        \cf3 cout\cf0 <<\cf4 "Enter data (y/n)"\cf0 ;\
        \cf3 cin\cf0 >>ch;\
    \}\
\
\}\
}