{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red0\green116\blue0;
\red92\green38\blue153;\red63\green110\blue116;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 class\cf0  HashTable\
\{\
    \
\cf2 private\cf0 :\
    \cf2 static\cf0  \cf2 const\cf0  \cf2 int\cf0  TableSize = \cf3 5\cf0 ; \cf4 //This step of making it static const int is taken coz else this part |\cf0 \
    \cf2 struct\cf0  Bucket                      \cf4 //                                                                 |\cf0 \
    \{                                  \cf4 //                                                                 |\cf0 \
        \cf5 string\cf0  key;                    \cf4 //                                                                 |\cf0 \
        \cf5 string\cf0  value;                  \cf4 //                                                                 |\cf0 \
        \cf2 int\cf0  NumberOfEntriesInBucket;   \cf4 //                                                                 |\cf0 \
        \cf6 Bucket\cf0  *link;                  \cf4 //                                                                 |\cf0 \
    \};                                 \cf4 //                                                                 |\cf0 \
                                       \cf4 //                                                                 |\cf0 \
    \cf6 Bucket\cf0  *ManyBuckets[\cf6 TableSize\cf0 ];\cf4 //<<---------------------------------------------------Gives Error------\cf0 \
    \
    \
\cf2 public\cf0 :\
    HashTable()\
    \{\
        \cf4 //Now think in case of linked list what you did was created a single structure instance and then did the assignment based\cf0 \
        \cf4 // on the below format\cf0 \
        \cf4 /*\
        ManyBuckets->key = "NULL";\
        ManyBuckets->value = "NULL";\
        ManyBuckets->NumberOfEntriesInBucket = 0;\
        ManyBuckets->link = NULL;\
         */\cf0 \
        \cf4 // But this gives error besids there is an array of ManyBuckets and not just one bucket\cf0 \
        \
        \cf5 cout\cf0 <<\cf7 "Constructor initialised \\n"\cf0 ;\
        \
        \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i< \cf6 TableSize\cf0 ; i++)\
        \{\
            \cf6 ManyBuckets\cf0 [i] = \cf2 new\cf0  \cf6 Bucket\cf0 ;  \cf4 //<-- Experiment with this see what happens when u place it down\cf0 \
            \cf6 ManyBuckets\cf0 [i]->\cf6 key\cf0  = \cf7 "NULL"\cf0 ;\
            \cf6 ManyBuckets\cf0 [i]->\cf6 value\cf0  = \cf7 "NULL"\cf0 ;\
            \cf6 ManyBuckets\cf0 [i]->\cf6 NumberOfEntriesInBucket\cf0  = \cf3 0\cf0 ;\
            \cf6 ManyBuckets\cf0 [i]->\cf6 link\cf0  = \cf2 NULL\cf0 ;\
            \cf5 cout\cf0 <<\cf7 "|"\cf0 <<i+\cf3 1\cf0 <<\cf7 "|"\cf0 <<\cf6 ManyBuckets\cf0 [i]->\cf6 key\cf0 <<\cf7 "|"\cf0 <<\cf6 ManyBuckets\cf0 [i]->\cf6 value\cf0 <<\cf7 "|"\cf0 <<\cf6 ManyBuckets\cf0 [i]->\cf6 NumberOfEntriesInBucket\cf0 <<\cf7 "|-->"\cf0 ;\
        \}\
        \cf5 cout\cf0 <<\cf8 endl\cf0 ;\
        \
    \}\
    \
    \
    \cf4 //Normal functions\cf0 \
    \cf2 int\cf0  HashFunction(\cf5 string\cf0  key)\
    \{\
        \cf2 int\cf0  index = \cf3 0\cf0 ;\
        \cf2 int\cf0  length = \cf3 0\cf0 ;\
        \
        length = key.\cf8 length\cf0 ();\
        \
        \cf4 //Honor's hash function\cf0 \
        \cf2 for\cf0 (\cf2 int\cf0  i = length-\cf3 1\cf0  ; i >= \cf3 0\cf0  ; i--)\
        \{\
            index = (key[\cf8 i\cf0 ]+ (\cf3 128\cf0  * index)) % \cf6 TableSize\cf0 ;\
        \}\
        \
        \
        \cf2 return\cf0  index;\
    \}\
\
    \cf2 void\cf0  InsertIntoTable(\cf5 string\cf0  key, \cf5 string\cf0  value)\
    \{\
        \cf2 int\cf0  index = \cf3 0\cf0 ;\
        index = \cf9 HashFunction\cf0 (key);\
        \cf2 if\cf0 (\cf6 ManyBuckets\cf0 [index]->\cf6 key\cf0  == \cf7 "NULL"\cf0  && \cf6 ManyBuckets\cf0 [index]->\cf6 value\cf0  == \cf7 "NULL"\cf0  && \cf6 ManyBuckets\cf0 [index]->\cf6 NumberOfEntriesInBucket\cf0  == \cf3 0\cf0 )\
        \{\
            \cf4 //ManyBuckets[index] = new Bucket; //<<------This is very important do not forget to create this but let's place this up\cf0 \
            \cf6 ManyBuckets\cf0 [index]->\cf6 NumberOfEntriesInBucket\cf0 ++;\
            \cf6 ManyBuckets\cf0 [index]->\cf6 key\cf0  = key;\
            \cf6 ManyBuckets\cf0 [index]->\cf6 value\cf0  = value;\
            \cf6 ManyBuckets\cf0 [index]->\cf6 link\cf0  = \cf2 NULL\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf4 //Creating the new bucket in memory\cf0 \
            \cf6 Bucket\cf0 * NewBucket;\
            NewBucket = \cf2 new\cf0  \cf6 Bucket\cf0 ;\
            \
            \cf4 //Once new bucket is created make the head bucket point to it but what if the head bucket already has something\cf0 \
            \cf4 // imagine something like this\cf0 \
            \cf4 // |_|_|_|_|_|_|_|_|_|\cf0 \
            \cf4 //  ^ ^   ^   ^   ^ ^\cf0 \
            \cf4 //  | |   |   |   | |\cf0 \
            \cf4 // |_|_| |_| |_| |_|_|\cf0 \
            \cf4 //  ^     ^   ^     ^\cf0 \
            \cf4 //  |     |   |     |\cf0 \
            \cf4 // |_|   |_| |_|   |_|\cf0 \
            \cf4 //        ^\cf0 \
            \cf4 //        |\cf0 \
            \cf4 //     NewBucket\cf0 \
            \
            \cf4 //So now to traverse we use a pointer and The head of the pointer points to ManyBuckets[index]\cf0 \
            \cf6 Bucket\cf0 * Pointer; \cf4 //Coz its not a new bucket but it's a pointer\cf0 \
            \cf4 //Pointer = new Bucket; adding this line gives error coz it's a pointer and not a bucket\cf0 \
            \cf4 //You cannot traverse a buckets with another bucket thats insane :P\cf0 \
            Pointer =  \cf6 ManyBuckets\cf0 [index];\
            \
            \cf4 //Now do the traversal\cf0 \
            \cf2 while\cf0 (Pointer->\cf6 link\cf0  != \cf2 NULL\cf0 )  \cf4 //<<--- Notice this line now coz we havent done Pointer = new Bucket n thats why its\cf0 \
            \{                                                                            \cf4 //Pointer->link and not Pointer alone\cf0 \
                Pointer = Pointer->\cf6 link\cf0 ;\
            \}\
            \
            \cf4 //Now pointer points to the last bucket or what ever u call it the vertical shit where i have written NewBucket in diagram\cf0 \
            \
            Pointer->\cf6 link\cf0  = NewBucket;\
            \
            NewBucket->\cf6 key\cf0  = key;\
            NewBucket->\cf6 value\cf0  = value;\
            \cf6 ManyBuckets\cf0 [index]->\cf6 NumberOfEntriesInBucket\cf0 ++; \cf4 //Either way you got to increment this\cf0 \
            \cf4 //And for default to get rid of all garbage values\cf0 \
            NewBucket->\cf6 NumberOfEntriesInBucket\cf0  = \cf3 0\cf0 ;\
            \cf4 //And finally\cf0 \
            NewBucket->\cf6 link\cf0  = \cf2 NULL\cf0 ;\
            \
            \
        \}\
    \}\
    \
    \cf2 void\cf0  PrintTable()\
    \{\
        \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ;i<\cf6 TableSize\cf0 ;i++)\
        \{\
            \cf5 cout\cf0 <<\cf7 "|"\cf0 <<\cf6 ManyBuckets\cf0 [i]->\cf6 key\cf0 <<\cf7 "|"\cf0 <<\cf6 ManyBuckets\cf0 [i]->\cf6 value\cf0 <<\cf7 "|"\cf0 <<\cf6 ManyBuckets\cf0 [i]->\cf6 NumberOfEntriesInBucket\cf0 <<\cf7 "|-->"\cf0 ;\
            \cf2 if\cf0 (\cf6 ManyBuckets\cf0 [i]->\cf6 link\cf0  != \cf2 NULL\cf0 )\
            \{\
                \cf4 //Create a pointer to parse\cf0 \
                \cf6 Bucket\cf0  *Pointer;\
                Pointer = \cf2 new\cf0  \cf6 Bucket\cf0 ;\
                \
                \cf4 //Make pointer point to the root-->Bucket\cf0 \
                Pointer = \cf6 ManyBuckets\cf0 [i]->\cf6 link\cf0 ;\
                \cf2 while\cf0 (Pointer != \cf2 NULL\cf0 )\
                \{\
                    \cf5 cout\cf0 <<\cf7 "|"\cf0 <<Pointer->\cf6 key\cf0 <<\cf7 "|"\cf0 <<Pointer->\cf6 value\cf0 <<\cf7 "|-->"\cf0 ;\
                    Pointer = Pointer->\cf6 link\cf0 ;\
                \}\
                \
            \}\
            \cf5 cout\cf0 <<\cf8 endl\cf0 <<\cf7 "|"\cf0 <<\cf8 endl\cf0 <<\cf7 "|"\cf0 <<\cf8 endl\cf0 <<\cf7 "\\\\/"\cf0 <<\cf8 endl\cf0 ;\
        \}\
    \}\
    \
    \cf5 string\cf0  Retrival(\cf5 string\cf0  key)\
    \{\
        \cf2 int\cf0  index = \cf3 0\cf0 ;\
        index = \cf9 HashFunction\cf0 (key);\
        \
        \cf2 if\cf0 (\cf6 ManyBuckets\cf0 [index]->\cf6 key\cf0  == key)\
        \{\
            \cf2 return\cf0  \cf6 ManyBuckets\cf0 [index]->\cf6 value\cf0 ;\
        \}\
        \cf2 else\cf0 \
            \cf2 if\cf0 (\cf6 ManyBuckets\cf0 [index]->\cf6 key\cf0  != key)\
            \{\
                \cf2 if\cf0 (\cf6 ManyBuckets\cf0 [index]->\cf6 NumberOfEntriesInBucket\cf0 >\cf3 0\cf0 )\
                \{\
                    \cf6 Bucket\cf0  *Pointer;\
                    Pointer = \cf6 ManyBuckets\cf0 [index];\
                    \
                    \cf2 while\cf0 (Pointer->\cf6 link\cf0  != \cf2 NULL\cf0 )\
                    \{\
                        Pointer = Pointer->\cf6 link\cf0 ;\
                        \cf2 if\cf0 (Pointer->\cf6 key\cf0  == key)\
                        \{\
                            \cf2 return\cf0  Pointer->\cf6 value\cf0 ;\
                        \}\
                        \
                    \}\
                    \cf2 if\cf0 (Pointer->\cf6 link\cf0  == \cf2 NULL\cf0 )\
                    \{\
                        \cf2 return\cf0  \cf7 "Error"\cf0 ;\
                    \}\
                    \
                    \
                \}\
                \cf2 else\cf0 \
                    \cf2 if\cf0 (\cf6 ManyBuckets\cf0 [index]->\cf6 NumberOfEntriesInBucket\cf0  == \cf3 0\cf0 )\
                    \{\
                        \cf2 return\cf0  \cf7 "Error"\cf0 ;\
                    \}\
            \}\
        \cf2 else\cf0 \
            \cf2 return\cf0  \cf7 "Error"\cf0 ;\
        \
        \cf2 return\cf0  \cf7 "Error"\cf0 ;\
    \}\
\};\
\
\
\
\cf2 int\cf0  main(\cf2 int\cf0  argc, \cf2 const\cf0  \cf2 char\cf0  * argv[])\
\{\
    \cf6 HashTable\cf0  ht;\
    ht.\cf9 InsertIntoTable\cf0 (\cf7 "Priyanka"\cf0 , \cf7 "Khire"\cf0 );\
    ht.\cf9 InsertIntoTable\cf0 (\cf7 "Ketaki"\cf0 , \cf7 "Khire"\cf0 );\
    ht.\cf9 InsertIntoTable\cf0 (\cf7 "Milind"\cf0 , \cf7 "Khire"\cf0 );\
    ht.\cf9 InsertIntoTable\cf0 (\cf7 "Mohit"\cf0 , \cf7 "Morarka"\cf0 );\
    ht.\cf9 InsertIntoTable\cf0 (\cf7 "Sachin"\cf0 , \cf7 "Sangalad"\cf0 );\
    ht.\cf9 InsertIntoTable\cf0 (\cf7 "Madhura"\cf0 , \cf7 "Barve"\cf0 );\
    ht.\cf9 PrintTable\cf0 ();\
    \cf5 string\cf0  value = ht.\cf9 Retrival\cf0 (\cf7 "kaka"\cf0 );\
    \cf5 cout\cf0 <<\cf8 endl\cf0 <<\cf7 "The value is "\cf0 <<value<<\cf8 endl\cf0 ;\
    \
    \
\}\
}