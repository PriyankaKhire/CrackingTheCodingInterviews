{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red92\green38\blue153;\red0\green116\blue0;\red63\green110\blue116;\red28\green0\blue207;\red46\green13\blue110;
\red38\green71\blue75;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 #include \cf3 <iostream>\cf2 \
#include \cf3 <string>\cf2 \
\pard\tx529\pardeftab529\pardirnatural
\cf4 using\cf0  \cf4 namespace\cf0  \cf5 std\cf0 ;\
\
\
\cf6 /*\
 ******************Hash Table******************\
 Has Key-Value Pair\
 Has a hash function which takes the KEY gives an index value\
 In that index the key value pair both is stored. The main purpose of storing key along with value is:\
 So that suppose 2 different keys have same value.\
 Now suppose one key-value pair get assigned ine index but in that index already another key-value pair is present\
 this is termed as collission in this case a naive approach would be to do chaining but in this approach we use linear probing\
 in linear probing the hash function finds the slot for the key-value pair by probing the next consequent slot in the array.\
 */\cf0 \
\
\cf6 /*\
 In this particular hash function I will have key as any number and it's value as a string.\
 */\cf0 \
\
\cf4 class\cf0  HashTable\{\
\
\cf4 public\cf0 :\
    \cf4 int\cf0  key;\
    \cf5 string\cf0  value;\
    HashTable()\
    \{\
        \cf7 key\cf0  = \cf8 0\cf0 ;\
        \cf7 value\cf0  = \cf3 "null"\cf0 ;\
    \}\
    \
\};\
\
\cf7 HashTable\cf0  table[\cf8 5\cf0 ];\
\cf4 int\cf0  tableSize = \cf8 5\cf0 ;\
\
\cf4 int\cf0  NextTableIndex(\cf4 int\cf0  tableIndex)\
\{\
    \cf4 int\cf0  i = tableIndex++;\
    \cf4 int\cf0  j = tableIndex;\
    \cf4 if\cf0  (i == \cf8 5\cf0 )\
    \{\
        tableIndex =\cf8 0\cf0 ;\
    \}\
    \cf4 while\cf0 (i< \cf7 tableSize\cf0 )\
    \{\
        \cf4 if\cf0 (\cf7 table\cf0 [i].\cf7 key\cf0  == \cf8 0\cf0  && \cf7 table\cf0 [i].\cf7 value\cf0  == \cf3 "null"\cf0 )\
        \{\
            \cf4 return\cf0  i;\
        \}\
        \cf4 else\cf0  i++;\
    \}\
    \cf4 if\cf0 (i == \cf7 tableSize\cf0 )\
    \{\
        i = \cf8 0\cf0 ;\
        \cf4 while\cf0 (i<j)\
        \{\
            \cf4 if\cf0 (\cf7 table\cf0 [i].\cf7 key\cf0  == \cf8 0\cf0  && \cf7 table\cf0 [i].\cf7 value\cf0  == \cf3 "null"\cf0 )\
            \{\
                \cf4 return\cf0  i;\
            \}\
            \cf4 else\cf0  i++;\
        \}\
    \}\
    \
    \cf4 return\cf0  -\cf8 1\cf0 ;\
        \
\}\
\
\cf4 int\cf0  HashFunction(\cf4 int\cf0  key)\
\{\
    \cf4 int\cf0  tableIndex = \cf8 0\cf0 ;\
    \
    tableIndex = key % \cf7 tableSize\cf0 ;\
    \cf4 if\cf0  (\cf7 table\cf0 [tableIndex].\cf7 key\cf0  == \cf8 0\cf0  && \cf7 table\cf0 [tableIndex].\cf7 value\cf0  == \cf3 "null"\cf0 )\
    \{\
        \cf4 return\cf0  tableIndex;\
    \}\
    \cf4 else\cf0 \
    \{\
        \cf5 cout\cf0 <<\cf3 "Going to next table index"\cf0 <<\cf9 endl\cf0 ;\
        tableIndex = \cf10 NextTableIndex\cf0 (tableIndex);\
        \cf4 return\cf0  tableIndex;\
    \}\
    \
\}\
\
\cf4 void\cf0  displayHashTable()\
\{\
    \cf4 int\cf0  i = \cf8 0\cf0 ;\
    \cf4 for\cf0 (i = \cf8 0\cf0 ;i<\cf7 tableSize\cf0 ; i++)\
    \{\
        \cf5 cout\cf0 <<\cf3 "key "\cf0 <<\cf7 table\cf0 [i].\cf7 key\cf0 <<\cf3 " value "\cf0 <<\cf7 table\cf0 [i].\cf7 value\cf0 <<\cf9 endl\cf0 ;\
    \}\
\}\
\
\cf4 int\cf0  main(\cf4 int\cf0  argc, \cf4 const\cf0  \cf4 char\cf0  * argv[])\
\{\
    \cf10 displayHashTable\cf0 ();\
    \cf4 char\cf0  choice;\
    \cf5 cout\cf0 <<\cf9 endl\cf0 <<\cf3 "Would you like to insert a value ?? (y/n)"\cf0 ;\
    \cf5 cin\cf0 >>choice;\
    \cf4 int\cf0  tableIndex = \cf8 0\cf0 ;\
    \cf4 int\cf0  key =\cf8 0\cf0 ;\
    \cf4 while\cf0 (\cf9 tolower\cf0 (choice) == \cf8 'y'\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf9 endl\cf0 <<\cf3 "Enter the key: "\cf0 ;\
        \cf5 cin\cf0 >>key;\
        tableIndex = \cf10 HashFunction\cf0 (key);\
        \cf5 cout\cf0 <<tableIndex;\
        \cf4 if\cf0 (tableIndex == -\cf8 1\cf0 )\
        \{\
            choice = \cf8 'n'\cf0 ;\
            \cf4 break\cf0 ;\
        \}\
        \cf4 else\cf0 \{\
            \cf7 table\cf0 [tableIndex].\cf7 key\cf0  = key;\
            \cf5 cin\cf0 .\cf9 ignore\cf0 ();\
            \cf5 cout\cf0 <<\cf9 endl\cf0 <<\cf3 "Enter the value: "\cf0 ;\
            \cf9 getline\cf0 (\cf5 cin\cf0 , \cf7 table\cf0 [tableIndex].\cf7 value\cf0 );\
        \}\
        \
        \cf10 displayHashTable\cf0 ();\
        \
        \cf4 if\cf0 (tableIndex == \cf7 tableSize\cf0 )\
        \{\
            \cf5 cout\cf0 <<\cf9 endl\cf0 <<\cf3 "Hash table full"\cf0 ;\
            choice = \cf8 'n'\cf0 ;\
        \}\
        \cf4 else\cf0 \
        \{\
            \cf5 cout\cf0 <<\cf9 endl\cf0 <<\cf3 "Would you like to insert another value ?? (y\\n)"\cf0 ;\
            \cf5 cin\cf0 >>choice;\
        \}\
    \}\
    \
    \
\
    \
    \
    \
    \
\}\
\
}