{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red28\green0\blue207;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
Linked list operations\
add front\
add back\
delete front\
delete back\
reverse\
recursive reverse\
*/\cf0 \
\
\cf3 struct\cf0  Node\
\{\
    \cf3 int\cf0  data;\
    \cf3 struct\cf0  \cf4 Node\cf0  *link;\
\};\
\
\cf4 Node\cf0  *RootNode = \cf3 new\cf0  \cf4 Node\cf0 ;\
\
\cf3 void\cf0  insertBack(\cf3 int\cf0  data)\
\{\
    \cf2 //If its the first node\cf0 \
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  ==\cf3 NULL\cf0 )\
    \{\
        \cf4 RootNode\cf0 ->\cf4 data\cf0  = data;\
    \}\
    \cf2 //If not the first node\cf0 \
    \cf3 else\cf0 \
    \{\
        \cf4 Node\cf0  *NewNode;\
        NewNode = \cf3 new\cf0  \cf4 Node\cf0 ;\
        \
        NewNode->\cf4 data\cf0  = data;\
        NewNode->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
        \
        \cf4 Node\cf0  *Pointer;\
        \
        Pointer = \cf4 RootNode\cf0 ;\
        \
        \cf3 while\cf0 (Pointer->\cf4 link\cf0  != \cf3 NULL\cf0 )\
        \{\
            Pointer = Pointer->\cf4 link\cf0 ;\
        \}\
        \
        Pointer->\cf4 link\cf0  = NewNode;\
        \
    \}\
\}\
\
\cf3 void\cf0  insertFront(\cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
    \{\
        \cf4 RootNode\cf0 ->\cf4 data\cf0  = data;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 Node\cf0  *NewNode;\
        NewNode = \cf3 new\cf0  \cf4 Node\cf0 ;\
        \
        NewNode->\cf4 data\cf0  = data;\
        NewNode->\cf4 link\cf0  = \cf4 RootNode\cf0 ;\
        \
        \cf4 RootNode\cf0  = NewNode;\
    \}\
    \
\}\
\
\cf3 void\cf0  PrintLinkedList()\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0  && \cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Linked list is empty \\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  !=\cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
        \{\
            \cf6 cout\cf0 <<\cf7 "Only root node is filled and the data is "\cf0 <<\cf4 RootNode\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
        \}\
    \cf3 else\cf0 \
    \{\
        \cf4 Node\cf0  *Pointer;\
        Pointer = \cf4 RootNode\cf0 ;\
        \
        \cf3 while\cf0 (Pointer != \cf3 NULL\cf0 )\
        \{\
            \cf6 cout\cf0 <<\cf7 "|"\cf0 <<Pointer->\cf4 data\cf0 <<\cf7 "|-->"\cf0 ;\
            Pointer = Pointer->\cf4 link\cf0 ;\
        \}\
    \}\
\}\
\
\cf3 void\cf0  deleteFromFrontNode()\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  ==\cf3 NULL\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Linked list empty \\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 Node\cf0  *Pointer;\
        \
        Pointer = \cf4 RootNode\cf0 ;\
        \
        \cf4 RootNode\cf0  = \cf4 RootNode\cf0 ->\cf4 link\cf0 ;\
        \
        \cf6 cout\cf0 <<\cf7 "Deleted item is "\cf0 <<Pointer->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
        \cf9 PrintLinkedList\cf0 ();\
        \
        \cf3 delete\cf0  Pointer;\
    \}\
\}\
\
\cf3 void\cf0  reverse()\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0  && \cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Linked List is empty \\n"\cf0 ;\
    \}\
    \cf3 else\cf0  \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  != \cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Only one item in linked list "\cf0 <<\cf4 RootNode\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
    \}\
    \cf3 else\cf0  \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 link\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
    \{\
        \cf4 Node\cf0  *Pointer;\
        Pointer = \cf4 RootNode\cf0 ->\cf4 link\cf0 ;\
        Pointer->\cf4 link\cf0  = \cf4 RootNode\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
        \cf4 RootNode\cf0  = Pointer;\
        \cf9 PrintLinkedList\cf0 ();\
    \}\
    \cf3 else\cf0 \
    \{\
    \cf4 Node\cf0  *a, *b, *c;\
    \
    c = \cf4 RootNode\cf0 ;\
    b = \cf4 RootNode\cf0 ->\cf4 link\cf0 ;\
    a = \cf4 RootNode\cf0 ->\cf4 link\cf0 ;\
    \
    \cf2 // |_|->|_|->|_|->|_|->|_|->|_|->|_|->NULL\cf0 \
    \cf2 //  ^    ^    ^\cf0 \
    \cf2 //  |    |    |\cf0 \
    \cf2 //  c    b    a\cf0 \
    \
    \cf2 //Since C is pointing to root node\cf0 \
    c->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \
    \cf3 while\cf0 (a->\cf4 link\cf0  != \cf3 NULL\cf0 )\
    \{\
        a = a->\cf4 link\cf0 ;\
        b->\cf4 link\cf0  = c;\
        c = b;\
        b = a;\
    \}\
   \
    b->\cf4 link\cf0  = c;\
    \cf4 RootNode\cf0  = a;\
    \
    \cf9 PrintLinkedList\cf0 ();\
        \
    \}\
\}\
\
\cf3 void\cf0  RecursiveReverse(\cf4 Node\cf0  *Prev, \cf4 Node\cf0  *Curr, \cf4 Node\cf0  *Next)\
\{\
    \cf3 if\cf0 (Prev == \cf4 RootNode\cf0 )\
    \{\
        Prev->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \}\
    \cf3 if\cf0 (Next->\cf4 link\cf0  == \cf3 NULL\cf0 )\
    \{\
        Curr->\cf4 link\cf0  = Prev;\
        \cf4 RootNode\cf0  = Next;\
    \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (Next->\cf4 link\cf0  !=\cf3 NULL\cf0 )\
    \{\
        Next = Next->\cf4 link\cf0 ;\
        Curr->\cf4 link\cf0  = Prev;\
        \cf9 RecursiveReverse\cf0 (Curr, Next, Next);\
    \}\
\}\
\
\cf3 void\cf0  deleteBackNode()\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  ==\cf3 NULL\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Linked list empty \\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 Node\cf0  *Pointer;\
        \cf4 Node\cf0  *PreviousPointer;\
        \
        PreviousPointer = Pointer;\
        Pointer = \cf4 RootNode\cf0 ;\
        \
        \cf3 while\cf0 (Pointer->\cf4 link\cf0  != \cf3 NULL\cf0 )\
        \{\
            PreviousPointer = Pointer;\
            Pointer = Pointer->\cf4 link\cf0 ;\
        \}\
        \
        PreviousPointer->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
        \
        \cf6 cout\cf0 <<\cf7 "Deleted item is "\cf0 <<Pointer->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
        \cf9 PrintLinkedList\cf0 ();\
        \
        \cf3 delete\cf0  Pointer;\
        \
        \
        \
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf4 RootNode\cf0 ->\cf4 data\cf0  = \cf5 0\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \cf3 int\cf0  data;\
    \cf3 char\cf0  choice;\
    \cf6 cout\cf0 <<\cf7 "Would you like to add items at back in linked list > (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>choice;\
    \cf3 while\cf0 (choice == \cf5 'y'\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Enter data \\n"\cf0 ;\
        \cf6 cin\cf0 >>data;\
        \cf9 insertBack\cf0 (data);\
        \
        \cf6 cout\cf0 <<\cf7 "Would you like to insert more ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>choice;\
        \
    \}\
    \
    \cf6 cout\cf0 <<\cf7 "Would you like to add items at front in linked list > (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>choice;\
    \cf3 while\cf0 (choice == \cf5 'y'\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Enter data \\n"\cf0 ;\
        \cf6 cin\cf0 >>data;\
        \cf9 insertFront\cf0 (data);\
        \
        \cf6 cout\cf0 <<\cf7 "Would you like to insert more ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>choice;\
        \
    \}\
\
    \cf9 PrintLinkedList\cf0 ();\
    \
    \cf6 cout\cf0 <<\cf7 "Would you like to delete items at front in linked list > (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>choice;\
    \cf3 while\cf0 (choice == \cf5 'y'\cf0 )\
    \{\
        \cf9 deleteFromFrontNode\cf0 ();\
        \
        \cf6 cout\cf0 <<\cf7 "Would you like to delete more ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>choice;\
        \
    \}\
\
    \cf6 cout\cf0 <<\cf7 "Would you like to delete items at back in linked list > (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>choice;\
    \cf3 while\cf0 (choice == \cf5 'y'\cf0 )\
    \{\
        \cf9 deleteBackNode\cf0 ();\
        \
        \cf6 cout\cf0 <<\cf7 "Would you like to delete more ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>choice;\
        \
    \}\
\
    \cf9 reverse\cf0 ();\
    \cf6 cout\cf0 <<\cf8 endl\cf0 ;\
    \
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0  && \cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Linked List is empty \\n"\cf0 ;\
    \}\
    \cf3 else\cf0  \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  != \cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Only one item in linked list "\cf0 <<\cf4 RootNode\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
\
    \cf9 RecursiveReverse\cf0 (\cf4 RootNode\cf0 , \cf4 RootNode\cf0 ->\cf4 link\cf0 , \cf4 RootNode\cf0 ->\cf4 link\cf0 );\
    \cf9 PrintLinkedList\cf0 ();\
    \}\
    \
    \
    \
\}}