{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red63\green110\blue116;\red28\green0\blue207;
\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red0\green116\blue0;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 struct\cf0  Node\
\{\
    \cf2 int\cf0  data;\
    \cf3 Node\cf0  *link;\
\};\
\
\cf3 Node\cf0  *RootNode = \cf2 new\cf0  \cf3 Node\cf0 ;\
\
\
\cf2 void\cf0  insertFront(\cf2 int\cf0  data)\
\{\
    \cf2 if\cf0 (\cf3 RootNode\cf0 ->\cf3 data\cf0  == \cf4 0\cf0  && \cf3 RootNode\cf0 ->\cf3 link\cf0  == \cf2 NULL\cf0 )\
    \{\
        \cf3 RootNode\cf0 ->\cf3 data\cf0  = data;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf3 Node\cf0  *NewNode;\
        NewNode = \cf2 new\cf0  \cf3 Node\cf0 ;\
        \
        NewNode->\cf3 data\cf0  = data;\
        NewNode->\cf3 link\cf0  = \cf3 RootNode\cf0 ;\
        \
        \cf3 RootNode\cf0  = NewNode;\
    \}\
    \
\}\
\
\cf2 void\cf0  PrintLinkedList()\
\{\
    \cf2 if\cf0 (\cf3 RootNode\cf0 ->\cf3 link\cf0  == \cf2 NULL\cf0  && \cf3 RootNode\cf0 ->\cf3 data\cf0  == \cf4 0\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf6 "Linked list is empty \\n"\cf0 ;\
    \}\
    \cf2 else\cf0 \
        \cf2 if\cf0 (\cf3 RootNode\cf0 ->\cf3 data\cf0  !=\cf4 0\cf0  && \cf3 RootNode\cf0 ->\cf3 link\cf0  == \cf2 NULL\cf0 )\
        \{\
            \cf5 cout\cf0 <<\cf6 "Only root node is filled and the data is "\cf0 <<\cf3 RootNode\cf0 ->\cf3 data\cf0 <<\cf7 endl\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf3 Node\cf0  *Pointer;\
            Pointer = \cf3 RootNode\cf0 ;\
            \
            \cf2 while\cf0 (Pointer != \cf2 NULL\cf0 )\
            \{\
                \cf5 cout\cf0 <<\cf6 "|"\cf0 <<Pointer->\cf3 data\cf0 <<\cf6 "|-->"\cf0 ;\
                Pointer = Pointer->\cf3 link\cf0 ;\
            \}\
        \}\
\}\
\
\
\cf2 void\cf0  RabbitAndTortoise(\cf3 Node\cf0  *Start)\
\{\
    \cf3 Node\cf0  *Rabbit = Start;\
    \cf3 Node\cf0  *Tortoise = Start;\
    \
    \cf2 while\cf0 (Rabbit->\cf3 link\cf0  != \cf2 NULL\cf0 )\
    \{\
        Rabbit=Rabbit->\cf3 link\cf0 ;\
        \cf2 if\cf0 (Rabbit->\cf3 link\cf0  != \cf2 NULL\cf0 )\
        \{\
            Tortoise = Tortoise->\cf3 link\cf0 ;\
            Rabbit = Rabbit->\cf3 link\cf0 ;\
        \}\
    \}\
    \
    \cf5 cout\cf0 <<\cf6 "Tortoise is at the end of the first half the tortoise->link signifies the beginning of the second half "\cf0 <<Tortoise->\cf3 data\cf0 <<\cf7 endl\cf0 <<\cf7 endl\cf0 ;\
    \
     Rabbit = Start;\
     Tortoise = Start;\
    \
    \cf2 while\cf0 (Rabbit != \cf2 NULL\cf0 )\
    \{\
        Rabbit=Rabbit->\cf3 link\cf0 ;\
        \cf2 if\cf0 (Rabbit != \cf2 NULL\cf0 )\
        \{\
            Tortoise = Tortoise->\cf3 link\cf0 ;\
            Rabbit = Rabbit->\cf3 link\cf0 ;\
        \}\
    \}\
    \cf5 cout\cf0 <<\cf6 "Tortoise is now at the beginnign of the second half the pointer previous to tortoise if you have defined any is at the end of the first half "\cf0 <<Tortoise->\cf3 data\cf0 <<\cf7 endl\cf0 <<\cf7 endl\cf0 ;\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf8 //Initialise root node\cf0 \
    \cf3 RootNode\cf0 ->\cf3 data\cf0  = \cf4 0\cf0 ;\
    \cf3 RootNode\cf0 ->\cf3 link\cf0  = \cf2 NULL\cf0 ;\
    \
    \cf2 char\cf0  choice;\
    \cf2 int\cf0  data;\
    \
    \cf5 cout\cf0 <<\cf6 "Would you like to add items at front in linked list > (y/n) \\n"\cf0 ;\
    \cf5 cin\cf0 >>choice;\
    \cf2 while\cf0 (choice == \cf4 'y'\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf6 "Enter data \\n"\cf0 ;\
        \cf5 cin\cf0 >>data;\
        \cf9 insertFront\cf0 (data);\
        \
        \cf5 cout\cf0 <<\cf6 "Would you like to insert more ? (y/n) \\n"\cf0 ;\
        \cf5 cin\cf0 >>choice;\
        \
    \}\
    \
    \cf9 PrintLinkedList\cf0 ();\
    \cf5 cout\cf0 <<\cf7 endl\cf0 ;\
    \
    \cf9 RabbitAndTortoise\cf0 (\cf3 RootNode\cf0 );\
    \
\}}