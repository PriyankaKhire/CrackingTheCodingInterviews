{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red14\green14\blue255;\red170\green13\blue145;
\red28\green0\blue207;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
\red63\green110\blue116;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
 Interpolation Search\
 \
 To perform this search the data must follow some limitations:\
 In first place the array must be sorted. \
 Also we must know the bounds of the interval.\
 The interpolation search algorithm is O(log(log n)) only when the input is uniformly distributed.\
 In the worst case scenario the algorithm can cost up to O(n).\
 \
 {\field{\*\fldinst{HYPERLINK "http://www.stoimen.com/blog/2012/01/02/computer-algorithms-interpolation-search/"}}{\fldrslt \cf3 http://www.stoimen.com/blog/2012/01/02/computer-algorithms-interpolation-search/}}\
 */\cf0 \
\
\cf4 static\cf0  \cf4 const\cf0  \cf4 int\cf0  size = \cf5 7\cf0 ;\
\
\cf4 void\cf0  InterpolationSearch(\cf4 int\cf0  a[], \cf4 int\cf0  low, \cf4 int\cf0  high, \cf4 int\cf0  element)\
\{\
    \cf4 if\cf0 (low<= high)\
    \{\
        \cf4 if\cf0 (low == high)\
        \{\
            \cf4 if\cf0 (a[low] == element)\
            \{\
                \cf6 cout\cf0 <<\cf7 "Found it at position "\cf0 <<low<<\cf8 endl\cf0 ;\
                \cf4 return\cf0 ;\
            \}\
            \cf4 else\cf0 \
            \{\
                \cf6 cout\cf0 <<\cf7 "Not found \\n"\cf0 ;\
                \cf4 return\cf0 ;\
            \}\
        \}\
        \cf4 else\cf0 \
        \{\
            \cf4 int\cf0  C = (element - a[low])/(a[high] - a[low]);\
            \cf6 cout\cf0 <<\cf7 "Value of C = "\cf0 <<C<<\cf8 endl\cf0 ;\
            \cf2 //The value of C should be in 0. something\cf0 \
            \cf4 if\cf0 (C < \cf5 0\cf0  || C > \cf5 1\cf0 )\
            \{\
                \cf6 cout\cf0 <<\cf7 "Not found \\n"\cf0 ;\
                \cf4 return\cf0 ;\
            \}\
            \cf4 else\cf0 \
            \{\
                \cf4 int\cf0  mid = \cf8 round\cf0 (low + C*(high - low));\
                \cf6 cout\cf0 <<\cf7 "Value of mid position = "\cf0 <<mid<<\cf8 endl\cf0 ;\
                \cf4 if\cf0 (element == a[mid])\
                \{\
                    \cf6 cout\cf0 <<\cf7 "Found it at position "\cf0 <<mid<<\cf8 endl\cf0 ;\
                    \cf4 return\cf0 ;\
                \}\
                \cf4 if\cf0 (element < a[mid])\
                \{\
                    \cf6 cout\cf0 <<\cf7 "Going left\\n"\cf0 ;\
                    \cf9 InterpolationSearch\cf0 (a, low, mid-\cf5 1\cf0 , element);\
                \}\
                \cf4 else\cf0 \
                \{\
                    \cf6 cout\cf0 <<\cf7 "Going right\\n"\cf0 ;\
                    \cf9 InterpolationSearch\cf0 (a, mid+\cf5 1\cf0 , high, element);\
                \}\
            \}\
        \}\
    \}\
\}\
\
\cf4 int\cf0  main()\
\{\
    \cf4 int\cf0  a[\cf10 size\cf0 ] = \{\cf5 201\cf0 , \cf5 209\cf0 , \cf5 232\cf0 , \cf5 233\cf0 , \cf5 332\cf0 , \cf5 399\cf0 , \cf5 400\cf0 \};\
    \cf9 InterpolationSearch\cf0 (a, \cf5 0\cf0 , \cf10 size\cf0 -\cf5 1\cf0 , \cf5 233\cf0 );\
\}}