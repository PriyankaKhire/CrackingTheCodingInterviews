{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red63\green110\blue116;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 //Binary Search\cf0 \
\
\cf3 static\cf0  \cf3 const\cf0  \cf3 int\cf0  size = \cf4 10\cf0 ;\
\
\cf3 void\cf0  IterativeBinarySearch(\cf3 int\cf0  a[], \cf3 int\cf0  key)\
\{\
    \cf3 if\cf0 (\cf5 size\cf0  > \cf4 0\cf0  )\
    \{\
        \cf3 int\cf0  high = \cf5 size\cf0 -\cf4 1\cf0 ;\
        \cf3 int\cf0  low = \cf4 0\cf0 ;\
        \cf3 int\cf0  mid;\
        \
        \cf3 while\cf0 (low <= high)\
        \{\
            mid = (low+high)/\cf4 2\cf0 ;\
            \cf3 if\cf0 (key == a[mid])\
            \{\
                \cf6 cout\cf0 <<\cf7 "Found it at position "\cf0 <<mid<<\cf8 endl\cf0 ;\
                \cf3 return\cf0 ;\
            \}\
            \cf3 else\cf0  \cf3 if\cf0  (key < a[mid])\
            \{\
                high = mid-\cf4 1\cf0 ;\
            \}\
            \cf3 else\cf0  \cf3 if\cf0  (key > a[mid])\
            \{\
                low = mid+\cf4 1\cf0 ;\
            \}\
        \}\
        \cf3 if\cf0 ( low > high)\
        \{\
            \cf6 cout\cf0 <<\cf7 "Not found\\n"\cf0 ;\
            \cf3 return\cf0 ;\
        \}\
    \}\
\}\
\
\cf3 void\cf0  RecursiveBinarySearch(\cf3 int\cf0  a[], \cf3 int\cf0  key, \cf3 int\cf0  low, \cf3 int\cf0  high)\
\{\
    \cf3 if\cf0 (low <= high)\
    \{\
        \cf3 int\cf0  mid = (low+high)/\cf4 2\cf0 ;\
         \cf3 if\cf0 (a[mid] == key)\
         \{\
             \cf6 cout\cf0 <<\cf7 "Found it at position "\cf0 <<mid<<\cf8 endl\cf0 ;\
             \cf3 return\cf0 ;\
         \}\
        \cf3 else\cf0  \cf3 if\cf0  (key < a[mid])\
        \{\
            \cf9 RecursiveBinarySearch\cf0 (a, key, low, mid-\cf4 1\cf0 );\
        \}\
        \cf3 else\cf0  \cf3 if\cf0  (a[mid] < key)\
        \{\
            \cf9 RecursiveBinarySearch\cf0 (a, key, mid+\cf4 1\cf0 , high);\
        \}\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf6 cout\cf0 <<\cf7 "Not found\\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf3 int\cf0  a[\cf5 size\cf0 ] = \{\cf4 1\cf0 , \cf4 2\cf0 , \cf4 3\cf0 , \cf4 4\cf0 , \cf4 5\cf0 , \cf4 6\cf0 , \cf4 7\cf0 , \cf4 8\cf0 , \cf4 9\cf0 , \cf4 10\cf0 \};\
    \cf9 IterativeBinarySearch\cf0 (a, \cf4 10\cf0 );\
    \cf9 RecursiveBinarySearch\cf0 (a, \cf4 10\cf0 , \cf4 0\cf0 , \cf5 size\cf0 -\cf4 1\cf0 );\
    \
\}}