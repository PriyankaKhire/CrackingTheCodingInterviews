{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green111\blue253;\red170\green13\blue145;\red28\green0\blue207;
\red0\green116\blue0;\red63\green110\blue116;\red38\green71\blue75;\red92\green38\blue153;\red196\green26\blue22;
\red46\green13\blue110;}
\paperw11905\paperh16837\margl1440\margr1440\vieww28600\viewh14740\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 // http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-3-worst-case-linear-time/\
\cf3 \
static\cf0  \cf3 const\cf0  \cf3 int\cf0  size = \cf4 10\cf0 ;\
\
\cf3 void\cf0  insertionSort(\cf3 int\cf0  a[], \cf3 int\cf0  start, \cf3 int\cf0  end)\
\{\
    \cf3 int\cf0  j = \cf4 0\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = start+\cf4 1\cf0 ; i < end+\cf4 1\cf0 ; i++)\
    \{\
        j = i;\
        \cf3 while\cf0 (j >\cf4 0\cf0  && a[j-\cf4 1\cf0 ] > a[j])\
        \{\
            \cf5 //Swap a[j-1] with a[j]\cf0 \
            \cf3 int\cf0  temp = a[j-\cf4 1\cf0 ];\
            a[j-\cf4 1\cf0 ] = a[j];\
            a[j] = temp;\
            \
            j--;\
        \}\
    \}\
\}\
\
\
\cf3 int\cf0  PivoteFind(\cf3 int\cf0  a[])\
\{\
    \cf3 if\cf0 (\cf6 size\cf0  < \cf4 5\cf0 )\
    \{\
        \cf7 insertionSort\cf0 (a, \cf4 0\cf0 , \cf6 size\cf0 -\cf4 1\cf0 );\
        \cf3 return\cf0  a[\cf4 2\cf0 ]; \cf5 //<-- Median\cf0 \
    \}\
    \cf3 else\cf0 \
    \{\
        \cf3 int\cf0  groups = \cf6 size\cf0 /\cf4 5\cf0 ;\
        \cf3 int\cf0  remainingElements = \cf6 size\cf0 %\cf4 5\cf0 ;\
        \cf3 int\cf0  median[groups+\cf4 1\cf0 ];\
        \cf3 int\cf0  start;\
        \cf3 int\cf0  end;\
        \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 1\cf0 ; i <= groups; i++)\
        \{\
            end = (i*\cf4 5\cf0 )-\cf4 1\cf0 ;\
            start = end - \cf4 4\cf0 ;\
            \cf7 insertionSort\cf0 (a, start, end);\
            median[i-\cf4 1\cf0 ] = a[(start+end)/\cf4 2\cf0 ];\
        \}\
        \
        \cf5 //For the remaining elements\cf0 \
        \cf3 if\cf0 (remainingElements > \cf4 0\cf0 )\
        \{\
            start = groups*\cf4 5\cf0 ;\
            end = \cf6 size\cf0 -\cf4 1\cf0 ;\
            \cf7 insertionSort\cf0 (a, start, end);\
            median[groups] = a[(start+end)/\cf4 2\cf0 ];\
        \}\
        \
        \cf5 //Sort the median\cf0 \
        \cf7 insertionSort\cf0 (median, \cf4 0\cf0 , groups);\
        \cf3 int\cf0  medin = median[groups/\cf4 2\cf0 ];\
        \cf3 return\cf0  medin;\
    \}\
\}\
\
\cf3 void\cf0  QuickSort(\cf3 int\cf0  a[], \cf3 int\cf0  left, \cf3 int\cf0  right, \cf3 int\cf0  key)\
\{\
    \cf3 if\cf0 (left < right)\
    \{\
        \cf3 int\cf0  pivote = \cf7 PivoteFind\cf0 (a);\
        \cf3 int\cf0  i = left, j = right;\
        \cf5 //Partition\cf0 \
        \cf3 while\cf0 (i<=j)\
        \{\
            \cf3 while\cf0 ( a[i] < pivote)\
            \{\
                i++;\
            \}\
            \cf3 while\cf0  (a[j] > pivote)\
            \{\
                j--;\
            \}\
            \cf3 while\cf0 (i <=j)\
            \{\
                \cf5 //swap a[i] with a[j]\cf0 \
                \cf3 int\cf0  temp = a[i];\
                a[i] = a[j];\
                a[j] = temp;\
                i++;\
                j--;\
            \}\
        \}\
        \cf5 //position j has pivot\cf0 \
        \cf3 if\cf0 (key == a[j])\
        \{\
            \cf8 cout\cf0 <<\cf9 "yay found it on position "\cf0 <<j<<\cf10 endl\cf0 ;\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (key < a[j])\
            \{\
                \cf7 QuickSort\cf0 (a, left, j, key);\
            \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (key > a[j])\
            \{\
                \cf7 QuickSort\cf0 (a, i, right, key);\
            \}\
        \cf3 else\cf0 \
        \{\
            \cf8 cout\cf0 <<\cf9 "You moron"\cf0 ;\
        \}\
        \
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf3 int\cf0  a[\cf6 size\cf0 ] = \{\cf4 10\cf0 , \cf4 9\cf0 , \cf4 8\cf0 , \cf4 7\cf0 , \cf4 6\cf0 , \cf4 5\cf0 , \cf4 4\cf0 , \cf4 3\cf0 , \cf4 2\cf0 , \cf4 1\cf0 \};\
    \cf7 QuickSort\cf0 (a, \cf4 0\cf0 , \cf6 size\cf0 -\cf4 1\cf0 , \cf4 3\cf0 );\
    \
    \
\}\
\
\
\
==================================================================================================================================================================\
\
\
\
\cf3 const\cf0  \cf3 static\cf0  \cf3 int\cf0  size = \cf4 12\cf0 ;\
\cf3 const\cf0  \cf3 static\cf0  \cf3 int\cf0  MedianArraySize = (\cf6 size\cf0 /\cf4 5\cf0 )+\cf4 1\cf0 ;\
\
\cf3 void\cf0  PrintArray(\cf3 int\cf0  a[], \cf3 int\cf0  StartIndex, \cf3 int\cf0  StopIndex)\
\{\
    \cf3 for\cf0 (\cf3 int\cf0  i = StartIndex; i <= StopIndex; i++)\
    \{\
        \cf8 cout\cf0 <<a[i]<<\cf9 " "\cf0 ;\
    \}\
    \cf8 cout\cf0 <<\cf10 endl\cf0 ;\
\}\
\
\cf3 int\cf0  InsertionSort(\cf3 int\cf0  a[], \cf3 int\cf0  StartIndex, \cf3 int\cf0  StopIndex)\
\{\
    \cf3 int\cf0  i = StartIndex;\
    \cf3 int\cf0  j = StartIndex+\cf4 1\cf0 ;\
    \cf5 //cout<<"i = "<<i<<" j = "<<j<<endl;\cf0 \
    \cf5 //cout<<"a[i] = "<<a[i]<<" a[j] = "<<a[j]<<endl;\cf0 \
    \cf3 while\cf0 ( i <= StopIndex - \cf4 1\cf0  && j <= StopIndex)\
    \{\
        \cf3 int\cf0  valu = a[j];\
        \cf3 int\cf0  hole = j;\
        \cf5 //cout<<"Value = "<<valu<<" hole = "<<hole<<endl;\cf0 \
        \cf3 while\cf0 (a[i] > valu && hole > StartIndex)\
        \{\
            a[hole] = a[i];\
            hole--;\
            i--;\
        \}\
        a[hole] = valu;\
        i = j;\
        j++;\
    \}\
    \
    \cf3 int\cf0  MedianIndex = (StartIndex + StopIndex)/\cf4 2\cf0 ;\
    \cf3 return\cf0  MedianIndex;\
\}\
\
\cf3 int\cf0  Pivot(\cf3 int\cf0  a[])\
\{\
    \cf3 int\cf0  Median[\cf6 MedianArraySize\cf0 ];\
    \cf3 int\cf0  MedianPointer = \cf4 0\cf0 ;\
    \cf3 int\cf0  i = \cf4 0\cf0 ;\
    \cf5 //Partition if groups of 5\cf0 \
    \cf3 while\cf0 (i < \cf6 size\cf0 )\
    \{\
        \cf3 int\cf0  j = \cf4 0\cf0 ;\
        \cf3 while\cf0  (j < (\cf4 5\cf0  - \cf4 1\cf0 ))\
        \{\
            j++;\
        \}\
        \cf3 int\cf0  PartitionIndex = i+j;\
        \cf3 if\cf0 ( PartitionIndex >= \cf6 size\cf0 )\
        \{\
            PartitionIndex = \cf6 size\cf0 -\cf4 1\cf0 ;\
        \}\
        \cf5 //cout<<"Partition from "<<i<<" to "<<PartitionIndex<<endl;\cf0 \
        \cf5 //Send to sort and find median\cf0 \
        \cf3 int\cf0  MedianIndex = \cf7 InsertionSort\cf0 (a, i, PartitionIndex);\
        Median[MedianPointer] = a[MedianIndex];\
        MedianPointer++;\
        \cf3 if\cf0 (PartitionIndex == \cf6 size\cf0 -\cf4 1\cf0 )\
        \{\
            i = \cf6 size\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            i = PartitionIndex+\cf4 1\cf0 ;\
        \}\
    \}\
    \cf5 //Get median of medians\cf0 \
    \cf3 int\cf0  MedianOfMedianIndex = \cf7 InsertionSort\cf0 (Median, \cf4 0\cf0 , \cf6 MedianArraySize\cf0 -\cf4 1\cf0 );\
    \cf5 //cout<<"Median of Median = "<<Median[MedianOfMedianIndex]<<endl;\cf0 \
    \cf3 return\cf0  Median[MedianOfMedianIndex];\
\}\
\
\cf3 void\cf0  swap(\cf3 int\cf0  &a, \cf3 int\cf0  &b)\
\{\
    \cf3 int\cf0  temp = a;\
    a = b;\
    b = temp;\
\}\
\
\cf3 void\cf0  QuickSort(\cf3 int\cf0  a[], \cf3 int\cf0  StartPosition, \cf3 int\cf0  EndPosotion, \cf3 int\cf0  element)\
\{\
    \cf3 if\cf0 (StartPosition == EndPosotion)\
    \{\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (StartPosition < EndPosotion)\
    \{\
        \cf3 int\cf0  pivot = \cf7 Pivot\cf0 (a);\
        \cf3 int\cf0  i = StartPosition;\
        \cf3 int\cf0  j = EndPosotion;\
        \cf3 int\cf0  PivotPosition = \cf4 0\cf0 ;\
        \
        \cf3 while\cf0 (i <= j)\
        \{\
            \cf3 while\cf0  (pivot > a[i])\
            \{\
                \cf3 if\cf0 (a[i] == pivot)\
                \{\
                    PivotPosition = i;\
                \}\
                i++;\
            \}\
            \cf3 while\cf0 (pivot <= a[j])\
            \{\
                \cf3 if\cf0 (a[j] == pivot)\
                \{\
                    PivotPosition = j;\
                \}\
                j--;\
            \}\
            \cf3 if\cf0 (i <= j)\
            \{\
                \cf7 swap\cf0 (a[i], a[j]);\
            \}\
        \}\
        \cf7 swap\cf0 (a[i], a[PivotPosition]);\
        \cf3 if\cf0 (element == pivot)\
        \{\
            \cf8 cout\cf0 <<\cf9 "element position = "\cf0 <<PivotPosition<<\cf10 endl\cf0 ;\
            \cf3 return\cf0 ;\
        \}\
        \cf3 if\cf0 (element < pivot)\
        \{\
            \cf7 QuickSort\cf0 (a, StartPosition, PivotPosition-\cf4 1\cf0 , element);\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf7 QuickSort\cf0 (a, PivotPosition+\cf4 1\cf0 , EndPosotion, element);\
        \}\
        \cf5 //PrintArray(a, StartPosition, EndPosotion);\cf0 \
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf3 int\cf0  a[\cf6 size\cf0 ] = \{\cf4 12\cf0 ,\cf4 11\cf0 ,\cf4 10\cf0 ,\cf4 9\cf0 ,\cf4 5\cf0 ,\cf4 4\cf0 ,\cf4 3\cf0 ,\cf4 2\cf0 ,\cf4 1\cf0 ,\cf4 8\cf0 ,\cf4 7\cf0 ,\cf4 6\cf0 \};\
    \cf8 cout\cf0 <<\cf9 "Pivot = "\cf0 <<\cf7 Pivot\cf0 (a)<<\cf10 endl\cf0 ;\
    \cf7 PrintArray\cf0 (a, \cf4 0\cf0 , \cf6 size\cf0 -\cf4 1\cf0 );\
    \cf7 QuickSort\cf0 (a, \cf4 0\cf0 , \cf6 size\cf0 -\cf4 1\cf0 , \cf4 12\cf0 );\
    \
\}}