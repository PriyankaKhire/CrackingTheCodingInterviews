{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red92\green38\blue153;
\red63\green110\blue116;\red0\green116\blue0;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11905\paperh16837\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 static\cf0  \cf2 const\cf0  \cf2 int\cf0  size = \cf3 5\cf0 ;\
\pard\tx529\pardeftab529\pardirnatural
\cf0 \
\cf2 struct\cf0  stringClass\
\{\
    \cf4 string\cf0  data;\
    \cf5 stringClass\cf0  *link;\
\};\
\
\cf2 int\cf0  main()\
\{\
    \cf5 stringClass\cf0  *array[\cf3 26\cf0 ];\
    \cf6 //initialise all nodes of this to null\cf0 \
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i <\cf3 26\cf0 ; i++)\
    \{\
        array[i] = \cf2 NULL\cf0 ;\
    \}\
    \
    \
    \cf4 string\cf0  a[\cf5 size\cf0 ]= \{\cf7 "hello"\cf0 , \cf7 "World"\cf0 , \cf7 "How"\cf0 , \cf7 "are"\cf0 ,\cf7 "you"\cf0 \};\
    \
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf5 size\cf0 ; i++)\
    \{\
        \cf5 stringClass\cf0  *NewNode = \cf2 new\cf0  \cf5 stringClass\cf0 ;\
        NewNode->\cf5 data\cf0  = a[i];\
        NewNode->\cf5 link\cf0  = \cf2 NULL\cf0 ;\
        \cf2 int\cf0  index = \cf2 int\cf0 (\cf8 tolower\cf0 (NewNode->\cf5 data\cf0 [\cf3 0\cf0 ]))-\cf3 97\cf0 ;\
        \cf2 if\cf0 (array[index] == \cf2 NULL\cf0 )\
        \{\
            array[index] = NewNode;\
        \}\
        \cf2 else\cf0 \
        \{\
            NewNode->\cf5 link\cf0  = array[index];\
            array[index] = NewNode;\
        \}\
    \}\
    \
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf3 26\cf0 ; i++)\
    \{\
        \cf2 if\cf0 (array[i] != \cf2 NULL\cf0 )\
        \{\
            \cf5 stringClass\cf0  *ptr;\
            ptr = array[i];\
             \cf2 while\cf0 (ptr != \cf2 NULL\cf0 )\
            \{\
                \cf4 cout\cf0 <<ptr->\cf5 data\cf0 <<\cf8 endl\cf0 ;\
                ptr = ptr->\cf5 link\cf0 ;\
            \}\
        \}\
    \}\
    \
\}\
\
\
==================================================================================================================================================================\
\
//Fully functional Radix sort with numbers\
\
\
\cf2 static\cf0  \cf2 const\cf0  \cf2 int\cf0  size = \cf3 7\cf0 ;\
\
\cf2 struct\cf0  LinkedList\
\{\
    \cf2 int\cf0  SignificantDigit;\
    \cf5 LinkedList\cf0  *BottonLink;\
\};\
\
\cf5 LinkedList\cf0  *LinkedListArray[\cf3 10\cf0 ];\
\
\cf2 void\cf0  PrintArray(\cf2 int\cf0  a[])\
\{\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf5 size\cf0 ; i++)\
    \{\
        \cf4 cout\cf0 <<a[i]<<\cf7 " "\cf0 ;\
    \}\
    \cf4 cout\cf0 <<\cf8 endl\cf0 <<\cf8 endl\cf0 ;\
\}\
\
\cf2 void\cf0  DisplayLinkedList()\
\{\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf3 10\cf0 ; i++)\
    \{\
        \cf4 cout\cf0 <<\cf5 LinkedListArray\cf0 [i]->\cf5 SignificantDigit\cf0 <<\cf7 "->"\cf0 ;\
        \cf2 if\cf0 (\cf5 LinkedListArray\cf0 [i]->\cf5 BottonLink\cf0  != \cf2 NULL\cf0 )\
        \{\
            \cf5 LinkedList\cf0  *ptr = \cf5 LinkedListArray\cf0 [i]->\cf5 BottonLink\cf0 ;\
            \cf2 while\cf0 (ptr != \cf2 NULL\cf0 )\
            \{\
                \cf4 cout\cf0 <<ptr->\cf5 SignificantDigit\cf0 <<\cf7 " "\cf0 ;\
                ptr = ptr->\cf5 BottonLink\cf0 ;\
            \}\
        \}\
        \cf4 cout\cf0 <<\cf8 endl\cf0 ;\
    \}\
    \cf4 cout\cf0 <<\cf8 endl\cf0 ;\
\}\
\
\cf2 void\cf0  InitialiseLinkedList()\
\{\
    \cf2 int\cf0  i = \cf3 0\cf0 ;\
    \cf2 while\cf0 (i < \cf3 10\cf0 )\
    \{\
        \cf5 LinkedList\cf0  *Node = \cf2 new\cf0  \cf5 LinkedList\cf0 ;\
        Node->\cf5 BottonLink\cf0  = \cf2 NULL\cf0 ;\
        Node->\cf5 SignificantDigit\cf0  = i;\
        \cf5 LinkedListArray\cf0 [i] = Node;\
        i++;\
        \
    \}\
    \
    \cf9 DisplayLinkedList\cf0 ();\
\}\
\
\cf5 LinkedList\cf0  *CreateNode(\cf2 int\cf0  value)\
\{\
    \cf5 LinkedList\cf0  *Node = \cf2 new\cf0  \cf5 LinkedList\cf0 ;\
    Node->\cf5 SignificantDigit\cf0  = value;\
    Node->\cf5 BottonLink\cf0  = \cf2 NULL\cf0 ;\
    \cf2 return\cf0  Node;\
\}\
\
\cf5 LinkedList\cf0  *GetLinkedListArrayPosition(\cf2 int\cf0  index)\
\{\
    \cf2 if\cf0 (\cf5 LinkedListArray\cf0 [index]->\cf5 BottonLink\cf0  == \cf2 NULL\cf0 )\
    \{\
        \cf2 return\cf0  \cf5 LinkedListArray\cf0 [index];\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf5 LinkedList\cf0  *ptr = \cf5 LinkedListArray\cf0 [index];\
        \cf2 while\cf0 (ptr->\cf5 BottonLink\cf0  != \cf2 NULL\cf0 )\
        \{\
            ptr = ptr->\cf5 BottonLink\cf0 ;\
        \}\
        \cf2 return\cf0  ptr;\
    \}\
\}\
\
\cf2 int\cf0  PutElementsBackInLinkedListArray(\cf2 int\cf0  a[])\
\{\
    \cf2 int\cf0  LastNumber = \cf3 0\cf0 ;\
    \cf2 int\cf0  j = \cf3 0\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf3 10\cf0 ; i++)\
    \{\
        \cf2 if\cf0 (\cf5 LinkedListArray\cf0 [i]->\cf5 BottonLink\cf0  != \cf2 NULL\cf0 )\
        \{\
            LastNumber = i;\
            \cf5 LinkedList\cf0  *ptr = \cf5 LinkedListArray\cf0 [i]->\cf5 BottonLink\cf0 ;\
            \cf5 LinkedList\cf0  *prev = \cf5 LinkedListArray\cf0 [i];\
            prev->\cf5 BottonLink\cf0  = \cf2 NULL\cf0 ;\
            \cf2 while\cf0 (ptr != \cf2 NULL\cf0 )\
            \{\
                a[j] = ptr->\cf5 SignificantDigit\cf0 ;\
                j++;\
                prev = ptr;\
                ptr = ptr->\cf5 BottonLink\cf0 ;\
                \cf8 free\cf0 (ptr);\
            \}\
        \}\
    \}\
    \cf9 PrintArray\cf0 (a);\
    \cf2 return\cf0  LastNumber;\
\}\
\
\cf2 void\cf0  RadixSort(\cf2 int\cf0  a[], \cf2 int\cf0  m, \cf2 int\cf0  n)\
\{\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf5 size\cf0 ; i++)\
    \{\
        \cf2 int\cf0  value = a[i];\
        \cf5 LinkedList\cf0  *ValueNode = \cf9 CreateNode\cf0 (value);\
        value = value % m;\
        value = value / n;\
        \cf5 LinkedList\cf0  *LinkedListArrayPosition = \cf9 GetLinkedListArrayPosition\cf0 (value);\
        LinkedListArrayPosition->\cf5 BottonLink\cf0  = ValueNode;\
    \}\
    \cf9 DisplayLinkedList\cf0 ();\
    \cf2 int\cf0  LastNumber = \cf9 PutElementsBackInLinkedListArray\cf0 (a);\
    \cf2 if\cf0 (LastNumber != \cf3 0\cf0 )\
    \{\
        \cf9 RadixSort\cf0 (a, m*\cf3 10\cf0 , n*\cf3 10\cf0 );\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf2 return\cf0 ;\
    \}\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf2 int\cf0  a[\cf5 size\cf0 ] = \{\cf3 9\cf0 ,\cf3 179\cf0 ,\cf3 139\cf0 ,\cf3 38\cf0 ,\cf3 10\cf0 ,\cf3 5\cf0 ,\cf3 36\cf0 \};\
    \
    \cf9 InitialiseLinkedList\cf0 ();\
    \cf9 RadixSort\cf0 (a, \cf3 10\cf0 , \cf3 1\cf0 ); \
\}}