{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red38\green71\blue75;\red28\green0\blue207;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 //MergeSort for linked list\cf0 \
\
\cf3 struct\cf0  Node\
\{\
    \cf3 int\cf0  data;\
    \cf3 struct\cf0  \cf4 Node\cf0  *link;\
\};\
\
\cf4 Node\cf0  *RootNode = \cf3 new\cf0  \cf4 Node\cf0 ;\
\
\
\
\
\cf4 Node\cf0  *Merge(\cf4 Node\cf0  *Left, \cf4 Node\cf0  *Right)\
\{\
    \cf4 Node\cf0  *Result = \cf3 NULL\cf0 , *ResultEndPointer = \cf3 NULL\cf0 ;\
    \
    \cf3 if\cf0 (Left == \cf3 NULL\cf0  && Right != \cf3 NULL\cf0 )\
    \{\
        \cf3 return\cf0  Right;\
    \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (Right == \cf3 NULL\cf0  && Left != \cf3 NULL\cf0 )\
        \{\
            \cf3 return\cf0  Left;\
        \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (Right != \cf3 NULL\cf0  && Left != \cf3 NULL\cf0 )\
        \{\
            \cf3 while\cf0 (Right != \cf3 NULL\cf0  && Left != \cf3 NULL\cf0 )\
            \{\
                \cf3 if\cf0 (Right->\cf4 data\cf0  <= Left->\cf4 data\cf0 )\
                \{\
                    \cf3 if\cf0 (ResultEndPointer == \cf3 NULL\cf0  && Result == \cf3 NULL\cf0 )\
                    \{\
                        Result = ResultEndPointer = Right;\
                        Right = Right->\cf4 link\cf0 ;\
                        ResultEndPointer->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
                    \}\
                    \cf3 else\cf0 \
                    \{\
                        ResultEndPointer->\cf4 link\cf0  = Right;\
                        ResultEndPointer = ResultEndPointer->\cf4 link\cf0 ;\
                        Right = Right->\cf4 link\cf0 ;\
                        ResultEndPointer->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
                    \}\
                \}\
                \cf3 else\cf0 \
                \{\
                    \cf3 if\cf0 (ResultEndPointer == \cf3 NULL\cf0  && Result == \cf3 NULL\cf0 )\
                    \{\
                        Result = ResultEndPointer = Left;\
                        Left = Left->\cf4 link\cf0 ;\
                        ResultEndPointer->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
                    \}\
                    \cf3 else\cf0 \
                    \{\
                        ResultEndPointer->\cf4 link\cf0  = Left;\
                        ResultEndPointer = ResultEndPointer->\cf4 link\cf0 ;\
                        Left = Left->\cf4 link\cf0 ;\
                        ResultEndPointer->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
                    \}\
                \}\
            \}\
            \cf3 while\cf0  (Right != \cf3 NULL\cf0 )\
            \{\
                ResultEndPointer->\cf4 link\cf0  = Right;\
            \}\
            \cf3 while\cf0  (Left != \cf3 NULL\cf0 )\
            \{\
                ResultEndPointer->\cf4 link\cf0  = Left;\
            \}\
            \cf3 return\cf0  Result;\
        \}\
    \cf3 else\cf0 \
        \cf3 return\cf0  \cf3 NULL\cf0 ;\
\}\
\
\
\cf4 Node\cf0  *SplitTwoHalves(\cf4 Node\cf0  *StartNode)\cf2 //Notice the star before function name why is it put there ? same reason why Node *Start\cf0 \
\{                                   \cf2 //Thus when a function returns something it should have same return type\cf0 \
    \
    \cf3 if\cf0 (StartNode != \cf3 NULL\cf0 )\
    \{\
    \cf4 Node\cf0  *Rabbit, *Tortoise, *BeforeTortoise;\
    Tortoise = StartNode;\
    Rabbit = StartNode;\
    BeforeTortoise = StartNode;\
    \
    \cf3 while\cf0 (Rabbit != \cf3 NULL\cf0 )\
    \{\
        Rabbit = Rabbit->\cf4 link\cf0 ;\
        \cf3 if\cf0 (Rabbit !=\cf3 NULL\cf0 )\
        \{\
            BeforeTortoise = Tortoise;\
            Tortoise = Tortoise->\cf4 link\cf0 ;\
            Rabbit = Rabbit->\cf4 link\cf0 ;\
        \}\
    \}\
    \
    \cf2 //Tortoise is standing on the head of right half\cf0 \
    \cf4 Node\cf0  *RightHead = Tortoise;\
        \cf3 if\cf0 (BeforeTortoise != \cf3 NULL\cf0 )\
        \{\
            BeforeTortoise->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
        \}\
    \
    \cf3 return\cf0  RightHead;\
    \}\
    \cf3 else\cf0 \
        \cf3 return\cf0  \cf3 NULL\cf0 ;\
\}\
\
\
\cf3 void\cf0  MergeSort(\cf4 Node\cf0  *StartNode)\
\{\
    \cf4 Node\cf0  *Left = StartNode;\
    \cf4 Node\cf0  *Right = \cf5 SplitTwoHalves\cf0 (StartNode);\
    \
    \cf5 MergeSort\cf0 (Left);\
    \cf5 MergeSort\cf0 (Right);\
    StartNode = \cf5 Merge\cf0 (Left, Right);\
    \
    \
\}\
\
\cf3 void\cf0  insertFront(\cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf6 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
    \{\
        \cf4 RootNode\cf0 ->\cf4 data\cf0  = data;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 Node\cf0  *NewNode;\
        NewNode = \cf3 new\cf0  \cf4 Node\cf0 ;\
        \
        NewNode->\cf4 data\cf0  = data;\
        NewNode->\cf4 link\cf0  = \cf4 RootNode\cf0 ;\
        \
        \cf4 RootNode\cf0  = NewNode;\
    \}\
    \
\}\
\
\cf3 void\cf0  PrintLinkedList()\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0  && \cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf6 0\cf0 )\
    \{\
        \cf7 cout\cf0 <<\cf8 "Linked list is empty \\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  !=\cf6 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
        \{\
            \cf7 cout\cf0 <<\cf8 "Only root node is filled and the data is "\cf0 <<\cf4 RootNode\cf0 ->\cf4 data\cf0 <<\cf9 endl\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf4 Node\cf0  *Pointer;\
            Pointer = \cf4 RootNode\cf0 ;\
            \
            \cf3 while\cf0 (Pointer != \cf3 NULL\cf0 )\
            \{\
                \cf7 cout\cf0 <<\cf8 "|"\cf0 <<Pointer->\cf4 data\cf0 <<\cf8 "|-->"\cf0 ;\
                Pointer = Pointer->\cf4 link\cf0 ;\
            \}\
        \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf4 RootNode\cf0 ->\cf4 data\cf0  = \cf6 0\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \cf3 int\cf0  data;\
    \cf3 char\cf0  choice;\
\
    \
    \cf7 cout\cf0 <<\cf8 "Would you like to add items at front in linked list > (y/n) \\n"\cf0 ;\
    \cf7 cin\cf0 >>choice;\
    \cf3 while\cf0 (choice == \cf6 'y'\cf0 )\
    \{\
        \cf7 cout\cf0 <<\cf8 "Enter data \\n"\cf0 ;\
        \cf7 cin\cf0 >>data;\
        \cf5 insertFront\cf0 (data);\
        \
        \cf7 cout\cf0 <<\cf8 "Would you like to insert more ? (y/n) \\n"\cf0 ;\
        \cf7 cin\cf0 >>choice;\
        \
    \}\
    \
    \cf5 PrintLinkedList\cf0 ();\
    \cf5 MergeSort\cf0 (\cf4 RootNode\cf0 );\
    \cf5 PrintLinkedList\cf0 ();\
    \
\}\
\
\
==================================================================================================================================================================\
\
\
\
\cf3 const\cf0  \cf3 static\cf0  \cf3 int\cf0  size = \cf6 10\cf0 ;\
\
\cf3 struct\cf0  LinkedList\
\{\
    \cf3 int\cf0  data;\
    \cf4 LinkedList\cf0  *link;\
\};\
\
\cf3 void\cf0  PrintLinkedList(\cf4 LinkedList\cf0  *Head)\
\{\
    \cf4 LinkedList\cf0  *ptr = Head;\
    \cf3 while\cf0 (ptr != \cf3 NULL\cf0 )\
    \{\
        \cf7 cout\cf0 <<ptr->\cf4 data\cf0 <<\cf8 " "\cf0 ;\
        ptr= ptr->\cf4 link\cf0 ;\
    \}\
    \cf7 cout\cf0 <<\cf9 endl\cf0 ;\
\}\
\
\cf4 LinkedList\cf0  *splitInHalf(\cf4 LinkedList\cf0  *Head)\
\{\
    \cf4 LinkedList\cf0  *Rabbit, *Tortoise;\
    Rabbit = Head;\
    Tortoise = Head;\
    \cf3 while\cf0  (Rabbit->\cf4 link\cf0  != \cf3 NULL\cf0 )\
    \{\
        Rabbit = Rabbit->\cf4 link\cf0 ;\
        \cf3 if\cf0 (Rabbit->\cf4 link\cf0  != \cf3 NULL\cf0 )\
        \{\
            Tortoise = Tortoise->\cf4 link\cf0 ;\
            Rabbit = Rabbit->\cf4 link\cf0 ;\
        \}\
    \}\
    \cf4 LinkedList\cf0  *ptr = Tortoise;\
    Tortoise = Tortoise->\cf4 link\cf0 ;\
    ptr->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \cf3 return\cf0  Tortoise;\
\}\
\
\cf4 LinkedList\cf0  *Merge(\cf4 LinkedList\cf0  *Left, \cf4 LinkedList\cf0  *Right)\
\{\
    \cf3 if\cf0 (Left != \cf3 NULL\cf0  && Right != \cf3 NULL\cf0 )\
    \{\
        \cf4 LinkedList\cf0  *Answer = \cf3 NULL\cf0 ;\
        \
        \cf3 while\cf0  (Left != \cf3 NULL\cf0  && Right != \cf3 NULL\cf0 )\
        \{\
            \cf3 if\cf0 (Left->\cf4 data\cf0  < Right->\cf4 data\cf0 )\
            \{\
                \cf4 LinkedList\cf0  *ptr = Left;\
                Left = Left->\cf4 link\cf0 ;\
                \cf3 if\cf0 (Answer == \cf3 NULL\cf0 )\
                \{\
                    ptr->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
                    Answer = ptr;\
                \}\
                \cf3 else\cf0 \
                \{\
                    ptr->\cf4 link\cf0  = Answer;\
                    Answer = ptr;\
                \}\
            \}\
            \cf3 else\cf0 \
            \{\
                \cf4 LinkedList\cf0  *ptr = Right;\
                Right = Right->\cf4 link\cf0 ;\
                \cf3 if\cf0 (Answer == \cf3 NULL\cf0 )\
                \{\
                    ptr->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
                    Answer = ptr;\
                \}\
                \cf3 else\cf0 \
                \{\
                    ptr->\cf4 link\cf0  = Answer;\
                    Answer = ptr;\
                \}\
            \}\
        \}\
        \
        \cf3 if\cf0 (Left != \cf3 NULL\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *ptr = Answer;\
            \cf3 while\cf0  (ptr->\cf4 link\cf0  != \cf3 NULL\cf0 )\
            \{\
                ptr = ptr->\cf4 link\cf0 ;\
            \}\
            ptr->\cf4 link\cf0  = Left;\
        \}\
        \cf3 if\cf0 (Right != \cf3 NULL\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *ptr = Answer;\
            \cf3 while\cf0  (ptr->\cf4 link\cf0  != \cf3 NULL\cf0 )\
            \{\
                ptr = ptr->\cf4 link\cf0 ;\
            \}\
            ptr->\cf4 link\cf0  = Right;\
        \}\
        \
        \cf3 return\cf0  Answer;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf3 return\cf0  \cf3 NULL\cf0 ;\
    \}\
\}\
\
\cf3 void\cf0  MergSort(\cf4 LinkedList\cf0  *Head)\
\{\
    \cf3 if\cf0 (Head != \cf3 NULL\cf0  && Head->\cf4 link\cf0  != \cf3 NULL\cf0 )\
    \{\
        \cf4 LinkedList\cf0  *mid = \cf5 splitInHalf\cf0 (Head);\
        \cf5 PrintLinkedList\cf0 (mid);\
        \cf5 PrintLinkedList\cf0 (Head);\
        \cf5 MergSort\cf0 (mid);\
        \cf5 MergSort\cf0 (Head);\
        Head = \cf5 Merge\cf0 (Head, mid);\
        \cf5 PrintLinkedList\cf0 (Head);\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf3 int\cf0  a[\cf4 size\cf0 ] = \{\cf6 10\cf0 ,\cf6 9\cf0 ,\cf6 8\cf0 ,\cf6 7\cf0 ,\cf6 6\cf0 ,\cf6 5\cf0 ,\cf6 4\cf0 ,\cf6 3\cf0 ,\cf6 2\cf0 ,\cf6 1\cf0 \};\
    \cf3 int\cf0  i = \cf4 size\cf0 -\cf6 2\cf0 ;\
    \
    \cf4 LinkedList\cf0  *Root = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
    Root->\cf4 data\cf0  = a[\cf4 size\cf0 -\cf6 1\cf0 ];\
    Root->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \
    \cf3 while\cf0 (i >= \cf6 0\cf0 )\
    \{\
        \cf4 LinkedList\cf0  *NewNode = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
        NewNode->\cf4 data\cf0  = a[i];\
        NewNode->\cf4 link\cf0  = Root;\
        Root = NewNode;\
        i--;\
    \}\
    \cf5 MergSort\cf0 (Root);\
    \
\}}