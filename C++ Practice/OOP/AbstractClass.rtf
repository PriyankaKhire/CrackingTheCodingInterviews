{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red92\green38\blue153;
\red196\green26\blue22;\red28\green0\blue207;\red63\green110\blue116;\red38\green71\blue75;\red46\green13\blue110;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 //*********pure virtual function (or abstract function)*****************\cf0 \
\cf2 // abstract function has no body at all! A pure virtual function simply acts as a placeholder that is meant to be redefined by derived classes.\cf0 \
\cf2 //Classes that contain at least one pure virtual function are known as abstract base classes.\cf0 \
\cf2 //When we add a pure virtual function to our class, we are effectively saying, \'93it is up to the derived classes to implement this function\'94.\cf0 \
\cf2 // any derived class must define a body for this function, or that derived class will be considered an abstract base class as well.\cf0 \
\
\cf3 class\cf0  Base\
\{\
\cf3 protected\cf0 :\
    \cf3 int\cf0  a;\
    \cf3 int\cf0  b;\
    \
\cf3 public\cf0 :\
    \
    \cf3 void\cf0  NormalFunctionBASE()\
    \{\
        \cf4 cout\cf0 <<\cf5 "Normal Function of the BASE class \\n"\cf0 ;\
    \}\
    \
    \cf3 virtual\cf0  \cf3 void\cf0  VirtualFunction()\
    \{\
        \cf4 cout\cf0 <<\cf5 "Virtual function of the BASE class \\n"\cf0 ;\
    \}\
    \
    \cf3 virtual\cf0  \cf3 void\cf0  PureVirtualFunction() = \cf6 0\cf0 ;\
    \cf3 virtual\cf0  \cf3 int\cf0  PureVirtualFunctionReturningValues() = \cf6 0\cf0 ;\
    \
    \cf3 void\cf0  SetValuesForPureVirtualFunction(\cf3 int\cf0  A, \cf3 int\cf0  B)\
    \{\
        \cf7 a\cf0  = A;\
        \cf7 b\cf0  = B;\
    \}\
    \
    \cf3 void\cf0  AccessPureVirtualFunctionOfDerivedCalss()\
    \{\
        \cf4 cout\cf0 <<\cf5 "The sum is "\cf0 <<\cf3 this\cf0 ->\cf8 PureVirtualFunctionReturningValues\cf0 ()<<\cf9 endl\cf0 ;\
    \}\
\};\
\
\cf3 class\cf0  Derived : \cf3 public\cf0  \cf7 Base\cf0 \
\{\
    \
\cf3 public\cf0 :\
    \
    \cf3 void\cf0  NormalFunctionDERIVED()\
    \{\
        \cf4 cout\cf0 <<\cf5 "Normal Function of the DERIVED class \\n"\cf0 ;\
    \}\
    \
    \cf3 void\cf0  VirtualFunction()\
    \{\
        \cf4 cout\cf0 <<\cf5 "Not so but same name virtual function of the DERIVED class \\n"\cf0 ;\
    \}\
    \
    \cf3 void\cf0  PureVirtualFunction()\
    \{\
        \cf4 cout\cf0 <<\cf5 "Pure virtual function of the DERIVED class \\n"\cf0 ;\
    \}\
    \
    \cf3 int\cf0  PureVirtualFunctionReturningValues(\cf2 /*int A, int B */\cf0 ) \cf2 //If you uncomment then the derived class becomes abstract class\cf0 \
    \{\
        \cf4 cout\cf0 <<\cf5 "\\n\\tInside DERIVED class\\n"\cf0 ;\
        \cf3 return\cf0  \cf7 a\cf0 +\cf7 b\cf0 ;\
    \}\
\};\
\
\cf3 int\cf0  main()\
\{\
    \cf7 Derived\cf0  DERIVEDobj;\
    \
    \cf7 Base\cf0  *PtrBASEobj = &DERIVEDobj;\
    \
    PtrBASEobj->\cf8 NormalFunctionBASE\cf0 ();\
    PtrBASEobj->\cf8 VirtualFunction\cf0 ();\
    PtrBASEobj->\cf8 PureVirtualFunction\cf0 ();\
    \
    \cf4 cout\cf0 <<\cf5 "\\nPure virtual function of DERIVED class accessed in BASE class\\n"\cf0 ;\
    PtrBASEobj->\cf8 SetValuesForPureVirtualFunction\cf0 (\cf6 10\cf0 , \cf6 20\cf0 );\
    PtrBASEobj->\cf8 PureVirtualFunctionReturningValues\cf0 ();\
    PtrBASEobj->\cf8 AccessPureVirtualFunctionOfDerivedCalss\cf0 ();\
    \
    \
\}}