{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red92\green38\blue153;\red28\green0\blue207;\red38\green71\blue75;\red46\green13\blue110;\red196\green26\blue22;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 //Improvements in balance factor\cf0 \
\cf2 //added a new field called balance factor in each node that way the traversal time decreases\cf0 \
\cf2 // When ever a new node is added it's balancing factor becomes equal to zero and the path taken to add this particular node is pushed onto stack\cf0 \
\cf2 //Once inserted each node and pused all it's ancistors onto the stack\cf0 \
\cf2 //pop the ancistors one by one and check it's balancing factors and then update it in it's nodes\cf0 \
\
\cf3 struct\cf0  TreeNode\
\{\
    \cf3 int\cf0  data;\
    \cf3 int\cf0  BalanceFactor;\
    \cf3 int\cf0  LSTheight;\
    \cf3 int\cf0  RSTheight;\
    \cf4 TreeNode\cf0  *llink;\
    \cf4 TreeNode\cf0  *rlink;\
\};\
\
\cf4 TreeNode\cf0  *RootNode = \cf3 new\cf0  \cf4 TreeNode\cf0 ;\
\
\cf5 stack\cf0 <\cf4 TreeNode\cf0 *> stck;  \cf2 //Notice the * it is coz then the stack stores pointers\cf0 \
\
\cf3 int\cf0  height(\cf4 TreeNode\cf0  *Node)\
\{\
    \cf3 if\cf0 (Node == \cf3 NULL\cf0 )\
    \{\
        \cf3 return\cf0  -\cf6 1\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf3 int\cf0  LeftHeight = \cf7 height\cf0 (Node->\cf4 llink\cf0 );\
        \cf3 int\cf0  RightHeight = \cf7 height\cf0 (Node->\cf4 rlink\cf0 );\
        \
        \cf3 if\cf0 (LeftHeight > RightHeight)\
            \cf3 return\cf0  LeftHeight+\cf6 1\cf0 ;\
        \cf3 else\cf0 \
            \cf3 return\cf0  RightHeight+\cf6 1\cf0 ;\
    \}\
\}\
\
\cf3 int\cf0  balanceFactor(\cf4 TreeNode\cf0  *Node)\
\{\
    \cf3 if\cf0 (Node == \cf3 NULL\cf0 )\
    \{\
        \cf3 return\cf0  -\cf6 1\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf2 //If a leaf node\cf0 \
        \cf3 if\cf0 (Node->\cf4 llink\cf0  == \cf3 NULL\cf0  && Node->\cf4 rlink\cf0  == \cf3 NULL\cf0 )\
        \{\
            \cf3 return\cf0  \cf6 0\cf0 ;\
        \}\
        \cf2 //If only has one sub tree\cf0 \
        \cf2 //Has only right subtree\cf0 \
        \cf3 if\cf0 (Node->\cf4 llink\cf0  == \cf3 NULL\cf0  && Node->\cf4 rlink\cf0  != \cf3 NULL\cf0 )\
        \{\
            \cf2 //Find height of right subtree\cf0 \
            \cf3 int\cf0  h = \cf7 height\cf0 (Node->\cf4 rlink\cf0 );\
            \cf3 return\cf0  \cf6 0\cf0 -h;\
        \}\
        \cf3 else\cf0 \
            \cf2 // Has only left subtree\cf0 \
            \cf3 if\cf0 (Node->\cf4 rlink\cf0  == \cf3 NULL\cf0  && Node->\cf4 llink\cf0  != \cf3 NULL\cf0 )\
            \{\
                \cf3 int\cf0  h = \cf7 height\cf0 (Node->\cf4 llink\cf0 );\
                \cf3 return\cf0  h;\
            \}\
            \cf3 else\cf0 \
                \cf2 //Has Both subtrees\cf0 \
            \{\
                \cf3 int\cf0  rh = \cf7 height\cf0 (Node->\cf4 rlink\cf0 );\
                \cf3 int\cf0  lh = \cf7 height\cf0 (Node->\cf4 llink\cf0 );\
                \cf3 return\cf0  lh-rh;\
            \}\
    \}\
\}\
\
\cf3 void\cf0  stackDisplay()\
\{\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf6 0\cf0 ; i < \cf4 stck\cf0 .\cf8 size\cf0 (); i++)\
    \{\
        \cf4 TreeNode\cf0  *P;\
        P = \cf4 stck\cf0 .\cf8 top\cf0 ();\
        \cf4 stck\cf0 .\cf8 pop\cf0 ();\
        \cf5 cout\cf0 <<P->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
    \}\
\}\
\
\cf3 void\cf0  UpdateBalanceFactor(\cf4 TreeNode\cf0  *Node)\
\{\
    \cf2 //Pop the parent and check it's balancing factor\cf0 \
   \cf2 // cout<<"Balance factors for node "<<Node->data<<endl;\cf0 \
    \cf3 while\cf0 (!\cf4 stck\cf0 .\cf8 empty\cf0 ())\
    \{\
        \cf4 TreeNode\cf0  *Parent = \cf4 stck\cf0 .\cf8 top\cf0 ();\
        \cf4 stck\cf0 .\cf8 pop\cf0 ();\
        \
        Parent->\cf4 BalanceFactor\cf0  = \cf7 balanceFactor\cf0 (Parent);\
        \cf2 //cout<<"Balance factor for "<<Parent->data<<" is "<<Parent->BalanceFactor<<endl;\cf0 \
    \}\
    \
\}\
\
\
\cf3 void\cf0  insert(\cf3 int\cf0  item)\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf6 0\cf0  && \cf4 RootNode\cf0 ->\cf4 llink\cf0  == \cf3 NULL\cf0  && \cf4 RootNode\cf0 ->\cf4 rlink\cf0  == \cf3 NULL\cf0 )\
    \{\
        \cf4 RootNode\cf0 ->\cf4 data\cf0  = item;\
        \cf4 RootNode\cf0 ->\cf4 BalanceFactor\cf0  = \cf6 0\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 TreeNode\cf0  *NewNode;\
        NewNode = \cf3 new\cf0  \cf4 TreeNode\cf0 ;\
        NewNode->\cf4 data\cf0  = item;\
        NewNode->\cf4 BalanceFactor\cf0  = \cf6 0\cf0 ;\
        NewNode->\cf4 llink\cf0  = NewNode->\cf4 rlink\cf0  = \cf3 NULL\cf0 ;\
        \
        \cf4 TreeNode\cf0  *Ptr, *Prev;\
        Ptr = \cf4 RootNode\cf0 ;\
        Prev = Ptr;\
        \
        \cf4 stck\cf0 .\cf8 push\cf0 (Prev); \cf2 //Push the root onto the stack\cf0 \
        \
        \cf3 while\cf0 (Ptr != \cf3 NULL\cf0 )\
        \{\
            Prev = Ptr;\
            \cf4 stck\cf0 .\cf8 push\cf0 (Prev);\
            \cf3 if\cf0 (item < Ptr->\cf4 data\cf0 )\
            \{\
                Ptr = Ptr->\cf4 llink\cf0 ;\
            \}\
            \cf3 else\cf0 \
                \cf3 if\cf0 (item > Ptr->\cf4 data\cf0 )\
                \{\
                    Ptr = Ptr->\cf4 rlink\cf0 ;\
                \}\
        \}\
        \
        \
        \cf3 if\cf0 (item < Prev->\cf4 data\cf0 )\
        \{\
            Prev->\cf4 llink\cf0  = NewNode;\
        \}\
        \cf3 else\cf0 \
            Prev->\cf4 rlink\cf0  = NewNode;\
        \
        \
        \cf2 //Update the balancing factor\cf0 \
        \cf7 UpdateBalanceFactor\cf0 (NewNode);\
    \}\
\}\
\
\
\
\
\cf3 void\cf0  balanceFactorOfEachNode(\cf4 TreeNode\cf0  *Node)\
\{\
    \cf3 if\cf0 (Node == \cf3 NULL\cf0 )\
    \{\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf7 balanceFactorOfEachNode\cf0 (Node->\cf4 llink\cf0 );\
        \cf5 cout\cf0 <<Node->\cf4 data\cf0 <<\cf9 " balance factor is "\cf0 <<Node->\cf4 BalanceFactor\cf0 <<\cf8 endl\cf0 ;\
        \cf7 balanceFactorOfEachNode\cf0 (Node->\cf4 rlink\cf0 );\
    \}\
\}\
\
\
\
\cf3 int\cf0  main()\
\{\
    \cf4 RootNode\cf0 ->\cf4 data\cf0  = \cf6 0\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 llink\cf0  = \cf4 RootNode\cf0 ->\cf4 rlink\cf0  = \cf3 NULL\cf0 ;\
    \cf7 insert\cf0 (\cf6 10\cf0 );\
    \cf7 insert\cf0 (\cf6 5\cf0 );\
    \cf7 insert\cf0 (\cf6 20\cf0 );\
    \cf7 insert\cf0 (\cf6 25\cf0 );\
    \cf7 insert\cf0 (\cf6 30\cf0 );\
    \cf7 balanceFactorOfEachNode\cf0 (\cf4 RootNode\cf0 );\
\}}