{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red92\green38\blue153;\red63\green110\blue116;\red28\green0\blue207;\red38\green71\blue75;
\red46\green13\blue110;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 //\cf0 \
\cf2 //  main.cpp\cf0 \
\cf2 //  C++ Practice\cf0 \
\cf2 //\cf0 \
\cf2 //  Created by Priyanka on 13/09/14.\cf0 \
\cf2 //  Copyright (c) 2014 Priyanka is dong Practice. All rights reserved.\cf0 \
\cf2 //\cf0 \
\
\cf3 #include \cf4 <iostream>\cf3 \
#include \cf4 <string>\cf3 \
#include \cf4 <queue>\cf3 \
\cf0 \
\cf3 #include \cf4 <vector>\cf3 \
\cf5 using\cf0  \cf5 namespace\cf0  \cf6 std\cf0 ;\
\
\cf5 struct\cf0  TreeNode\
\{\
    \cf5 int\cf0  data;\
    \cf7 TreeNode\cf0  *llink;\
    \cf7 TreeNode\cf0  *rlink;\
\};\
\
\cf7 TreeNode\cf0  *RootNode = \cf5 new\cf0  \cf7 TreeNode\cf0 ;\
\
\cf5 void\cf0  insert(\cf5 int\cf0  item)\
\{\
    \cf5 if\cf0 (\cf7 RootNode\cf0 ->\cf7 data\cf0  == \cf8 0\cf0  && \cf7 RootNode\cf0 ->\cf7 llink\cf0  == \cf5 NULL\cf0  && \cf7 RootNode\cf0 ->\cf7 rlink\cf0  == \cf5 NULL\cf0 )\
    \{\
        \cf7 RootNode\cf0 ->\cf7 data\cf0  = item;\
    \}\
    \cf5 else\cf0 \
    \{\
        \cf7 TreeNode\cf0  *NewNode;\
        NewNode = \cf5 new\cf0  \cf7 TreeNode\cf0 ;\
        NewNode->\cf7 data\cf0  = item;\
        NewNode->\cf7 llink\cf0  = NewNode->\cf7 rlink\cf0  = \cf5 NULL\cf0 ;\
        \
        \cf7 TreeNode\cf0  *Ptr, *Prev;\
        Ptr = \cf7 RootNode\cf0 ;\
        Prev = Ptr;\
        \
        \cf5 while\cf0 (Ptr != \cf5 NULL\cf0 )\
        \{\
            Prev = Ptr;\
            \cf5 if\cf0 (item < Ptr->\cf7 data\cf0 )\
            \{\
                \
                Ptr = Ptr->\cf7 llink\cf0 ;\
            \}\
            \cf5 else\cf0 \
                \cf5 if\cf0 (item > Ptr->\cf7 data\cf0 )\
                \{\
                    Ptr = Ptr->\cf7 rlink\cf0 ;\
                \}\
        \}\
        \
        \cf5 if\cf0 (item < Prev->\cf7 data\cf0 )\
        \{\
            Prev->\cf7 llink\cf0  = NewNode;\
        \}\
        \cf5 else\cf0 \
            Prev->\cf7 rlink\cf0  = NewNode;\
        \
    \}\
\}\
\
\cf5 int\cf0  height(\cf7 TreeNode\cf0  *Node)\
\{\
    \cf5 if\cf0 (Node == \cf5 NULL\cf0 )\
    \{\
        \cf5 return\cf0  -\cf8 1\cf0 ;\
    \}\
    \cf5 else\cf0 \
    \{\
        \cf5 int\cf0  LeftHeight = \cf9 height\cf0 (Node->\cf7 llink\cf0 );\
        \cf5 int\cf0  RightHeight = \cf9 height\cf0 (Node->\cf7 rlink\cf0 );\
        \
        \cf5 if\cf0 (LeftHeight > RightHeight)\
            \cf5 return\cf0  LeftHeight+\cf8 1\cf0 ;\
        \cf5 else\cf0 \
            \cf5 return\cf0  RightHeight+\cf8 1\cf0 ;\
    \}\
\}\
\
\cf5 int\cf0  balanceFactor(\cf7 TreeNode\cf0  *Node)\
\{\
    \cf5 if\cf0 (Node == \cf5 NULL\cf0 )\
    \{\
        \cf5 return\cf0  -\cf8 1\cf0 ;\
    \}\
    \cf5 else\cf0 \
    \{\
        \cf2 //If a leaf node\cf0 \
        \cf5 if\cf0 (Node->\cf7 llink\cf0  == \cf5 NULL\cf0  && Node->\cf7 rlink\cf0  == \cf5 NULL\cf0 )\
        \{\
            \cf5 return\cf0  \cf8 0\cf0 ;\
        \}\
        \cf2 //If only has one sub tree\cf0 \
        \cf2 //Has only right subtree\cf0 \
        \cf5 if\cf0 (Node->\cf7 llink\cf0  == \cf5 NULL\cf0  && Node->\cf7 rlink\cf0  != \cf5 NULL\cf0 )\
        \{\
            \cf2 //Find height of right subtree\cf0 \
            \cf5 int\cf0  h = \cf9 height\cf0 (Node->\cf7 rlink\cf0 );\
            \cf5 return\cf0  \cf8 0\cf0 -h;\
        \}\
        \cf5 else\cf0 \
            \cf2 // Has only left subtree\cf0 \
            \cf5 if\cf0 (Node->\cf7 rlink\cf0  == \cf5 NULL\cf0  && Node->\cf7 llink\cf0  != \cf5 NULL\cf0 )\
            \{\
                \cf5 int\cf0  h = \cf9 height\cf0 (Node->\cf7 llink\cf0 );\
                \cf5 return\cf0  h;\
            \}\
        \cf5 else\cf0 \
            \cf2 //Has Both subtrees\cf0 \
        \{\
            \cf5 int\cf0  rh = \cf9 height\cf0 (Node->\cf7 rlink\cf0 );\
            \cf5 int\cf0  lh = \cf9 height\cf0 (Node->\cf7 llink\cf0 );\
            \cf5 return\cf0  lh-rh;\
        \}\
    \}\
\}\
\
\cf5 void\cf0  balanceFactorOfEachNode(\cf7 TreeNode\cf0  *Node)\
\{\
    \cf5 if\cf0 (Node == \cf5 NULL\cf0 )\
    \{\
        \cf5 return\cf0 ;\
    \}\
    \cf5 else\cf0 \
    \{\
        \cf9 balanceFactorOfEachNode\cf0 (Node->\cf7 llink\cf0 );\
        \cf5 int\cf0  bal = \cf9 balanceFactor\cf0 (Node);\
        \cf6 cout\cf0 <<Node->\cf7 data\cf0 <<\cf4 " balance factor is "\cf0 <<bal<<\cf10 endl\cf0 ;\
        \cf9 balanceFactorOfEachNode\cf0 (Node->\cf7 rlink\cf0 );\
    \}\
\}\
\
\cf5 int\cf0  main()\
\{\
    \cf7 RootNode\cf0 ->\cf7 data\cf0  = \cf8 0\cf0 ;\
    \cf7 RootNode\cf0 ->\cf7 llink\cf0  = \cf7 RootNode\cf0 ->\cf7 rlink\cf0  = \cf5 NULL\cf0 ;\
    \cf9 insert\cf0 (\cf8 10\cf0 );\
    \cf9 insert\cf0 (\cf8 5\cf0 );\
    \cf9 insert\cf0 (\cf8 20\cf0 );\
    \cf9 insert\cf0 (\cf8 25\cf0 );\
    \cf9 insert\cf0 (\cf8 30\cf0 );\
    \cf9 balanceFactorOfEachNode\cf0 (\cf7 RootNode\cf0 );\
\}\
}