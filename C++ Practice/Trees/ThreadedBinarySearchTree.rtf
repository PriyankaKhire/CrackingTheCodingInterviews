{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red38\green71\blue75;\red28\green0\blue207;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 /*\
 Threaded Binary Search Tree\
 */\cf0 \
\
\cf3 struct\cf0  ThreadedTree\
\{\
    \cf3 bool\cf0  Thread;\
    \cf3 int\cf0  data;\
    \cf4 ThreadedTree\cf0  *Rlink;\
    \cf4 ThreadedTree\cf0  *Llink;\
\};\
\
\cf4 ThreadedTree\cf0  *Root = \cf3 new\cf0  \cf4 ThreadedTree\cf0 ;\
\
\cf3 bool\cf0  predessorFlag;\
\cf4 ThreadedTree\cf0  *predessorNode;\
\cf4 ThreadedTree\cf0  *inorderPredessor(\cf4 ThreadedTree\cf0  *node, \cf4 ThreadedTree\cf0  *originalNode)\
\{\
    \cf3 if\cf0 (node != \cf3 NULL\cf0 )\
    \{\
        \cf5 inorderPredessor\cf0 (node->\cf4 Llink\cf0 , originalNode);\
        \cf3 if\cf0 (node == originalNode)\
        \{\
            \cf4 predessorFlag\cf0  = \cf3 true\cf0 ;\
            \cf3 return\cf0  \cf4 predessorNode\cf0 ;\
        \}\
        \cf3 if\cf0 (\cf4 predessorFlag\cf0  == \cf3 false\cf0 )\
        \{\
            \cf4 predessorNode\cf0  = node;\
        \}\
        \cf5 inorderPredessor\cf0 (node->\cf4 Rlink\cf0 , originalNode);\
    \}\
    \cf3 return\cf0  \cf4 predessorNode\cf0 ;\
\}\
\
\cf4 ThreadedTree\cf0  *returnInorderPredessor(\cf4 ThreadedTree\cf0  *node, \cf4 ThreadedTree\cf0  *originalNode)\
\{\
    \cf2 //This function is present coz evey time before finding the inorder predessor we need to make predessorFlag and predessorNode to false and null respectively this is not done automatically coz they are declared as global\cf0 \
    \cf4 predessorFlag\cf0  = \cf3 false\cf0 ;\
    \cf4 predessorNode\cf0  = \cf3 NULL\cf0 ;\
    \cf3 return\cf0  \cf5 inorderPredessor\cf0 (node, originalNode);\
    \
\}\
\
\cf3 void\cf0  addNode(\cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf4 Root\cf0 ->\cf4 data\cf0  == -\cf6 999\cf0  && \cf4 Root\cf0 ->\cf4 Thread\cf0  == \cf3 false\cf0  && \cf4 Root\cf0 ->\cf4 Rlink\cf0  == \cf3 NULL\cf0  && \cf4 Root\cf0 ->\cf4 Llink\cf0  == \cf3 NULL\cf0 )\
    \{\
        \cf4 Root\cf0 ->\cf4 data\cf0  = data;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 ThreadedTree\cf0  *Leaf;\
        Leaf = \cf3 new\cf0  \cf4 ThreadedTree\cf0 ;\
        Leaf->\cf4 data\cf0  = data;\
        Leaf->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
        Leaf->\cf4 Rlink\cf0  = \cf3 NULL\cf0 ;\
        Leaf->\cf4 Thread\cf0  = \cf3 false\cf0 ;\
        \
        \cf4 ThreadedTree\cf0  *ptr, *prev;\
        ptr = \cf4 Root\cf0 ;\
        prev = \cf4 Root\cf0 ;\
        \cf3 while\cf0 (ptr != \cf3 NULL\cf0 )\
        \{\
            prev = ptr;\
            \cf3 if\cf0 (ptr->\cf4 data\cf0  > data)\
            \{\
                ptr = ptr->\cf4 Llink\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                ptr = ptr->\cf4 Rlink\cf0 ;\
            \}\
        \}\
        \
        \cf3 if\cf0 (prev->\cf4 data\cf0  > data)\
        \{\
            prev->\cf4 Llink\cf0  = Leaf;\
        \}\
        \cf3 else\cf0 \
        \{\
            prev->\cf4 Rlink\cf0  = Leaf;\
        \}\
    \}\
\}\
\
\cf4 ThreadedTree\cf0  *findNode(\cf3 int\cf0  data)\
\{\
    \cf4 ThreadedTree\cf0  *ptr;\
    ptr = \cf4 Root\cf0 ;\
    \cf3 while\cf0 (ptr != \cf3 NULL\cf0 )\
    \{\
        \cf3 if\cf0 (ptr->\cf4 data\cf0  == data)\
        \{\
            \cf3 break\cf0 ;\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (ptr->\cf4 data\cf0  > data)\
        \{\
            ptr = ptr->\cf4 Llink\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            ptr = ptr->\cf4 Rlink\cf0 ;\
        \}\
    \}\
    \cf3 if\cf0 (ptr != \cf3 NULL\cf0 )\
    \{\
        \cf3 return\cf0  ptr;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf3 return\cf0  \cf3 NULL\cf0 ;\
    \}\
\}\
\
\cf3 void\cf0  inorder(\cf4 ThreadedTree\cf0  *node)\
\{\
    \cf3 if\cf0 (node != \cf3 NULL\cf0 )\
    \{\
        \cf5 inorder\cf0 (node->\cf4 Llink\cf0 );\
        \cf7 cout\cf0 <<node->\cf4 data\cf0 <<\cf8 " "\cf0 ;\
        \cf5 inorder\cf0 (node->\cf4 Rlink\cf0 );\
    \}\
\}\
\
\cf3 void\cf0  inorderThreadDisplay(\cf4 ThreadedTree\cf0  *node)\
\{\
    \cf3 if\cf0 (node != \cf3 NULL\cf0 )\
    \{\
        \cf5 inorderThreadDisplay\cf0 (node->\cf4 Llink\cf0 );\
        \cf3 if\cf0 (node->\cf4 Thread\cf0  == \cf3 true\cf0 )\
        \{\
            \cf2 //cout<<node->data<<"--->"<<node->Llink->data<<endl;\cf0 \
            \cf7 cout\cf0 <<node->\cf4 data\cf0 ;\
        \}\
        \cf5 inorderThreadDisplay\cf0 (node->\cf4 Rlink\cf0 );\
    \}\
\}\
\
\cf3 void\cf0  AddingThreads(\cf4 ThreadedTree\cf0  *node)\
\{\
    \cf3 if\cf0 (node != \cf3 NULL\cf0 )\
    \{\
        \cf5 AddingThreads\cf0 (node->\cf4 Llink\cf0 );\
        \cf3 if\cf0 (node->\cf4 Thread\cf0  == \cf3 false\cf0  && node->\cf4 Llink\cf0  == \cf3 NULL\cf0  && node->\cf4 Rlink\cf0  == \cf3 NULL\cf0 )\
        \{\
            \cf3 if\cf0 (\cf5 returnInorderPredessor\cf0 (\cf4 Root\cf0 , node) != \cf3 NULL\cf0 )\
            \{\
                \cf4 ThreadedTree\cf0  *temp = \cf5 returnInorderPredessor\cf0 (\cf4 Root\cf0 , node);\
                \cf7 cout\cf0 <<node->\cf4 data\cf0 <<\cf8 "--->"\cf0 <<temp->\cf4 data\cf0 <<\cf8 " "\cf0 ;\
                \cf2 //Cannot add links here coz this is a recurssive function\cf0 \
                \cf2 //node->Llink = temp;\cf0 \
                node->\cf4 Thread\cf0  = \cf3 true\cf0 ;\
            \}\
        \}\
        \cf5 AddingThreads\cf0 (node->\cf4 Rlink\cf0 );\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf4 Root\cf0 ->\cf4 data\cf0  = -\cf6 999\cf0 ;\
    \cf4 Root\cf0 ->\cf4 Thread\cf0  = \cf3 false\cf0 ;\
    \cf4 Root\cf0 ->\cf4 Rlink\cf0  = \cf3 NULL\cf0 ;\
    \cf4 Root\cf0 ->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
    \cf5 addNode\cf0 (\cf6 5\cf0 );\
    \cf5 addNode\cf0 (\cf6 3\cf0 );\
    \cf5 addNode\cf0 (\cf6 2\cf0 );\
    \cf5 addNode\cf0 (\cf6 4\cf0 );\
    \cf5 addNode\cf0 (\cf6 7\cf0 );\
    \cf5 addNode\cf0 (\cf6 6\cf0 );\
    \cf5 addNode\cf0 (\cf6 8\cf0 );\
    \cf5 inorder\cf0 (\cf4 Root\cf0 );\
    \cf7 cout\cf0 <<\cf9 endl\cf0 ;\
    \cf7 cout\cf0 <<\cf5 inorderPredessor\cf0 (\cf4 Root\cf0 , \cf5 findNode\cf0 (\cf6 4\cf0 ))->\cf4 data\cf0 ;\
    \cf7 cout\cf0 <<\cf9 endl\cf0 ;\
    \cf5 AddingThreads\cf0 (\cf4 Root\cf0 );\
    \cf5 inorderThreadDisplay\cf0 (\cf4 Root\cf0 );\
    \
\}}