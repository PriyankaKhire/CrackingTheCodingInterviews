{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red63\green110\blue116;\red28\green0\blue207;
\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;\red0\green116\blue0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 struct\cf0  Tries\
\{\
    \cf2 char\cf0  letter;\
    \cf2 int\cf0  word;\
    \cf2 int\cf0  prefix;\
    \cf3 Tries\cf0  *link[\cf4 26\cf0 ];\
\};\
\
\cf3 Tries\cf0  *Root = \cf2 new\cf0  \cf3 Tries\cf0 ;\
\
\cf2 void\cf0  initialize(\cf3 Tries\cf0  *vertex)\
\{\
    vertex->\cf3 letter\cf0  = \cf4 ' '\cf0 ;\
    vertex->\cf3 word\cf0  = \cf4 0\cf0 ;\
    vertex->\cf3 prefix\cf0  = \cf4 0\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i <\cf4 25\cf0 ; i++)\
    \{\
        vertex->\cf3 link\cf0 [i] = \cf2 NULL\cf0 ;\
    \}\
\}\
\
\cf3 Tries\cf0  *createEdge()\
\{\
    \cf3 Tries\cf0  *Letter;\
    Letter = \cf2 new\cf0  \cf3 Tries\cf0 ;\
    \cf2 return\cf0  Letter;\
\}\
\
\cf2 void\cf0  addWord(\cf3 Tries\cf0  *vertex, \cf5 string\cf0  word)\
\{\
    \cf2 if\cf0 (word == \cf6 ""\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf6 "This completes the addition of word at node "\cf0 <<vertex->\cf3 letter\cf0 <<\cf7 endl\cf0 ;\
        vertex->\cf3 word\cf0  = vertex->\cf3 word\cf0  + \cf4 1\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf2 char\cf0  k = \cf7 tolower\cf0 (word[\cf4 0\cf0 ]);\
        \cf2 int\cf0  index = \cf2 int\cf0 (k) - \cf2 int\cf0 (\cf4 'a'\cf0 );\
        \cf5 cout\cf0 <<vertex->\cf3 letter\cf0 <<\cf6 " "\cf0 <<index<<\cf6 " "\cf0 <<vertex<<\cf7 endl\cf0 ;\
        \cf2 if\cf0 (vertex->\cf3 link\cf0 [index] == \cf2 NULL\cf0 )\
        \{\
            \cf3 Tries\cf0  *edgeK = \cf8 createEdge\cf0 ();\
            \cf8 initialize\cf0 (edgeK);\
            vertex->\cf3 link\cf0 [index] = edgeK; \cf9 //Adds the link\cf0 \
            vertex = vertex->\cf3 link\cf0 [index]; \cf9 //And thats why you ned this line here and not somewhere else\cf0 \
            vertex->\cf3 letter\cf0  = k;\
        \}\
        \cf2 else\cf0 \
        \{\
            vertex = vertex->\cf3 link\cf0 [index];\
        \}\
        vertex->\cf3 prefix\cf0  = vertex->\cf3 prefix\cf0  + \cf4 1\cf0 ;\
        word = word.\cf7 erase\cf0 (\cf4 0\cf0 ,\cf4 1\cf0 );\
        \cf8 addWord\cf0 (vertex, word);\
    \}\
\}\
\
\cf2 void\cf0  search(\cf3 Tries\cf0  *Node, \cf5 string\cf0  word)\
\{\
    \cf2 if\cf0 (word == \cf6 ""\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf6 "Found Full Word"\cf0 ;\
        \cf2 return\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf2 char\cf0  k = \cf7 tolower\cf0 (word[\cf4 0\cf0 ]);\
        word = word.\cf7 erase\cf0 (\cf4 0\cf0 ,\cf4 1\cf0 );\
        \cf2 int\cf0  index = \cf2 int\cf0 (k) - \cf2 int\cf0 (\cf4 'a'\cf0 );\
        \cf2 if\cf0 (Node->\cf3 link\cf0 [index] != \cf2 NULL\cf0 )\
        \{\
            Node = Node->\cf3 link\cf0 [index];\
            \cf8 search\cf0 (Node, word);\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf5 cout\cf0 <<\cf6 "Not Found"\cf0 ;\
            \cf2 return\cf0 ;\
        \}\
    \}\
\}\
\
\cf2 void\cf0  display(\cf3 Tries\cf0  *Node)\
\{\
    \cf2 if\cf0 (Node != \cf2 NULL\cf0 )\
    \{\
        \cf2 int\cf0  i = \cf4 0\cf0 ;\
        \cf2 while\cf0 (Node->\cf3 link\cf0 [i] == \cf2 NULL\cf0  && i < \cf4 26\cf0 )\
        \{\
            i = i+\cf4 1\cf0 ;\
        \}\
        \cf2 if\cf0 (Node->\cf3 link\cf0 [i] != \cf2 NULL\cf0 )\
        \{\
            Node = Node->\cf3 link\cf0 [i];\
            \cf5 cout\cf0 <<Node->\cf3 letter\cf0 ;\
            \cf8 display\cf0 (Node);\
        \}\
    \}\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf8 initialize\cf0 (\cf3 Root\cf0 );\
    \cf8 addWord\cf0 (\cf3 Root\cf0 , \cf6 "abc"\cf0 );\
    \cf8 addWord\cf0 (\cf3 Root\cf0 , \cf6 "aaa"\cf0 );\
    \cf5 cout\cf0 <<\cf7 endl\cf0 ;\
    \cf9 //display(Root);\cf0 \
    \cf8 search\cf0 (\cf3 Root\cf0 , \cf6 "abc"\cf0 );\
\}}