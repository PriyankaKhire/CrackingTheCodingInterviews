{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red92\green38\blue153;\red0\green116\blue0;\red28\green0\blue207;\red46\green13\blue110;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
\
\
\pard\tx529\pardeftab529\pardirnatural

\f1\fs22 \cf2 \CocoaLigature0 #include \cf3 <map>\cf2 \
\cf4 using\cf0  \cf4 namespace\cf0  \cf5 std\cf0 ;\
\
\cf6 /*  \
 Implement an algorithm to determine if a string has all unique characters ?\
 */\cf0 \
\
\cf4 int\cf0  main(\cf4 int\cf0  argc, \cf4 const\cf0  \cf4 char\cf0  * argv[])\
\{
\f0\fs24 \CocoaLigature1 \

\f1\fs22 \cf5 \CocoaLigature0 string\cf0  string1 = \cf3 "abcc"\cf0 ;\
    \cf5 map\cf0  <\cf4 char\cf0 , \cf4 int\cf0 > MyMap;\
    \cf4 int\cf0  count = \cf7 0\cf0 ;\
    \
    \cf4 for\cf0 (\cf4 int\cf0  i = \cf7 0\cf0 ;i<string1.\cf8 length\cf0 (); i++)\
    \{\
        \cf4 if\cf0 (MyMap.\cf8 find\cf0 (string1[\cf8 i\cf0 ]) == MyMap.\cf8 end\cf0 ())\
        \{\
            \cf6 //Key Not Found then add it\cf0 \
            MyMap[\cf8 string1\cf0 [\cf8 i\cf0 ]] = \cf7 1\cf0 ;\
            count++;\
        \}\
        \cf4 else\cf0 \
        \{\
            \cf6 //Key found that means string has non unque characters\cf0 \
            \cf5 cout\cf0 <<\cf3 "String has non unique characters \\n"\cf0 ;\
            \cf4 break\cf0 ;\
        \}\
    \}\
    \
    \cf4 if\cf0 (count == string1.\cf8 length\cf0 ())\
    \{\
        \cf5 cout\cf0 <<\cf3 "String is unique\\n"\cf0 ;\
    \}\
    \
 \}   }