{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red28\green0\blue207;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
 Write a function AlternatingSplit() that takes one list and divides up its nodes to make two smaller lists \'91a\'92 and \'91b\'92. The sublists should be made from alternating elements in the original list. So if the original list is 0->1->0->1->0->1 then one sublist should be 0->0->0 and the other should be 1->1->1.\
 */\cf0 \
\
\cf3 struct\cf0  LinkedList\
\{\
    \cf3 int\cf0  data;\
    \cf4 LinkedList\cf0  *link;\
\};\
\
\cf4 LinkedList\cf0  *root = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
\
\
\cf3 void\cf0  Display(\cf4 LinkedList\cf0  *root)\
\{\
    \cf3 while\cf0  (root != \cf3 NULL\cf0 )\
    \{\
        \cf5 cout\cf0 <<root->\cf4 data\cf0 <<\cf6 "->"\cf0 ;\
        root = root->\cf4 link\cf0 ;\
    \}\
    \cf5 cout\cf0 <<\cf7 endl\cf0 ;\
\}\
\
\cf3 void\cf0  split()\
\{\
    \cf4 LinkedList\cf0  *ptr, *next;\
    \cf4 LinkedList\cf0  *List1 = \cf3 new\cf0  \cf4 LinkedList\cf0 , *List2 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
    List1 = \cf3 NULL\cf0 ;\
    List2 = \cf3 NULL\cf0 ;\
    ptr = \cf4 root\cf0 ;\
    next = \cf4 root\cf0 ;\
    \cf3 int\cf0  count = \cf8 1\cf0 ;\
    \cf3 while\cf0 (ptr != \cf3 NULL\cf0 )\
    \{\
        next = next->\cf4 link\cf0 ;\
        \cf3 if\cf0 (count%\cf8 2\cf0  == \cf8 0\cf0 )\
        \{\
            \cf3 if\cf0 (List1 == \cf3 NULL\cf0 )\
            \{\
                List1 = ptr;\
                List1->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                ptr->\cf4 link\cf0  = List1;\
                List1 = ptr;\
            \}\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf3 if\cf0 (List2 == \cf3 NULL\cf0 )\
            \{\
                List2 = ptr;\
                List2->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                ptr->\cf4 link\cf0  = List2;\
                List2 = ptr;\
            \}\
        \}\
        ptr = next;\
        count++;\
    \}\
    \
    \cf9 Display\cf0 (List1);\
    \cf9 Display\cf0 (List2);\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf4 root\cf0 ->\cf4 data\cf0  = \cf8 100\cf0 ;\
    \cf4 root\cf0 ->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \cf3 int\cf0  i = \cf8 0\cf0 ;\
    \cf3 while\cf0 (i < \cf8 10\cf0 )\
    \{\
        \cf4 LinkedList\cf0  *NewNode = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
        \cf3 if\cf0 (i%\cf8 2\cf0  == \cf8 0\cf0 )\
        \{\
            NewNode->\cf4 data\cf0  = \cf8 0\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            NewNode->\cf4 data\cf0  = \cf8 1\cf0 ;\
        \}\
        NewNode->\cf4 link\cf0  = \cf4 root\cf0 ;\
        \cf4 root\cf0  = NewNode;\
        i++;\
    \}\
    \
    \cf9 Display\cf0 (\cf4 root\cf0 );\
    \cf9 split\cf0 ();\
    \
    \
\}}