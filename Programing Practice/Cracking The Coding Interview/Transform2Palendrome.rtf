{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red38\green71\blue75;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red63\green110\blue116;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 /*\
 A palindrome is a number that is the same whether it is read from left-to-right or right-to-left. For example, 121 and 34543 are both palindromes. It turns out that nearly every integer can be transformed into a palindrome by reversing its digits and adding it to the original number. If that does not create a palindrome, add the reverse of the new number to itself. A palindrome is created by repeating the process of reversing the number and adding it to itself until the number is a palindrome.\
 \
 Create a class Transform that contains the method palindrome, which takes a number N that is to be transformed and returns a number that is the resultant palindrome from this process. Of course if N is already a palindrome, return it without changing it. Though it is theorized that all numbers can be transformed to palindromes in this way, some numbers do not converge in a reasonable amount of time. For instance, 196 has been carried out to 26,000 digits without finding a palindrome. So if the method finds that the resultant palindrome must be greater than 1,000,000,000, return the special value -1 instead.\
 \
 N will be between 1 and 10000 inclusive.\
 */\cf0 \
\
\cf3 class\cf0  Transform\
\{\
\cf3 private\cf0 :\
    \cf3 int\cf0  reverseNumber(\cf3 int\cf0  num)\
    \{\
        \cf2 //Reversing a number\cf0 \
        \
        \cf3 int\cf0  remainder = \cf4 0\cf0 ;\
        \cf3 int\cf0  reverse = \cf4 0\cf0 ;\
        \
        \cf3 while\cf0 (num != \cf4 0\cf0 )\
        \{\
            remainder = num%\cf4 10\cf0 ;\
            reverse = (reverse*\cf4 10\cf0 )+remainder;\
            num = num/\cf4 10\cf0 ;\
        \}\
        \cf3 return\cf0  reverse;\
    \}\
\
    \cf3 bool\cf0  isPalendrome(\cf3 int\cf0  num)\
    \{\
        \cf3 int\cf0  reverse = \cf5 reverseNumber\cf0 (num);\
        \
        \cf3 if\cf0 (reverse == num)\
        \{\
            \cf3 return\cf0  \cf3 true\cf0 ;\
        \}\
        \cf3 else\cf0 \
            \cf3 return\cf0  \cf3 false\cf0 ;\
    \}\
    \
\cf3 public\cf0 :\
    \cf3 int\cf0  Palendrome(\cf3 int\cf0  num)\
    \{\
        \cf2 //Is the given number a palendrome ?\cf0 \
        \cf3 if\cf0 (\cf5 isPalendrome\cf0 (num))\
        \{\
            \cf3 return\cf0  num;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf3 int\cf0  reverse = \cf4 0\cf0 ;\
            \cf3 int\cf0  n;\
            reverse = \cf5 reverseNumber\cf0 (num);\
            num += reverse;\
            \cf3 if\cf0 (num > \cf4 1000000000\cf0 )\
            \{\
                \cf3 return\cf0  -\cf4 1\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                n = \cf5 Palendrome\cf0 (num);\
            \}\
            \cf3 return\cf0  n;\
        \}\
    \}\
    \
\};\
\
\
\cf3 int\cf0  main()\
\{\
    \cf3 int\cf0  num;\
    \
    \cf6 cout\cf0 <<\cf7 "Enter a number to reverse\\n"\cf0 ;\
    \cf6 cin\cf0 >>num;\
    \
    \cf3 if\cf0 (num < \cf4 0\cf0  || num > \cf4 10000\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Invalid number\\n"\cf0 ;\
        \cf8 exit\cf0 (\cf4 0\cf0 );\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf9 Transform\cf0  obj;\
        \cf3 int\cf0  palendrome = \cf4 0\cf0 ;\
        palendrome = obj.\cf5 Palendrome\cf0 (num);\
        \cf6 cout\cf0 <<palendrome<<\cf8 endl\cf0 ;\
    \}\
        \
    \
    \cf2 //To check if a number os a palendrome or not\cf0 \
    \cf2 //If the reversed number is same as original number then its a palendrome\cf0 \
    \
\}}