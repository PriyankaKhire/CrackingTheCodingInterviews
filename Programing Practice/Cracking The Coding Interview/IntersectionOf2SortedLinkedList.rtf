{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red92\green38\blue153;\red196\green26\blue22;\red38\green71\blue75;\red46\green13\blue110;\red28\green0\blue207;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 /*\
 Given two lists sorted in increasing order, create and return a new list representing the intersection of the two lists. The new list should be made with its own memory \'97 the original lists should not be changed.\
 \
 For example, let the first linked list be 1->2->3->4->6 and second linked list be 2->4->6->8, then your function should create and return a third list as 2->4->6.\
 \
 */\cf0 \
\
\cf3 struct\cf0  LinkedList\
\{\
    \cf3 int\cf0  data;\
    \cf4 LinkedList\cf0  *link;\
\};\
\
\cf4 LinkedList\cf0  *root1 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
\cf4 LinkedList\cf0  *root2 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
\
\cf3 void\cf0  Intersection(\cf4 LinkedList\cf0  *ptr1, \cf4 LinkedList\cf0  *ptr2)\
\{\
    \cf3 if\cf0 (ptr1 != \cf3 NULL\cf0  || ptr2 != \cf3 NULL\cf0 )\
    \{\
        \cf3 if\cf0 (ptr1->\cf4 link\cf0  != \cf3 NULL\cf0  && ptr2->\cf4 link\cf0  != \cf3 NULL\cf0 )\
        \{\
            \cf3 if\cf0 (ptr1->\cf4 data\cf0  == ptr2->\cf4 data\cf0 )\
            \{\
                \cf5 cout\cf0 <<ptr1->\cf4 data\cf0 <<\cf6 "->"\cf0 ;\
                ptr1 = ptr1->\cf4 link\cf0 ;\
                ptr2 = ptr2->\cf4 link\cf0 ;\
            \}\
            \cf3 if\cf0 (ptr2->\cf4 data\cf0  > ptr1->\cf4 data\cf0 )\
            \{\
                ptr1 = ptr1->\cf4 link\cf0 ;\
            \}\
            \cf3 if\cf0 (ptr1->\cf4 data\cf0  > ptr2->\cf4 data\cf0 )\
            \{\
                ptr2 = ptr2->\cf4 link\cf0 ;\
            \}\
            \cf7 Intersection\cf0 (ptr1, ptr2);\
        \}\
        \
        \cf3 if\cf0 (ptr2->\cf4 link\cf0  == \cf3 NULL\cf0  && ptr1->\cf4 link\cf0  != \cf3 NULL\cf0 )\
        \{\
            \cf3 if\cf0 (ptr1->\cf4 data\cf0  == ptr2->\cf4 data\cf0 )\
            \{\
                \cf5 cout\cf0 <<ptr1->\cf4 data\cf0 <<\cf6 "->"\cf0 ;\
                ptr1 = ptr1->\cf4 link\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                \cf2 //No point in moving if ptr2->data is smaller than ptr->data\cf0 \
                \cf3 if\cf0 (ptr2->\cf4 data\cf0  > ptr1->\cf4 data\cf0 )\
                \{\
                    ptr1 = ptr1->\cf4 link\cf0 ;\
                \}\
                \cf3 if\cf0 (ptr1->\cf4 data\cf0  > ptr2->\cf4 data\cf0 )\
                \{\
                    \cf2 //Do nothing\cf0 \
                    \cf3 return\cf0 ;\
                \}\
                \cf7 Intersection\cf0 (ptr1, ptr2);\
            \}\
        \}\
        \
        \cf3 if\cf0 (ptr1->\cf4 link\cf0  == \cf3 NULL\cf0  && ptr2->\cf4 link\cf0  != \cf3 NULL\cf0 )\
        \{\
            \cf3 if\cf0 (ptr1->\cf4 data\cf0  == ptr2->\cf4 data\cf0 )\
            \{\
                \cf5 cout\cf0 <<ptr2->\cf4 data\cf0 <<\cf6 "->"\cf0 ;\
                ptr2 = ptr2->\cf4 link\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                \cf2 //No point in moving if ptr1->data is smaller than ptr2->data\cf0 \
                \cf3 if\cf0 (ptr1->\cf4 data\cf0  > ptr2->\cf4 data\cf0 )\
                \{\
                    ptr2 = ptr2->\cf4 link\cf0 ;\
                \}\
                \cf3 if\cf0 (ptr2->\cf4 data\cf0  > ptr1->\cf4 data\cf0 )\
                \{\
                    \cf2 //Do nothing\cf0 \
                    \cf3 return\cf0 ;\
                \}\
                \cf7 Intersection\cf0 (ptr1, ptr2);\
            \}\
        \}\
        \
        \cf3 if\cf0 (ptr1->\cf4 link\cf0  == \cf3 NULL\cf0  && ptr2->\cf4 link\cf0  == \cf3 NULL\cf0 )\
        \{\
            \cf3 if\cf0 (ptr1->\cf4 data\cf0  == ptr2->\cf4 data\cf0 )\
            \{\
                \cf5 cout\cf0 <<ptr2->\cf4 data\cf0 <<\cf6 "->"\cf0 ;\
            \}\
            ptr1 = ptr1->\cf4 link\cf0 ;\
            ptr2 = ptr2->\cf4 link\cf0 ;\
            \cf7 Intersection\cf0 (ptr1, ptr2);\
        \}\
        \
    \}\
\}\
\
\cf3 void\cf0  Display(\cf4 LinkedList\cf0  *root)\
\{\
    \cf3 while\cf0  (root != \cf3 NULL\cf0 )\
    \{\
        \cf5 cout\cf0 <<root->\cf4 data\cf0 <<\cf6 "->"\cf0 ;\
        root = root->\cf4 link\cf0 ;\
    \}\
    \cf5 cout\cf0 <<\cf8 endl\cf0 ;\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf4 root1\cf0 ->\cf4 data\cf0  = \cf9 8\cf0 ;\
    \cf4 root1\cf0 ->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \cf4 root2\cf0 ->\cf4 data\cf0  = \cf9 8\cf0 ;\
    \cf4 root2\cf0 ->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \
    \cf3 int\cf0  i = \cf9 6\cf0 ;\
    \cf3 while\cf0 (i > \cf9 0\cf0 )\
    \{\
        \cf3 if\cf0 (i == \cf9 6\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *NewNode1 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \cf4 LinkedList\cf0  *NewNode2 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \
            NewNode1->\cf4 data\cf0  = i;\
            NewNode2->\cf4 data\cf0  = i;\
            \
            NewNode1->\cf4 link\cf0  = \cf4 root1\cf0 ;\
            NewNode2->\cf4 link\cf0  = \cf4 root2\cf0 ;\
            \cf4 root1\cf0  = NewNode1;\
            \cf4 root2\cf0  = NewNode2;\
        \}\
        \cf3 if\cf0 (i == \cf9 4\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *NewNode1 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \cf4 LinkedList\cf0  *NewNode2 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \
            NewNode1->\cf4 data\cf0  = i;\
            NewNode2->\cf4 data\cf0  = i;\
            \
            NewNode1->\cf4 link\cf0  = \cf4 root1\cf0 ;\
            NewNode2->\cf4 link\cf0  = \cf4 root2\cf0 ;\
            \cf4 root1\cf0  = NewNode1;\
            \cf4 root2\cf0  = NewNode2;\
        \}\
        \cf3 if\cf0 (i == \cf9 2\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *NewNode1 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \cf4 LinkedList\cf0  *NewNode2 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \
            NewNode1->\cf4 data\cf0  = i;\
            NewNode2->\cf4 data\cf0  = i;\
            \
            NewNode1->\cf4 link\cf0  = \cf4 root1\cf0 ;\
            NewNode2->\cf4 link\cf0  = \cf4 root2\cf0 ;\
            \cf4 root1\cf0  = NewNode1;\
            \cf4 root2\cf0  = NewNode2;\
        \}\
        \
        \cf3 if\cf0 (i == \cf9 3\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *NewNode1 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \
            NewNode1->\cf4 data\cf0  = i;\
            \
            NewNode1->\cf4 link\cf0  = \cf4 root1\cf0 ;\
            \cf4 root1\cf0  = NewNode1;\
        \}\
        \
        \cf3 if\cf0 (i == \cf9 1\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *NewNode1 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \
            NewNode1->\cf4 data\cf0  = i;\
            \
            NewNode1->\cf4 link\cf0  = \cf4 root1\cf0 ;\
            \cf4 root1\cf0  = NewNode1;\
        \}\
        \
        \cf3 if\cf0 (i == \cf9 5\cf0 )\
        \{\
            \cf4 LinkedList\cf0  *NewNode2 = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
            \
            NewNode2->\cf4 data\cf0  = i;\
            \
            NewNode2->\cf4 link\cf0  = \cf4 root2\cf0 ;\
            \cf4 root2\cf0  = NewNode2;\
        \}\
        i--;\
        \
    \}\
    \
    \cf7 Display\cf0 (\cf4 root1\cf0 );\
    \cf7 Display\cf0 (\cf4 root2\cf0 );\
    \cf7 Intersection\cf0 (\cf4 root1\cf0 , \cf4 root2\cf0 );\
    \
\}}