{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red28\green0\blue207;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;}
\paperw11905\paperh16837\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\
\cf2 /* Implement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2blc5a3. If the "compressed" string would not become smaller than the orig- inal string, your method should return the original string.\
 */\cf0 \
\cf3 class\cf0  compression\
\{\
\cf3 public\cf0 :\
    \cf3 int\cf0  value;\
    \cf3 char\cf0  ch;\
    \
    compression()\
    \{\
        \cf4 value\cf0  = \cf5 0\cf0 ;\
    \}\
\};\
\
\cf3 int\cf0  main()\
\{\
    \cf6 string\cf0  input;\
    \cf6 cout\cf0 <<\cf7 "Enter string \\n"\cf0 ;\
    \cf8 getline\cf0 (\cf6 cin\cf0 , input);\
    \
    \cf4 compression\cf0  *com = \cf3 new\cf0  \cf4 compression\cf0 [input.\cf8 length\cf0 ()];\
    \cf3 int\cf0  j = \cf5 0\cf0 ;\
    \cf3 for\cf0  (\cf3 int\cf0  i = \cf5 0\cf0 ; i<input.\cf8 length\cf0 (); i++)\
    \{\
        \cf3 if\cf0 (i == \cf5 0\cf0 )\
        \{\
            com[j].\cf4 ch\cf0  = input[\cf8 i\cf0 ];\
            com[j].\cf4 value\cf0 ++;\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (input[\cf8 i\cf0 ] != input[\cf8 i\cf0 -\cf5 1\cf0 ]) \cf2 //Change of character\cf0 \
            \{\
                j++;\
                com[j].\cf4 ch\cf0  = input[\cf8 i\cf0 ];\
                com[j].\cf4 value\cf0 ++;\
            \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (input[\cf8 i\cf0 ] == input[\cf8 i\cf0 -\cf5 1\cf0 ])\cf2 //Continous character\cf0 \
            \{\
                com[j].\cf4 value\cf0 ++;\
            \}\
    \}\
    \
    \cf3 if\cf0 (j == input.\cf8 length\cf0 ()-\cf5 1\cf0 )\
    \{\
        \cf6 cout\cf0 <<input<<\cf8 endl\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf5 0\cf0 ; i<=j; i++)\
    \{\
        \cf6 cout\cf0 <<com[i].\cf4 ch\cf0 <<com[i].\cf4 value\cf0 ;\
    \}\
    \}\
    \
    \
\}\
\
\
//Make this method more efficient by not using an int and instead convert int into char only and store and at the end if j == length then print string as is else print it out\
\
\
\
\
\
\
\cf3 int\cf0  main()\
\{\
    \cf6 string\cf0  str = \cf7 "abcggggggggggggg"\cf0 ;\
    \cf3 int\cf0  i =\cf5 0\cf0 ;\
    \cf3 int\cf0  count = \cf5 1\cf0 ;\
    \cf3 while\cf0 (i < str.\cf8 length\cf0 ())\
    \{\
        \cf3 if\cf0 (str[\cf8 i\cf0 ] != str[\cf8 i\cf0 +\cf5 1\cf0 ])\
        \{\
            \cf6 cout\cf0 <<str[\cf8 i\cf0 ]<<count;\
            i++;\
            count = \cf5 1\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            count ++;\
            i++;\
        \}\
    \}\
    \
\}}