{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red63\green110\blue116;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
Find element in rotated array\
*/\cf0 \
\cf3 const\cf0  \cf3 static\cf0  \cf3 int\cf0  n = \cf4 11\cf0 ;\
\cf3 int\cf0  input[\cf5 n\cf0 ] = \{\cf4 3\cf0 ,\cf4 4\cf0 ,\cf4 5\cf0 ,\cf4 6\cf0 ,\cf4 7\cf0 ,\cf4 8\cf0 ,\cf4 9\cf0 ,\cf4 10\cf0 ,\cf4 11\cf0 ,\cf4 1\cf0 ,\cf4 2\cf0 \};\
\cf3 bool\cf0  SortedSearched = \cf3 false\cf0 ;\
\
\cf3 void\cf0  BinarySearch(\cf3 int\cf0  low, \cf3 int\cf0  high, \cf3 int\cf0  element)\
\{\
    \
    \cf3 if\cf0 (low < high)\
    \{\
        \cf3 int\cf0  mid = (low+high)/\cf4 2\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Low "\cf0 <<low<<\cf7 " high "\cf0 <<high<<\cf7 " "\cf0 ;\
        \cf6 cout\cf0 <<\cf7 "Visited "\cf0 <<\cf5 input\cf0 [mid]<<\cf8 endl\cf0 ;\
        \
        \cf3 if\cf0 ( element == \cf5 input\cf0 [mid])\
        \{\
            \cf6 cout\cf0 <<\cf7 "Found it\\n"\cf0 ;\
            \cf8 exit\cf0 (\cf4 0\cf0 );\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 ( element < \cf5 input\cf0 [mid])\
        \{\
            \cf2 //Go left\cf0 \
            \cf9 BinarySearch\cf0 (low, mid-\cf4 1\cf0 , element);\
            \cf3 if\cf0 (element < \cf5 input\cf0 [low])\
            \{\
                \cf9 BinarySearch\cf0 (mid+\cf4 1\cf0 , high, element);\
            \}\
            \
            \
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (element > \cf5 input\cf0 [mid])\
        \{\
            \cf2 //Go right\cf0 \
            \cf9 BinarySearch\cf0 (mid+\cf4 1\cf0 , high, element);\
            \cf3 if\cf0 (element > \cf5 input\cf0 [high])\
            \{\
                \cf9 BinarySearch\cf0 (low, mid-\cf4 1\cf0 , element);\
            \}\
            \
        \}\
    \}\
\}\
\
\cf3 int\cf0  findPivot(\cf3 int\cf0  low, \cf3 int\cf0  high)\
\{\
    \cf3 if\cf0  (high < low)  \cf3 return\cf0  -\cf4 1\cf0 ;\
    \cf3 if\cf0  (high == low) \cf3 return\cf0  low;\
    \
    \cf3 int\cf0  mid = (low + high)/\cf4 2\cf0 ;\
    \
    \cf3 if\cf0  (mid < high && \cf5 input\cf0 [mid] > \cf5 input\cf0 [mid + \cf4 1\cf0 ])\
    \{\
        \cf6 cout\cf0 <<\cf7 "Visited ->"\cf0 <<\cf5 input\cf0 [mid]<<\cf8 endl\cf0 ;\
        \cf3 return\cf0  mid;\
    \}\
    \cf3 if\cf0  (mid > low && \cf5 input\cf0 [mid] < \cf5 input\cf0 [mid - \cf4 1\cf0 ])\
    \{\
        \cf6 cout\cf0 <<\cf7 "Visited ->"\cf0 <<\cf5 input\cf0 [mid-\cf4 1\cf0 ]<<\cf8 endl\cf0 ;\
        \cf3 return\cf0  (mid-\cf4 1\cf0 );\
    \}\
    \cf3 if\cf0  (\cf5 input\cf0 [low] < \cf5 input\cf0 [mid])\
    \{\
        \cf6 cout\cf0 <<\cf7 "Visited "\cf0 <<\cf5 input\cf0 [low]<<\cf7 " and visited "\cf0 <<\cf5 input\cf0 [mid]<<\cf8 endl\cf0 ;\
        \cf3 return\cf0  \cf9 findPivot\cf0 (mid+\cf4 1\cf0 , high);\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf6 cout\cf0 <<\cf7 "Visited "\cf0 <<\cf5 input\cf0 [high]<<\cf7 " and visited "\cf0 <<\cf5 input\cf0 [mid]<<\cf8 endl\cf0 ;\
        \cf3 return\cf0  \cf9 findPivot\cf0 (low, mid-\cf4 1\cf0 );\
    \}\
\}\
\
\cf3 void\cf0  BinSearch(\cf3 int\cf0  low, \cf3 int\cf0  high, \cf3 int\cf0  element)\
\{\
    \cf3 if\cf0 (low < high)\
    \{\
        \cf3 int\cf0  mid = (low+high)/\cf4 2\cf0 ;\
        \
        \cf3 if\cf0 (element == \cf5 input\cf0 [mid])\
        \{\
            \cf6 cout\cf0 <<\cf7 "Found it\\n"\cf0 ;\
            \cf3 return\cf0 ;\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (element < \cf5 input\cf0 [mid])\
            \{\
                \cf9 BinSearch\cf0 (low, mid-\cf4 1\cf0 , element);\
            \}\
        \cf3 else\cf0 \
        \{\
            \cf9 BinSearch\cf0 (mid+\cf4 1\cf0 , high, element);\
        \}\
    \}\
\}\
\
\cf3 void\cf0  PivotedBinarySearch(\cf3 int\cf0  element, \cf3 int\cf0  low, \cf3 int\cf0  high)\
\{\
    \cf3 if\cf0 (low < high)\
    \{\
        \cf3 int\cf0  Pivot = \cf9 findPivot\cf0 (low, high);\
        \
        \cf3 if\cf0 (Pivot == -\cf4 1\cf0 )\
        \{\
            \cf2 //Normal Binary Search\cf0 \
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (element == \cf5 input\cf0 [Pivot])\
            \{\
                \cf6 cout\cf0 <<\cf7 "Found it\\n"\cf0 ;\
                \cf3 return\cf0 ;\
            \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (element < \cf5 input\cf0 [Pivot] && element >= \cf5 input\cf0 [low])\
            \{\
                \cf2 //Binary Search on left half\cf0 \
                \cf9 BinSearch\cf0 (low, Pivot-\cf4 1\cf0 , element);\
            \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (element >= \cf5 input\cf0 [Pivot+\cf4 1\cf0 ] && element <= \cf5 input\cf0 [high])\
            \{\
                \cf2 //Binary Search on right half\cf0 \
                \cf9 BinSearch\cf0 (Pivot+\cf4 1\cf0 , high, element);\
            \}\
        \cf3 else\cf0 \
        \{\
            \cf6 cout\cf0 <<\cf7 "Not there\\n"\cf0 ;\
            \cf3 return\cf0 ;\
        \}\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \
    \cf2 //Binary Search\cf0 \
    \cf9 PivotedBinarySearch\cf0 (\cf4 1\cf0 , \cf4 0\cf0 , \cf5 n\cf0 -\cf4 1\cf0 );\
    \cf6 cout\cf0 <<\cf7 "----\\n"\cf0 ;\
    \cf9 BinarySearch\cf0 (\cf4 0\cf0 , \cf5 n\cf0 -\cf4 1\cf0 , \cf4 1\cf0 );\
\}}