{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red92\green38\blue153;\red63\green110\blue116;\red38\green71\blue75;\red46\green13\blue110;\red196\green26\blue22;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 /*\
 We are given total possible page numbers that can be referred. We are also given cache (or memory) size (Number of page frames that cache can hold at a time). The LRU caching scheme is to remove the least recently used frame when the cache is full and a new page is referenced which is not there in cache. Please see the Galvin book for more details (see the LRU page replacement slide here).\
 */\cf0 \
\
\cf3 static\cf0  \cf3 const\cf0  \cf3 int\cf0  size = \cf4 5\cf0 ;\
\cf3 int\cf0  element = \cf4 0\cf0 ;\
\
\cf3 struct\cf0  q\
\{\
    \cf5 string\cf0  data;\
    \cf3 int\cf0  PageNumber;\
    \cf6 q\cf0  *Llink;\
    \cf6 q\cf0  *Rlink;\
\};\
\
\cf2 //Inserting from front\cf0 \
\cf2 //Deleting from back\cf0 \
\cf6 q\cf0  *back = \cf3 new\cf0  \cf6 q\cf0 ;\
\cf6 q\cf0  *front = \cf3 new\cf0  \cf6 q\cf0 ;\
\
\cf5 map\cf0 <\cf3 int\cf0 , \cf6 q\cf0 *> HashTable;\
\cf5 map\cf0 <\cf3 int\cf0 , \cf6 q\cf0 *>::\cf5 iterator\cf0  it;\
\
\cf3 bool\cf0  isFull()\
\{\
    \cf3 if\cf0 (\cf6 element\cf0  == \cf6 size\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0  ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 void\cf0  push(\cf5 string\cf0  data, \cf3 int\cf0  pageNumber)\
\{\
    \cf3 if\cf0 (\cf7 isFull\cf0 ())\
    \{\
        \cf3 return\cf0  ;\
    \}\
    \cf6 element\cf0 ++;\
    \
    \
    \cf3 if\cf0 (\cf6 element\cf0  == \cf4 1\cf0 )\
    \{\
        \cf6 back\cf0 ->\cf6 data\cf0  = data;\
        \cf6 back\cf0 ->\cf6 PageNumber\cf0  = pageNumber;\
        \cf6 back\cf0 ->\cf6 Llink\cf0  = \cf3 NULL\cf0 ;\
        \cf6 back\cf0 ->\cf6 Rlink\cf0  = \cf3 NULL\cf0 ;\
        \cf6 HashTable\cf0 [\cf8 pageNumber\cf0 ] = \cf6 back\cf0 ;\
    \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (\cf6 element\cf0  == \cf4 2\cf0 )\
        \{\
            \cf6 front\cf0 ->\cf6 data\cf0  = data;\
            \cf6 front\cf0 ->\cf6 PageNumber\cf0  = pageNumber;\
            \cf6 front\cf0 ->\cf6 Rlink\cf0  = \cf6 back\cf0 ;\
            \cf6 back\cf0 ->\cf6 Llink\cf0  = \cf6 front\cf0 ;\
            \cf6 front\cf0 ->\cf6 Llink\cf0  = \cf3 NULL\cf0 ;\
            \cf6 HashTable\cf0 [\cf8 pageNumber\cf0 ] = \cf6 front\cf0 ;\
        \}\
    \cf3 else\cf0 \
    \{\
        \cf6 q\cf0  *NewNode;\
        NewNode = \cf3 new\cf0  \cf6 q\cf0 ;\
        NewNode->\cf6 data\cf0  = data;\
        NewNode->\cf6 PageNumber\cf0  = pageNumber;\
        NewNode->\cf6 Llink\cf0  = \cf3 NULL\cf0 ;\
        NewNode->\cf6 Rlink\cf0  = \cf3 NULL\cf0 ;\
        \
        \cf6 front\cf0 ->\cf6 Llink\cf0  = NewNode;\
        NewNode->\cf6 Rlink\cf0  = \cf6 front\cf0 ;\
        \cf6 front\cf0  = NewNode;\
        \
        \cf6 HashTable\cf0 [\cf8 pageNumber\cf0 ] = NewNode;\
    \}\
    \
\}\
\
\cf3 void\cf0  pop()\
\{\
    \cf3 if\cf0 (\cf6 element\cf0  == \cf4 0\cf0 )\
    \{\
        \cf3 return\cf0  ;\
    \}\
    \
    \cf6 element\cf0 --;\
    \cf6 q\cf0  *ptr;\
    ptr = \cf6 back\cf0 ;\
    \cf6 back\cf0  = \cf6 back\cf0 ->\cf6 Llink\cf0 ;\
    \cf6 back\cf0 ->\cf6 Rlink\cf0  = \cf3 NULL\cf0 ;\
    \
    \cf6 HashTable\cf0 .\cf8 erase\cf0 (ptr->\cf6 PageNumber\cf0 );\
    \cf3 delete\cf0  ptr;\
\}\
\
\cf3 void\cf0  display()\
\{\
    \cf3 if\cf0 (\cf6 element\cf0  == \cf4 0\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf9 "Empty \\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf6 q\cf0  *ptr;\
    ptr = \cf6 front\cf0 ;\
    \cf3 while\cf0 (ptr != \cf3 NULL\cf0 )\
    \{\
        \cf5 cout\cf0 <<ptr->\cf6 PageNumber\cf0 <<\cf9 " "\cf0 ;\
        ptr = ptr->\cf6 Rlink\cf0 ;\
    \}\
    \cf5 cout\cf0 <<\cf8 endl\cf0 ;\
    \cf3 for\cf0 (\cf6 it\cf0  = \cf6 HashTable\cf0 .\cf8 begin\cf0 (); \cf6 it\cf0 !=\cf6 HashTable\cf0 .\cf8 end\cf0 (); \cf6 it\cf0 ++)\
    \{\
        \cf5 cout\cf0 <<\cf6 it\cf0 ->\cf5 first\cf0 <<\cf9 " "\cf0 ;\
    \}\
    \cf5 cout\cf0 <<\cf8 endl\cf0 ;\
\}\
\
\cf3 void\cf0  PutInCache(\cf3 int\cf0  pageNumber, \cf5 string\cf0  data)\
\{\
    \cf3 if\cf0 (\cf7 isFull\cf0 ())\
    \{\
        \cf7 pop\cf0 ();\
        \cf7 push\cf0 (data, pageNumber);\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf7 push\cf0 (data, pageNumber);\
    \}\
\}\
\
\cf3 void\cf0  find(\cf3 int\cf0  pageNumber)\
\{\
    \cf3 if\cf0  ( \cf6 HashTable\cf0 .\cf8 find\cf0 (pageNumber) == \cf6 HashTable\cf0 .\cf8 end\cf0 () )\
    \{\
        \cf5 cout\cf0 <<\cf9 "Not Found\\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 cout\cf0 <<\cf6 HashTable\cf0 [\cf8 pageNumber\cf0 ]->\cf6 data\cf0 <<\cf8 endl\cf0 ;\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf7 PutInCache\cf0 (\cf4 1\cf0 , \cf9 "1"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 2\cf0 , \cf9 "2"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 3\cf0 , \cf9 "3"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 4\cf0 , \cf9 "4"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 5\cf0 , \cf9 "5"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 6\cf0 , \cf9 "6"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 7\cf0 , \cf9 "1"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 8\cf0 , \cf9 "2"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 9\cf0 , \cf9 "3"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 10\cf0 , \cf9 "4"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 11\cf0 , \cf9 "5"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 PutInCache\cf0 (\cf4 12\cf0 , \cf9 "yolo"\cf0 );\
    \cf7 display\cf0 ();\
    \cf7 find\cf0 (\cf4 12\cf0 );\
    \cf7 find\cf0 (\cf4 16\cf0 );\
\}}