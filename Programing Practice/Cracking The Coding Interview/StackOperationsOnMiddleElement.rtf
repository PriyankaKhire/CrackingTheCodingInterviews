{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red28\green0\blue207;\red38\green71\blue75;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
 How to implement a stack which will support following operations in O(1) time complexity?\
 1) push() which adds an element to the top of stack.\
 2) pop() which removes an element from top of stack.\
 3) findMiddle() which will return middle element of the stack.\
 4) deleteMiddle() which will delete the middle element.\
 Push and pop are standard stack operations.\
*/\cf0 \
\
\cf3 struct\cf0  LinkedList\
\{\
    \cf3 int\cf0  data;\
    \cf4 LinkedList\cf0  *Rlink;\
    \cf4 LinkedList\cf0  *Llink;\
\};\
\
\cf3 int\cf0  elementCount = \cf5 0\cf0 ;\
\cf4 LinkedList\cf0  *RootNode = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
\cf4 LinkedList\cf0  *MidPointer = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
\
\cf3 bool\cf0  isEmpty()\
\{\
    \cf3 if\cf0 (\cf4 elementCount\cf0  == \cf5 0\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 void\cf0  push(\cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf6 isEmpty\cf0 () == \cf3 true\cf0 )\
    \{\
        \cf4 RootNode\cf0 ->\cf4 data\cf0  = data;\
        \cf4 RootNode\cf0 ->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 Rlink\cf0  = \cf3 NULL\cf0 ;\
        \cf4 elementCount\cf0 ++;\
        \cf4 MidPointer\cf0  = \cf4 RootNode\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 LinkedList\cf0  *NewNode;\
        NewNode = \cf3 new\cf0  \cf4 LinkedList\cf0 ;\
        NewNode->\cf4 data\cf0  = data;\
        NewNode->\cf4 Rlink\cf0  = \cf4 RootNode\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 Llink\cf0  = NewNode;\
        NewNode->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
        \cf4 RootNode\cf0  = NewNode;\
        \cf4 elementCount\cf0 ++;\
        \cf3 if\cf0 (\cf4 elementCount\cf0 %\cf5 2\cf0  == \cf5 0\cf0 )\
        \{\
            \cf2 //Even number of nodes\cf0 \
            \cf2 //Do nothing coz mid pointer remains same\cf0 \
        \}\
        \cf3 else\cf0 \
        \{\
            \cf2 //Odd number of nodes\cf0 \
            \cf2 //Mid Pointer moves to the left\cf0 \
            \cf4 MidPointer\cf0  = \cf4 MidPointer\cf0 ->\cf4 Llink\cf0 ;\
        \}\
    \}\
    \
\}\
\
\cf3 void\cf0  pop()\
\{\
    \cf3 if\cf0 (\cf6 isEmpty\cf0 () == \cf3 true\cf0 )\
    \{\
        \cf7 cout\cf0 <<\cf8 "Empty\\n"\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 data\cf0  = -\cf5 1\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 Rlink\cf0  = \cf3 NULL\cf0 ;\
        \cf4 MidPointer\cf0  = \cf4 RootNode\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 elementCount\cf0 --;\
        \cf3 if\cf0 (\cf4 elementCount\cf0  == \cf5 0\cf0 )\
        \{\
            \cf7 cout\cf0 <<\cf8 "Last Node "\cf0 <<\cf4 RootNode\cf0 ->\cf4 data\cf0 <<\cf8 " popped\\n"\cf0 ;\
            \cf4 RootNode\cf0 ->\cf4 data\cf0  = -\cf5 1\cf0 ;\
            \cf4 RootNode\cf0 ->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
            \cf4 RootNode\cf0 ->\cf4 Rlink\cf0  = \cf3 NULL\cf0 ;\
            \cf4 MidPointer\cf0  = \cf4 RootNode\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf4 LinkedList\cf0  *ptr;\
            ptr = \cf4 RootNode\cf0 ;\
            \cf4 RootNode\cf0  = \cf4 RootNode\cf0 ->\cf4 Rlink\cf0 ;\
            \cf4 RootNode\cf0 ->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
            \cf7 cout\cf0 <<\cf8 "Popped "\cf0 <<ptr->\cf4 data\cf0 <<\cf9 endl\cf0 ;\
            \cf3 delete\cf0  ptr;\
            \cf3 if\cf0 (\cf4 elementCount\cf0 %\cf5 2\cf0  == \cf5 0\cf0 )\
            \{\
                \cf2 //Even number of elements\cf0 \
                \cf2 //Mid Pointer moves to the right\cf0 \
                \cf4 MidPointer\cf0  = \cf4 MidPointer\cf0 ->\cf4 Rlink\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                \cf2 //If odd number of elements\cf0 \
            \}\
        \}\
    \}\
\}\
\
\cf3 void\cf0  findMiddle()\
\{\
    \cf7 cout\cf0 <<\cf8 "Middle element -> "\cf0 <<\cf4 MidPointer\cf0 ->\cf4 data\cf0 <<\cf9 endl\cf0 ;\
\}\
\
\cf3 void\cf0  deleteMiddle()\
\{\
    \cf3 if\cf0 (\cf6 isEmpty\cf0 () == \cf3 true\cf0 )\
    \{\
        \cf7 cout\cf0 <<\cf8 "Empty\\n"\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 data\cf0  = -\cf5 1\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
        \cf4 RootNode\cf0 ->\cf4 Rlink\cf0  = \cf3 NULL\cf0 ;\
        \cf4 MidPointer\cf0  = \cf4 RootNode\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf4 LinkedList\cf0  *ptr;\
        ptr = \cf4 MidPointer\cf0 ;\
        \cf7 cout\cf0 <<\cf8 "Popped mid pointer -> "\cf0 <<ptr->\cf4 data\cf0 <<\cf9 endl\cf0 ;\
        \cf4 elementCount\cf0 --;\
        \cf3 if\cf0 (\cf4 elementCount\cf0 %\cf5 2\cf0  == \cf5 0\cf0 )\
        \{\
            \cf2 //Even so move towards right\cf0 \
            \cf4 MidPointer\cf0  = ptr->\cf4 Rlink\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf2 //Odd so move towards left\cf0 \
            \cf4 MidPointer\cf0  = ptr->\cf4 Llink\cf0 ;\
        \}\
\
        \cf2 //Delete the node\cf0 \
        ptr->\cf4 Llink\cf0 ->\cf4 Rlink\cf0  = ptr->\cf4 Rlink\cf0 ;\
        ptr->\cf4 Rlink\cf0 ->\cf4 Llink\cf0  = ptr->\cf4 Llink\cf0 ;\
        \cf3 delete\cf0  ptr;\
    \}\
    \
\}\
\
\cf3 void\cf0  display()\
\{\
    \cf4 LinkedList\cf0  *ptr;\
    ptr = \cf4 RootNode\cf0 ;\
    \
    \cf3 while\cf0  (ptr != \cf3 NULL\cf0 )\
    \{\
        \cf7 cout\cf0 <<\cf8 "<-| "\cf0 <<ptr->\cf4 data\cf0 <<\cf8 " |->"\cf0 ;\
        ptr = ptr->\cf4 Rlink\cf0 ;\
    \}\
    \cf7 cout\cf0 <<\cf9 endl\cf0 ;\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf4 RootNode\cf0 ->\cf4 data\cf0  = -\cf5 1\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 Llink\cf0  = \cf3 NULL\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 Rlink\cf0  = \cf3 NULL\cf0 ;\
    \cf4 MidPointer\cf0  = \cf4 RootNode\cf0 ;\
    \
    \cf6 push\cf0 (\cf5 1\cf0 );\
    \cf6 push\cf0 (\cf5 2\cf0 );\
    \cf6 push\cf0 (\cf5 3\cf0 );\
    \cf6 push\cf0 (\cf5 4\cf0 );\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 pop\cf0 ();\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 pop\cf0 ();\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 push\cf0 (\cf5 1\cf0 );\
    \cf6 push\cf0 (\cf5 2\cf0 );\
    \cf6 push\cf0 (\cf5 3\cf0 );\
    \cf6 push\cf0 (\cf5 4\cf0 );\
     \cf6 push\cf0 (\cf5 5\cf0 );\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 deleteMiddle\cf0 ();\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 deleteMiddle\cf0 ();\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 deleteMiddle\cf0 ();\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 deleteMiddle\cf0 ();\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \cf6 deleteMiddle\cf0 ();\
    \cf6 display\cf0 ();\
    \cf6 findMiddle\cf0 ();\
    \
\}}