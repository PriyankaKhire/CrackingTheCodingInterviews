{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red92\green38\blue153;\red170\green13\blue145;
\red63\green110\blue116;\red46\green13\blue110;\red196\green26\blue22;\red38\green71\blue75;\red28\green0\blue207;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
Implement Stack using Queues\
 \
 push:\
 enqueue in queue1\
 \
 pop:\
 while size of queue1 is bigger than 1, pipe dequeued items from queue1 into queue2\
 dequeue and return the last item of queue1, \
 then switch the names of queue1 and queue2\
 */\cf0 \
\
\cf3 queue\cf0 <\cf4 int\cf0 > q1,q2;\
\cf4 bool\cf0  changeOfName = \cf4 false\cf0 ;\
\
\cf4 void\cf0  push(\cf4 int\cf0  data)\
\{\
    \cf4 if\cf0 (\cf5 changeOfName\cf0  == \cf4 false\cf0 )\
    \{\
        \cf5 q1\cf0 .\cf6 push\cf0 (data);\
    \}\
    \cf4 else\cf0 \
    \{\
        \cf5 q2\cf0 .\cf6 push\cf0 (data);\
    \}\
\}\
\
\cf4 void\cf0  pop()\
\{\
    \cf4 if\cf0 (\cf5 changeOfName\cf0  == \cf4 false\cf0 )\{\
        \cf4 while\cf0 (!\cf5 q1\cf0 .\cf6 empty\cf0 ())\
        \{\
            \cf4 int\cf0  front = \cf5 q1\cf0 .\cf6 front\cf0 ();\
            \cf5 q1\cf0 .\cf6 pop\cf0 ();\
            \cf4 if\cf0 (\cf5 q1\cf0 .\cf6 empty\cf0 ())\
            \{\
                \cf3 cout\cf0 <<\cf7 "Popped "\cf0 <<front<<\cf6 endl\cf0 ;\
                \cf5 changeOfName\cf0  = \cf4 true\cf0 ;\
                \cf4 return\cf0 ;\
            \}\
            \cf4 else\cf0 \
            \{\
                \cf5 q2\cf0 .\cf6 push\cf0 (front);\
            \}\
        \}\
    \}\
    \cf4 else\cf0 \
    \{\
        \cf4 while\cf0 (!\cf5 q2\cf0 .\cf6 empty\cf0 ())\
        \{\
            \cf4 int\cf0  front = \cf5 q2\cf0 .\cf6 front\cf0 ();\
            \cf5 q2\cf0 .\cf6 pop\cf0 ();\
            \cf4 if\cf0 (\cf5 q2\cf0 .\cf6 empty\cf0 ())\
            \{\
                \cf3 cout\cf0 <<\cf7 "Popped "\cf0 <<front<<\cf6 endl\cf0 ;\
                \cf5 changeOfName\cf0  = \cf4 false\cf0 ;\
                \cf4 return\cf0 ;\
            \}\
            \cf4 else\cf0 \
            \{\
                \cf5 q1\cf0 .\cf6 push\cf0 (front);\
            \}\
        \}\
    \}\
\}\
\
\cf3 stack\cf0 <\cf4 int\cf0 > stk;\
\
\cf4 int\cf0  main()\
\{\
    \cf8 push\cf0 (\cf9 1\cf0 );\
    \cf5 stk\cf0 .\cf6 push\cf0 (\cf9 1\cf0 );\
    \cf8 push\cf0 (\cf9 2\cf0 );\
    \cf5 stk\cf0 .\cf6 push\cf0 (\cf9 2\cf0 );\
    \cf8 push\cf0 (\cf9 3\cf0 );\
    \cf5 stk\cf0 .\cf6 push\cf0 (\cf9 3\cf0 );\
    \cf8 pop\cf0 ();\
    \cf3 cout\cf0 <<\cf7 "Popped "\cf0 <<\cf5 stk\cf0 .\cf6 top\cf0 ()<<\cf6 endl\cf0 ;\
    \cf5 stk\cf0 .\cf6 pop\cf0 ();\
    \cf8 pop\cf0 ();\
    \cf3 cout\cf0 <<\cf7 "Popped "\cf0 <<\cf5 stk\cf0 .\cf6 top\cf0 ()<<\cf6 endl\cf0 ;\
    \cf5 stk\cf0 .\cf6 pop\cf0 ();\
    \cf8 pop\cf0 ();\
    \cf3 cout\cf0 <<\cf7 "Popped "\cf0 <<\cf5 stk\cf0 .\cf6 top\cf0 ()<<\cf6 endl\cf0 ;\
    \cf5 stk\cf0 .\cf6 pop\cf0 ();\
\}\
\
\cf2 // Remember while implementing queue with 2 stacks ONLY pop stack1 when stack2 is fully empty}