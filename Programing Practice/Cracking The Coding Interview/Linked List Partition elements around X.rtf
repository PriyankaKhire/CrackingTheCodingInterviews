{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red28\green0\blue207;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\
\cf2 /*\
 Write code to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x.\
 */\cf0 \
\cf3 struct\cf0  Node\
\{\
    \cf3 int\cf0  data;\
    \cf4 Node\cf0  *link;\
\};\
\
\cf4 Node\cf0  *RootNode = \cf3 new\cf0  \cf4 Node\cf0 ;\
\
\
\cf3 void\cf0  insertFront(\cf3 int\cf0  data)\
\{\
        \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
        \{\
            \cf4 RootNode\cf0 ->\cf4 data\cf0  = data;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf4 Node\cf0  *NewNode;\
            NewNode = \cf3 new\cf0  \cf4 Node\cf0 ;\
            \
            NewNode->\cf4 data\cf0  = data;\
            NewNode->\cf4 link\cf0  = \cf4 RootNode\cf0 ;\
            \
            \cf4 RootNode\cf0  = NewNode;\
        \}\
        \
\}\
\
\cf3 void\cf0  PrintLinkedList()\
\{\
    \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0  && \cf4 RootNode\cf0 ->\cf4 data\cf0  == \cf5 0\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Linked list is empty \\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
        \cf3 if\cf0 (\cf4 RootNode\cf0 ->\cf4 data\cf0  !=\cf5 0\cf0  && \cf4 RootNode\cf0 ->\cf4 link\cf0  == \cf3 NULL\cf0 )\
        \{\
            \cf6 cout\cf0 <<\cf7 "Only root node is filled and the data is "\cf0 <<\cf4 RootNode\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf4 Node\cf0  *Pointer;\
            Pointer = \cf4 RootNode\cf0 ;\
            \
            \cf3 while\cf0 (Pointer != \cf3 NULL\cf0 )\
            \{\
                \cf6 cout\cf0 <<\cf7 "|"\cf0 <<Pointer->\cf4 data\cf0 <<\cf7 "|-->"\cf0 ;\
                Pointer = Pointer->\cf4 link\cf0 ;\
            \}\
        \}\
\}\
\
\
\
\cf3 int\cf0  main()\
\{\
    \cf2 //Initialise root node\cf0 \
    \cf4 RootNode\cf0 ->\cf4 data\cf0  = \cf5 0\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 link\cf0  = \cf3 NULL\cf0 ;\
    \
    \cf3 char\cf0  choice;\
    \cf3 int\cf0  data;\
    \
    \cf6 cout\cf0 <<\cf7 "Would you like to add items at front in linked list > (y/n) \\n"\cf0 ;\
    \cf6 cin\cf0 >>choice;\
    \cf3 while\cf0 (choice == \cf5 'y'\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Enter data \\n"\cf0 ;\
        \cf6 cin\cf0 >>data;\
        \cf9 insertFront\cf0 (data);\
        \
        \cf6 cout\cf0 <<\cf7 "Would you like to insert more ? (y/n) \\n"\cf0 ;\
        \cf6 cin\cf0 >>choice;\
        \
    \}\
\
    \cf9 PrintLinkedList\cf0 ();\
    \cf6 cout\cf0 <<\cf8 endl\cf0 ;\
    \
    \cf3 int\cf0  x;\
    \cf6 cout\cf0 <<\cf7 "Enter the value of x \\n"\cf0 ;\
    \cf6 cin\cf0 >>x;\
    \
    \cf2 //Start traversing the linked list\cf0 \
    \cf4 Node\cf0  *Ptr, *PrevPtr;\
    Ptr = \cf4 RootNode\cf0 ;\
    PrevPtr = Ptr;\
    \cf3 while\cf0  (Ptr != \cf3 NULL\cf0 ) \{\
        \cf3 if\cf0 (Ptr->\cf4 data\cf0  < x)\
        \{\
            \cf2 //Take that node and remove it from the original position\cf0 \
            \cf3 if\cf0 (Ptr == \cf4 RootNode\cf0 )\
            \{\
                PrevPtr = Ptr;\
                Ptr = Ptr->\cf4 link\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
            PrevPtr->\cf4 link\cf0  = Ptr->\cf4 link\cf0 ;\
            Ptr->\cf4 link\cf0  = \cf4 RootNode\cf0 ;\
            \cf4 RootNode\cf0  = Ptr;\
            Ptr = PrevPtr->\cf4 link\cf0 ;\
            \}\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf2 // if ptr->data >= x\cf0 \
            PrevPtr = Ptr;\
            Ptr = Ptr->\cf4 link\cf0 ;\
        \}\
    \}\
    \
    \cf9 PrintLinkedList\cf0 ();\
    \
\}}