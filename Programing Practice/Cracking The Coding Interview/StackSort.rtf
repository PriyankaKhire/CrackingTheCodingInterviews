{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red92\green38\blue153;\red170\green13\blue145;
\red63\green110\blue116;\red46\green13\blue110;\red196\green26\blue22;\red38\green71\blue75;\red28\green0\blue207;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
Write a program to sort a stack in ascending order (with biggest items on top). You may use at most one additional stack to hold items, but you may not copy the elements into any other data structure (such as an array). The stack supports the following operations: push, pop, peek, and isEmpty.\
 */\cf0 \
\
\cf3 stack\cf0 <\cf4 int\cf0 > S1;\
\cf3 stack\cf0 <\cf4 int\cf0 > S2;\
\
\cf4 void\cf0  push(\cf4 int\cf0  data)\
\{\
    \cf2 //If stack empty\cf0 \
    \cf4 if\cf0 (\cf5 S1\cf0 .\cf6 empty\cf0 ())\
    \{\
        \cf5 S1\cf0 .\cf6 push\cf0 (data);\
    \}\
    \cf4 else\cf0 \
    \{\
        \cf4 while\cf0 (!\cf5 S1\cf0 .\cf6 empty\cf0 ())\
        \{\
            \cf4 if\cf0 (\cf5 S1\cf0 .\cf6 top\cf0 () > data)\
            \{\
                \cf4 int\cf0  top = \cf5 S1\cf0 .\cf6 top\cf0 ();\
                \cf5 S1\cf0 .\cf6 pop\cf0 ();\
                \cf5 S2\cf0 .\cf6 push\cf0 (top);\
            \}\
            \cf4 else\cf0 \
            \{\
                \cf4 break\cf0 ;\
            \}\
        \}\
        \cf5 S1\cf0 .\cf6 push\cf0 (data);\
        \cf4 while\cf0  (!\cf5 S2\cf0 .\cf6 empty\cf0 ())\
        \{\
            \cf4 int\cf0  top = \cf5 S2\cf0 .\cf6 top\cf0 ();\
            \cf5 S2\cf0 .\cf6 pop\cf0 ();\
            \cf5 S1\cf0 .\cf6 push\cf0 (top);\
        \}\
    \}\
\}\
\
\cf4 void\cf0  pop()\
\{\
    \cf4 int\cf0  top = \cf5 S1\cf0 .\cf6 top\cf0 ();\
    \cf3 cout\cf0 <<\cf7 "Popped "\cf0 <<top<<\cf6 endl\cf0 ;\
    \cf5 S1\cf0 .\cf6 pop\cf0 ();\
\}\
\
\
\cf4 int\cf0  main()\
\{\
    \cf8 push\cf0 (\cf9 5\cf0 );\
    \cf8 push\cf0 (\cf9 1\cf0 );\
    \cf8 push\cf0 (\cf9 8\cf0 );\
    \cf8 push\cf0 (\cf9 7\cf0 );\
    \cf8 push\cf0 (\cf9 3\cf0 );\
    \
    \cf4 while\cf0  (!\cf5 S1\cf0 .\cf6 empty\cf0 ())\
    \{\
        \cf4 int\cf0  top = \cf5 S1\cf0 .\cf6 top\cf0 ();\
        \cf3 cout\cf0 <<top<<\cf6 endl\cf0 ;\
        \cf5 S1\cf0 .\cf6 pop\cf0 ();\
    \}\
\}
\f1\fs24 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf3 \CocoaLigature0 stack\cf0 <\cf4 int\cf0 > s1;\
\cf3 stack\cf0 <\cf4 int\cf0 > s2;\
\
\cf4 void\cf0  SortStack()\
\{\
    \cf4 int\cf0  temp;\
    \cf4 while\cf0 (!\cf5 s1\cf0 .\cf6 empty\cf0 ())\
    \{\
       \cf2 //top element of s2 is greater than s1 top element\cf0 \
        temp = \cf5 s1\cf0 .\cf6 top\cf0 ();\
        \cf5 s1\cf0 .\cf6 pop\cf0 ();\
        \
          \cf4 while\cf0 (\cf5 s2\cf0 .\cf6 top\cf0 () > temp)\
          \{\
              \cf4 int\cf0  t = \cf5 s2\cf0 .\cf6 top\cf0 ();\
              \cf5 s2\cf0 .\cf6 pop\cf0 ();\
              \cf5 s1\cf0 .\cf6 push\cf0 (t);\
          \}\
        \cf5 s2\cf0 .\cf6 push\cf0 (temp);\
        \cf4 while\cf0 (\cf5 s2\cf0 .\cf6 top\cf0 () < \cf5 s1\cf0 .\cf6 top\cf0 ())\
        \{\
            \cf4 int\cf0  t = \cf5 s1\cf0 .\cf6 top\cf0 ();\
            \cf5 s1\cf0 .\cf6 pop\cf0 ();\
            \cf5 s2\cf0 .\cf6 push\cf0 (t);\
        \}\
    \cf2 //SortStack();\cf0 \
    \}\
    \cf4 return\cf0 ;\
\}\
\
\cf4 int\cf0  main()\
\{\
    \
    \cf5 s1\cf0 .\cf6 push\cf0 (\cf9 20\cf0 );\
    \cf5 s1\cf0 .\cf6 push\cf0 (\cf9 10\cf0 );\
    \cf5 s1\cf0 .\cf6 push\cf0 (\cf9 80\cf0 );\
    \cf5 s1\cf0 .\cf6 push\cf0 (\cf9 30\cf0 );\
    \
    \cf2 //For the very first element\cf0 \
    \cf4 int\cf0  element = \cf5 s1\cf0 .\cf6 top\cf0 ();\
    \cf5 s1\cf0 .\cf6 pop\cf0 ();\
    \cf5 s2\cf0 .\cf6 push\cf0 (element);\
    \cf8 SortStack\cf0 ();\
    \
\}\
\
\
stack1     stack2\
|_4_|       |_|\
|_9_|       |_|\
|_2_|       |_|\
|_8_|       |_|\
|_1_|       |_|\
\
|___|       |___|\
|_9_|       |___|\
|_2_|       |___|\
|_8_|       |___|\
|_1_|       |_4_|\
\
compare stack1 top with stack2 top\
if stack1top < stack2top\
hold stack1top in temp \
while(temp <stack2top)\
\{\
pop all elements from s2\
and push it in s1\
\}\
s2.push(temp)\
while(stack1 != Empty && s2.top < s1.top)\
\{\
push back all elements greater than s2top from s1 back into s2\
\}}