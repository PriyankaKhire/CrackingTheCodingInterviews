{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red63\green110\blue116;\red92\green38\blue153;\red196\green26\blue22;\red38\green71\blue75;\red46\green13\blue110;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\
\cf2 // Describe how you could usea single array to implement three stacks.\cf0 \
\
\cf3 static\cf0  \cf3 const\cf0  \cf3 int\cf0  size = \cf4 15\cf0 ;\
\cf3 int\cf0  stack[\cf5 size\cf0 ];\
\cf3 int\cf0  top1 = \cf4 0\cf0 ;\
\cf3 int\cf0  top2 = \cf4 5\cf0 ;\
\cf3 int\cf0  top3 = \cf4 10\cf0 ;\
\
\cf3 int\cf0  getStackNumber(\cf3 int\cf0  stackNumber, \cf6 string\cf0  insORdel)\
\{\
    \cf3 if\cf0 (stackNumber == \cf4 1\cf0 )\
    \{\
        \cf3 if\cf0 (\cf5 top1\cf0  == \cf4 5\cf0 )\
        \{\
            \cf2 //Stack1 full for insertion\cf0 \
            \cf3 if\cf0 (insORdel == \cf7 "ins"\cf0 )\
            \{\
                \cf3 return\cf0  -\cf4 1\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                \cf3 return\cf0  \cf5 top1\cf0 ;\
            \}\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (\cf5 top1\cf0  == \cf4 0\cf0 )\
            \{\
                \cf2 //Stack empty for deletion\cf0 \
                \cf3 if\cf0 (insORdel == \cf7 "del"\cf0 )\
                \{\
                    \cf3 return\cf0  -\cf4 1\cf0 ;\
                \}\
                \cf3 else\cf0 \
                \{\
                    \cf3 return\cf0  \cf5 top1\cf0 ;\
                \}\
            \}\
        \cf3 else\cf0 \
            \cf3 return\cf0  \cf5 top1\cf0 ;\
        \
    \}\
    \cf3 else\cf0  \cf3 if\cf0 (stackNumber == \cf4 2\cf0 )\
    \{\
        \cf3 if\cf0 (\cf5 top2\cf0  == \cf4 10\cf0 )\
        \{\
            \cf2 //Stack2 full for insertion\cf0 \
            \cf3 if\cf0 (insORdel == \cf7 "ins"\cf0 )\
            \{\
                \cf3 return\cf0  -\cf4 1\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                \cf3 return\cf0  \cf5 top2\cf0 ;\
            \}\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (\cf5 top2\cf0  == \cf4 0\cf0 )\
            \{\
                \cf2 //Stack2 empty for deletion\cf0 \
                \cf3 if\cf0 (insORdel == \cf7 "del"\cf0 )\
                \{\
                    \cf3 return\cf0  -\cf4 1\cf0 ;\
                \}\
                \cf3 else\cf0 \
                \{\
                    \cf3 return\cf0  \cf5 top2\cf0 ;\
                \}\
            \}\
            \cf3 else\cf0 \
                \cf3 return\cf0  \cf5 top2\cf0 ;\
    \}\
    \cf3 else\cf0  \cf3 if\cf0 (stackNumber == \cf4 3\cf0 )\
    \{\
        \cf3 if\cf0 (\cf5 top3\cf0  == \cf5 size\cf0 )\
        \{\
            \cf2 //Stack3 full for insertion\cf0 \
            \cf3 if\cf0 (insORdel == \cf7 "ins"\cf0 )\
            \{\
                \cf3 return\cf0  -\cf4 1\cf0 ;\
            \}\
            \cf3 else\cf0 \
            \{\
                \cf3 return\cf0  \cf5 top3\cf0 ;\
            \}\
        \}\
        \cf3 else\cf0 \
            \cf3 if\cf0 (\cf5 top3\cf0  == \cf4 0\cf0 )\
            \{\
                \cf2 //Stack3 empty for deletion\cf0 \
                \cf3 if\cf0 (insORdel == \cf7 "del"\cf0 )\
                \{\
                    \cf3 return\cf0  -\cf4 1\cf0 ;\
                \}\
                \cf3 else\cf0 \
                \{\
                    \cf3 return\cf0  \cf5 top3\cf0 ;\
                \}\
            \}\
            \cf3 else\cf0 \
                \cf3 return\cf0  \cf5 top3\cf0 ;\
    \}\
    \cf3 else\cf0 \
        \cf3 return\cf0  -\cf4 1\cf0 ;\
\}\
\
\cf3 void\cf0  setStackNumber(\cf3 int\cf0  stackNumber, \cf3 int\cf0  top)\
\{\
    \cf3 if\cf0 (stackNumber == \cf4 1\cf0 )\
    \{\
        \cf5 top1\cf0  = top;\
    \}\
    \cf3 else\cf0  \cf3 if\cf0 (stackNumber == \cf4 2\cf0 )\
    \{\
        \cf5 top2\cf0  = top;\
    \}\
    \cf3 else\cf0  \cf3 if\cf0 (stackNumber == \cf4 3\cf0 )\
    \{\
        \cf5 top3\cf0  = top;\
    \}\
\
\}\
\
\cf3 void\cf0  push(\cf3 int\cf0  data, \cf3 int\cf0  stackNumber)\
\{\
    \cf3 int\cf0  top;\
    \
    top = \cf8 getStackNumber\cf0 (stackNumber, \cf7 "ins"\cf0 );\
    \
    \cf3 if\cf0 (top == -\cf4 1\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Stack full\\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 stack\cf0 [top] = data;\
        top++;\
        \cf8 setStackNumber\cf0 (stackNumber, top);\
    \}\
    \
    \
\}\
\
\cf3 void\cf0  pop(\cf3 int\cf0  stackNumber)\
\{\
    \cf3 int\cf0  top;\
    top = \cf8 getStackNumber\cf0 (stackNumber, \cf7 "del"\cf0 );\
    \cf3 if\cf0 (top == -\cf4 1\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "stack empty\\n"\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        top--;\
        \cf6 cout\cf0 <<\cf7 "Deleted item "\cf0 <<\cf5 stack\cf0 [top];\
        \cf5 stack\cf0 [top]=\cf4 0\cf0 ;\
        \cf8 setStackNumber\cf0 (stackNumber, top);\
    \}\
\}\
\
\cf3 void\cf0  disp()\
\{\
    \cf2 //Stack1\cf0 \
    \cf6 cout\cf0 <<\cf7 "Stack1\\n"\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf5 top1\cf0 -\cf4 1\cf0 ; i>=\cf4 0\cf0 ; i--)\
    \{\
        \cf6 cout\cf0 <<\cf7 "|"\cf0 <<\cf5 stack\cf0 [i]<<\cf7 "|"\cf0 <<\cf9 endl\cf0 <<\cf7 "--"\cf0 <<\cf9 endl\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf9 endl\cf0 ;\
    \cf2 //Stack2\cf0 \
    \cf6 cout\cf0 <<\cf7 "Stack2\\n"\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf5 top2\cf0 -\cf4 1\cf0 ; i>=\cf4 5\cf0 ; i--)\
    \{\
        \cf6 cout\cf0 <<\cf7 "|"\cf0 <<\cf5 stack\cf0 [i]<<\cf7 "|"\cf0 <<\cf9 endl\cf0 <<\cf7 "--"\cf0 <<\cf9 endl\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf9 endl\cf0 ;\
    \cf2 //Stack3\cf0 \
    \cf6 cout\cf0 <<\cf7 "Stack3\\n"\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf5 top3\cf0 -\cf4 1\cf0 ; i>=\cf4 10\cf0 ; i--)\
    \{\
        \cf6 cout\cf0 <<\cf7 "|"\cf0 <<\cf5 stack\cf0 [i]<<\cf7 "|"\cf0 <<\cf9 endl\cf0 <<\cf7 "--"\cf0 <<\cf9 endl\cf0 ;\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf8 push\cf0 (\cf4 1\cf0 , \cf4 1\cf0 );\
    \cf8 push\cf0 (\cf4 2\cf0 , \cf4 1\cf0 );\
    \cf8 push\cf0 (\cf4 3\cf0 , \cf4 1\cf0 );\
    \cf8 push\cf0 (\cf4 4\cf0 , \cf4 1\cf0 );\
    \cf8 push\cf0 (\cf4 5\cf0 , \cf4 1\cf0 );\
    \cf8 push\cf0 (\cf4 1\cf0 , \cf4 2\cf0 );\
    \cf8 push\cf0 (\cf4 2\cf0 , \cf4 2\cf0 );\
    \cf8 push\cf0 (\cf4 3\cf0 , \cf4 2\cf0 );\
    \cf8 push\cf0 (\cf4 4\cf0 , \cf4 2\cf0 );\
    \cf8 push\cf0 (\cf4 5\cf0 , \cf4 2\cf0 );\
    \cf8 push\cf0 (\cf4 1\cf0 , \cf4 3\cf0 );\
    \cf8 push\cf0 (\cf4 2\cf0 , \cf4 3\cf0 );\
    \cf8 push\cf0 (\cf4 3\cf0 , \cf4 3\cf0 );\
    \cf8 push\cf0 (\cf4 4\cf0 , \cf4 3\cf0 );\
    \cf8 push\cf0 (\cf4 5\cf0 , \cf4 3\cf0 );\
    \cf8 disp\cf0 ();\
    \cf8 pop\cf0 (\cf4 1\cf0 );\
    \cf8 pop\cf0 (\cf4 2\cf0 );\
    \cf8 pop\cf0 (\cf4 3\cf0 );\
    \cf8 disp\cf0 ();\
    \cf8 pop\cf0 (\cf4 1\cf0 );\
    \cf8 pop\cf0 (\cf4 2\cf0 );\
    \cf8 pop\cf0 (\cf4 3\cf0 );\
    \cf8 disp\cf0 ();\
    \
\}\
}