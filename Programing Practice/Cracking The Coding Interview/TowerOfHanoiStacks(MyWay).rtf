{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red0\green116\blue0;
\red92\green38\blue153;\red63\green110\blue116;\red38\green71\blue75;\red196\green26\blue22;\red46\green13\blue110;
}
\paperw11905\paperh16837\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 class\cf0  Tower\
\{\
\cf2 private\cf0 :\
    \cf2 int\cf0  Stack[\cf3 5\cf0 ]; \cf4 //Just assume that this stack can fit in only 5 discs\cf0 \
    \cf5 string\cf0  NameOfTower;\
    \cf2 int\cf0  Top = \cf3 0\cf0 ;\
\cf2 public\cf0 :\
    \cf2 void\cf0  push(\cf2 int\cf0  item)\
    \{\
        \cf6 Stack\cf0 [\cf6 Top\cf0 ] = item; \cf4 //Not applying the edge conditions\cf0 \
        \cf6 Top\cf0 ++;\
    \}\
    \
    \cf2 int\cf0  pop()\
    \{\
        \cf6 Top\cf0 --;\
        \cf2 return\cf0  \cf6 Stack\cf0 [\cf6 Top\cf0 ];\
        \cf6 Stack\cf0 [\cf6 Top\cf0 ] = \cf3 0\cf0 ;\
    \}\
    \
    \cf2 bool\cf0  empty() \cf4 //To see if the tower stack is empty or not\cf0 \
    \{\
        \cf2 if\cf0 (\cf6 Top\cf0  == \cf3 0\cf0 )\
        \{\
            \cf2 return\cf0  \cf2 true\cf0 ;\
        \}\
        \cf2 else\cf0 \
            \cf2 return\cf0  \cf2 false\cf0 ;\
    \}\
    \
    Tower(\cf2 int\cf0  NumberOfDiscs, \cf5 string\cf0  NameOfTheCurrentTower)\
    \{\
        \cf2 for\cf0 (\cf2 int\cf0  i = NumberOfDiscs; i>\cf3 0\cf0 ; i--)\
        \{\
            \cf7 push\cf0 (i);\
        \}\
        \
        \cf6 NameOfTower\cf0  = NameOfTheCurrentTower;\
    \}\
    \
    \
    \cf2 void\cf0  DisplayContentsOfTower()\
    \{\
        \cf2 for\cf0 (\cf2 int\cf0  i = \cf6 Top\cf0 -\cf3 1\cf0 ; i >= \cf3 0\cf0 ; i--)\
        \{\
            \cf2 for\cf0 (\cf2 int\cf0  j = \cf3 0\cf0 ; j < \cf6 Stack\cf0 [i]; j++)\
            \{\
                \cf5 cout\cf0 <<\cf8 "-"\cf0 ;\
            \}\
            \cf5 cout\cf0 <<\cf9 endl\cf0 ;\
        \}\
    \}\
    \
    \cf2 friend\cf0  \cf2 void\cf0  MoveTopDisc(Tower &Source, Tower &Destination);\
\};\
\
\cf2 void\cf0  MoveTopDisc(\cf6 Tower\cf0  &Source, \cf6 Tower\cf0  &Destination)\
\{\
    \cf2 if\cf0 (!Source.\cf7 empty\cf0 ())\
    \{\
        \cf2 int\cf0  temp;\
        temp = Source.\cf7 pop\cf0 ();\
        Destination.\cf7 push\cf0 (temp);\
        \cf5 cout\cf0 <<\cf8 "Disc "\cf0 <<temp<<\cf8 " Moved from "\cf0 <<Source.\cf6 NameOfTower\cf0 <<\cf8 " to "\cf0 <<Destination.\cf6 NameOfTower\cf0 <<\cf9 endl\cf0 ;\
    \}\
\}\
\
\cf2 void\cf0  hanoi(\cf2 int\cf0  n, \cf6 Tower\cf0  &Src, \cf6 Tower\cf0  &Temp, \cf6 Tower\cf0  &Dest)\
\{\
    \cf7 hanoi\cf0 (n-\cf3 1\cf0 , Src, Dest, Temp);\
    \cf7 MoveTopDisc\cf0 (Src, Dest);\
    \cf7 hanoi\cf0 (n-\cf3 1\cf0 , Temp, Src, Dest);\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf6 Tower\cf0  Src(\cf3 3\cf0 , \cf8 "Source"\cf0 );\
    \cf6 Tower\cf0  Temp(\cf3 0\cf0 , \cf8 "Temporary"\cf0 );\
    \cf6 Tower\cf0  Dest(\cf3 0\cf0 , \cf8 "Destination"\cf0 );\
    \
    \cf7 hanoi\cf0 (\cf3 3\cf0 , Src, Temp, Dest);\
\
    \
\}\
\
\
==================================================================================================================================================================\
\
\
\cf5 stack\cf0 <\cf2 int\cf0 >src;\
\cf5 stack\cf0 <\cf2 int\cf0 >temp;\
\cf5 stack\cf0 <\cf2 int\cf0 >dest;\
\
\cf2 void\cf0  move(\cf2 char\cf0  s, \cf2 char\cf0  d)\
\{\
    \cf2 int\cf0  top=\cf3 0\cf0 ;\
    \cf2 if\cf0 (s == \cf3 's'\cf0 )\
    \{\
        top = \cf6 src\cf0 .\cf9 top\cf0 ();\
        \cf5 cout\cf0 <<\cf8 "Popping "\cf0 <<top<<\cf8 " from Source stack \\n"\cf0 ;\
        \cf6 src\cf0 .\cf9 pop\cf0 ();\
    \}\
    \cf2 if\cf0 (s == \cf3 't'\cf0 )\
    \{\
        top = \cf6 temp\cf0 .\cf9 top\cf0 ();\
        \cf5 cout\cf0 <<\cf8 "Popping "\cf0 <<top<<\cf8 " from Temporary stack \\n"\cf0 ;\
        \cf6 temp\cf0 .\cf9 pop\cf0 ();\
    \}\
    \cf2 if\cf0 (s == \cf3 'd'\cf0 )\
    \{\
        top = \cf6 dest\cf0 .\cf9 top\cf0 ();\
        \cf5 cout\cf0 <<\cf8 "Popping "\cf0 <<top<<\cf8 " from Destination stack \\n"\cf0 ;\
        \cf6 dest\cf0 .\cf9 pop\cf0 ();\
    \}\
    \cf2 if\cf0 (d == \cf3 's'\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf8 "Pushing "\cf0 <<top<<\cf8 " to Source stack \\n"\cf0 ;\
        \cf6 src\cf0 .\cf9 push\cf0 (top);\
    \}\
    \cf2 if\cf0 (d == \cf3 't'\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf8 "Pushing "\cf0 <<top<<\cf8 " to Temporary stack \\n"\cf0 ;\
        \cf6 temp\cf0 .\cf9 push\cf0 (top);\
    \}\
    \cf2 if\cf0 (d == \cf3 'd'\cf0 )\
    \{\
        \cf5 cout\cf0 <<\cf8 "Pushing "\cf0 <<top<<\cf8 " to Destination stack \\n"\cf0 ;\
        \cf6 dest\cf0 .\cf9 push\cf0 (top);\
    \}\
\}\
\
\cf2 void\cf0  hanoi(\cf2 int\cf0  n,\cf2 char\cf0  s, \cf2 char\cf0  t, \cf2 char\cf0  d)\
\{\
    \cf2 if\cf0 (n > \cf3 0\cf0 )\
    \{\
        \cf7 hanoi\cf0 (n-\cf3 1\cf0 , s, d, t);\
        \cf7 move\cf0 (s,d);\
        \cf7 hanoi\cf0 (n-\cf3 1\cf0 , t, s, d);\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf2 return\cf0 ;\
    \}\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf5 cout\cf0 <<\cf8 "Pushing in Source Stack\\n"\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 3\cf0 ; i >\cf3 0\cf0 ; i--)\
    \{\
        \cf5 cout\cf0 <<\cf8 "Pushing "\cf0 <<i<<\cf9 endl\cf0 ;\
        \cf6 src\cf0 .\cf9 push\cf0 (i);\
    \}\
    \cf5 cout\cf0 <<\cf9 endl\cf0 ;\
    \cf2 char\cf0  s = \cf3 's'\cf0 , t = \cf3 't'\cf0 , d = \cf3 'd'\cf0 ;\
    \cf7 hanoi\cf0 (\cf3 3\cf0 ,s,t,d);\
    \cf5 cout\cf0 <<\cf8 "\\nContents of Destination Stack\\n"\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf3 3\cf0 ; i++)\
    \{\
        \cf5 cout\cf0 <<\cf6 dest\cf0 .\cf9 top\cf0 ()<<\cf8 " \\n"\cf0 ;\
        \cf6 dest\cf0 .\cf9 pop\cf0 ();\
    \}\
\}}