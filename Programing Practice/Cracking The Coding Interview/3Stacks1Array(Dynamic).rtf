{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red63\green110\blue116;
\red0\green116\blue0;\red92\green38\blue153;\red196\green26\blue22;\red38\green71\blue75;\red46\green13\blue110;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 static\cf0  \cf2 const\cf0  \cf2 int\cf0  n = \cf3 9\cf0 ;\
\cf2 int\cf0  stack[\cf4 n\cf0 ];\
\cf2 int\cf0  c = \cf3 0\cf0 ; \cf5 //To see how many elements in the stack on total\cf0 \
\
\cf2 int\cf0  st1 = \cf3 0\cf0 ;   \cf5 // |_|_|_|_|_|_|_|_|_|\cf0 \
\cf2 int\cf0  st2 = \cf4 n\cf0 /\cf3 3\cf0 ; \cf5 //  ^     ^         ^\cf0 \
\cf2 int\cf0  st3 = \cf4 n\cf0 -\cf3 1\cf0 ; \cf5 //  |     |         |\cf0 \
               \cf5 // st1   st2       st3\cf0 \
\cf2 int\cf0  st1start = \cf3 0\cf0 ;\
\cf2 int\cf0  st2start = \cf4 n\cf0 /\cf3 3\cf0 ;\
\cf2 int\cf0  st3start = \cf4 n\cf0 -\cf3 1\cf0 ;\
\
\cf2 void\cf0  shiftStack2(\cf2 int\cf0  spaces)\
\{\
    \cf2 int\cf0  saveptr = \cf4 st2\cf0 +spaces;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i <= spaces; i++)\
    \{\
        \cf4 stack\cf0 [\cf4 st2\cf0 +spaces] = \cf4 stack\cf0 [\cf4 st2\cf0 ];\
        \cf4 stack\cf0 [\cf4 st2\cf0 ] = \cf3 0\cf0 ; \cf5 //clear out that space\cf0 \
        \cf4 st2\cf0 --;\
    \}\
    \cf5 //update the start of stack 2\cf0 \
    \cf4 st2start\cf0  = \cf4 st2\cf0 +spaces;\
    \cf4 st2\cf0  = saveptr+\cf3 1\cf0 ;\
\}\
\
\cf2 void\cf0  shiftStack2Forward(\cf2 int\cf0  space)\
\{\
    \cf2 int\cf0  newstack2start = \cf4 st2start\cf0 -space;\
    \cf2 int\cf0  elements = \cf4 st2\cf0 -\cf4 st2start\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf3 0\cf0 ; i <= space; i++)\
    \{\
        \cf4 stack\cf0 [\cf4 st2\cf0 -space] = \cf4 stack\cf0 [\cf4 st2start\cf0 ];\
        \cf4 stack\cf0 [\cf4 st2start\cf0 ] = \cf3 0\cf0 ;\
        \cf4 st2start\cf0 ++;\
    \}\
    \cf5 //update\cf0 \
    \cf4 st2start\cf0  = newstack2start;\
    \cf4 st2\cf0  = \cf4 st2\cf0 -space;\
\}\
\
\cf2 void\cf0  stack1(\cf6 string\cf0  Choice)\
\{\
    \cf2 if\cf0 (Choice == \cf7 "push"\cf0 )\
    \{\
        \cf2 if\cf0  (\cf4 c\cf0  == (\cf4 n\cf0 -\cf3 1\cf0 ))\
        \{\
            \cf6 cout\cf0 <<\cf7 "Stack is full\\n"\cf0 ;\
            \cf2 return\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf4 c\cf0 ++;\
            \cf2 int\cf0  data;\
            \cf6 cout\cf0 <<\cf7 "Enter element to push\\n"\cf0 ;\
            \cf6 cin\cf0 >>data;\
            \cf2 if\cf0 (\cf4 st1\cf0  == \cf4 st2start\cf0 )\
            \{\
                \cf5 //Has reached the start of second stack and stack 1 is full\cf0 \
                \cf5 //Check for the space between st2 and st3\cf0 \
                \cf5 //if space is greater than or equal to 1 then move\cf0 \
                \cf2 int\cf0  space = \cf4 st3\cf0  - \cf4 st2\cf0 ;\
                \cf2 if\cf0 (space >=\cf3 1\cf0 )\
                \{\
                    \cf5 //Move stack 2 these many spaces\cf0 \
                    space = space/\cf3 2\cf0 ;\
                    \cf8 shiftStack2\cf0 (space);\
                    \cf4 stack\cf0 [\cf4 st1\cf0 ] = data;\
                    \cf4 st1\cf0 ++;\
                \}\
                \cf2 else\cf0 \
                \{\
                    \cf5 //if stack1 is not full\cf0 \
                    \cf4 stack\cf0 [\cf4 st1\cf0 ] = data;\
                    \cf4 st1\cf0 ++;\
                \}\
            \}\
        \}\
    \}\
    \cf2 else\cf0 \
        \cf2 if\cf0 (Choice == \cf7 "pop"\cf0 )\
        \{\
            \cf4 c\cf0 --;\
            \cf4 st1\cf0 --;\
            \cf6 cout\cf0 <<\cf7 "The element to be popped is "\cf0 <<\cf4 stack\cf0 [\cf4 st1\cf0 ]<<\cf9 endl\cf0 ;\
            \cf4 stack\cf0 [\cf4 st1\cf0 ] = \cf3 0\cf0 ;\
        \}\
\}\
\cf2 void\cf0  stack2(\cf6 string\cf0  Choice)\
\{\
    \cf2 if\cf0 (Choice == \cf7 "push"\cf0 )\
    \{\
        \cf2 if\cf0  (\cf4 c\cf0  == (\cf4 n\cf0 -\cf3 1\cf0 ))\
        \{\
            \cf6 cout\cf0 <<\cf7 "Stack is full\\n"\cf0 ;\
            \cf2 return\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf4 c\cf0 ++;\
            \cf2 int\cf0  data;\
            \cf6 cout\cf0 <<\cf7 "Enter element to push\\n"\cf0 ;\
            \cf6 cin\cf0 >>data;\
            \cf2 if\cf0 (\cf4 st2\cf0  == \cf4 st3\cf0 )\
            \{\
                \cf5 //if the space between stack2 and stack3 is filled shift stack 2 forward\cf0 \
                \cf5 //calculate the space bewteen st1 and stack2start\cf0 \
                \cf2 int\cf0  space = \cf4 st2start\cf0 -\cf4 st1\cf0 ;\
                \cf2 if\cf0 (space >=\cf3 1\cf0 )\
                \{\
                    space = space/\cf3 2\cf0 ;\
                    \cf8 shiftStack2Forward\cf0 (space);\
                    \cf4 stack\cf0 [\cf4 st2\cf0 ] = data;\
                    \cf4 st2\cf0 ++;\
                \}\
                \cf2 else\cf0 \
                \{\
                    \cf4 stack\cf0 [\cf4 st2\cf0 ] = data;\
                    \cf4 st2\cf0 ++;\
                \}\
            \}\
        \}\
    \}\
    \cf2 else\cf0 \
        \cf2 if\cf0 (Choice == \cf7 "pop"\cf0 )\
        \{\
            \cf4 c\cf0 --;\
            \cf4 st2\cf0 --;\
            \cf6 cout\cf0 <<\cf7 "The element to be popped is "\cf0 <<\cf4 stack\cf0 [\cf4 st2\cf0 ]<<\cf9 endl\cf0 ;\
            \cf4 stack\cf0 [\cf4 st2\cf0 ] = \cf3 0\cf0 ;\
        \}\
\}\
\cf2 void\cf0  stack3(\cf6 string\cf0  Choice)\
\{\
    \cf2 if\cf0 (Choice == \cf7 "push"\cf0 )\
    \{\
        \cf2 if\cf0  (\cf4 c\cf0  == (\cf4 n\cf0 -\cf3 1\cf0 ))\
        \{\
            \cf6 cout\cf0 <<\cf7 "Stack is full\\n"\cf0 ;\
            \cf2 return\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf4 c\cf0 ++;\
            \cf2 int\cf0  data;\
            \cf6 cout\cf0 <<\cf7 "Enter element to push\\n"\cf0 ;\
            \cf6 cin\cf0 >>data;\
            \
            \cf5 //Repeat of stack 2 whole thing\cf0 \
        \}\
    \}\
    \cf2 else\cf0 \
        \cf2 if\cf0 (Choice == \cf7 "pop"\cf0 )\
        \{\
            \cf4 c\cf0 --;\
            \cf4 st3\cf0 --;\
            \cf6 cout\cf0 <<\cf7 "The element to be popped is "\cf0 <<\cf4 stack\cf0 [\cf4 st3\cf0 ]<<\cf9 endl\cf0 ;\
            \cf4 stack\cf0 [\cf4 st3\cf0 ] = \cf3 0\cf0 ;\
        \}\
\}\
\
\cf2 int\cf0  main()\
\{\
    \
    \
\}}