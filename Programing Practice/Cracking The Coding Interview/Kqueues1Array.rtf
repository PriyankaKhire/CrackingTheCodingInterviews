{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red63\green110\blue116;\red92\green38\blue153;\red196\green26\blue22;\red38\green71\blue75;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
K queues 1 array\
 */\cf0 \
\
\
\cf3 const\cf0  \cf3 static\cf0  \cf3 int\cf0  n = \cf4 9\cf0 ;\
\cf3 const\cf0  \cf3 static\cf0  \cf3 int\cf0  k = \cf4 3\cf0 ;\
\
\cf3 int\cf0  NumberOFelements = \cf4 0\cf0 ;\
\cf3 int\cf0  CurrentFree = \cf4 0\cf0 ;\
\
\cf3 int\cf0  QueueArray[\cf5 n\cf0 ];\
\cf3 int\cf0  whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo[\cf5 n\cf0 ];\
\cf2 //We delete from front and add from back\cf0 \
\cf3 int\cf0  front[\cf5 k\cf0 ];\
\cf3 int\cf0  back[\cf5 k\cf0 ];\
\
\cf3 bool\cf0  isEmpty(\cf3 int\cf0  q)\
\{\
    \cf3 if\cf0 (\cf5 front\cf0 [q] == -\cf4 1\cf0  && \cf5 back\cf0 [q] == -\cf4 1\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 bool\cf0  isFull()\
\{\
    \cf3 if\cf0 (\cf5 NumberOFelements\cf0  == \cf5 n\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 void\cf0  display()\
\{\
    \cf6 cout\cf0 <<\cf7 "\\nQueue Array "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i++)\
    \{\
        \cf6 cout\cf0 <<\cf5 QueueArray\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf7 "\\nNext Array "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i++)\
    \{\
        \cf6 cout\cf0 <<\cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf7 "\\nFront "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i =\cf4 0\cf0 ; i <\cf5 k\cf0 ; i++)\
    \{\
        \cf6 cout\cf0 <<\cf5 front\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf7 "\\nBack "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i =\cf4 0\cf0 ; i <\cf5 k\cf0 ; i++)\
    \{\
        \cf6 cout\cf0 <<\cf5 back\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf7 "\\nCurrent Free Space = "\cf0 <<\cf5 CurrentFree\cf0 ;\
\}\
\
\cf3 void\cf0  push(\cf3 int\cf0  q, \cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf8 isFull\cf0 ())\
    \{\
        \cf6 cout\cf0 <<\cf7 "\\nQueue full"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 NumberOFelements\cf0 ++;\
        \cf2 //If it's the first element to be added\cf0 \
        \cf3 if\cf0 (\cf5 front\cf0 [q] == -\cf4 1\cf0  && \cf5 back\cf0 [q] == -\cf4 1\cf0 )\
        \{\
            \cf5 QueueArray\cf0 [\cf5 CurrentFree\cf0 ] = data;\
            \cf5 front\cf0 [q] = \cf5 CurrentFree\cf0 ;\
            \cf5 back\cf0 [q] = \cf5 CurrentFree\cf0 ;\
            \cf3 int\cf0  NewlyFilledSpace = \cf5 CurrentFree\cf0 ;\
            \cf5 CurrentFree\cf0  = \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [\cf5 CurrentFree\cf0 ];\
            \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [NewlyFilledSpace] = -\cf4 9\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf5 QueueArray\cf0 [\cf5 CurrentFree\cf0 ] = data;\
            \cf3 int\cf0  NewlyFilledSpace = \cf5 CurrentFree\cf0 ;\
            \cf5 CurrentFree\cf0  = \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [\cf5 CurrentFree\cf0 ];\
            \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [\cf5 back\cf0 [q]] = NewlyFilledSpace;\
            \cf5 back\cf0 [q] = NewlyFilledSpace;\
            \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [NewlyFilledSpace] = -\cf4 9\cf0 ;\
        \}\
        \
    \}\
\}\
\
\cf3 void\cf0  pop(\cf3 int\cf0  q)\
\{\
    \cf3 if\cf0 (\cf8 isEmpty\cf0 (q))\
    \{\
        \cf6 cout\cf0 <<\cf7 "\\nQueue Empty"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 NumberOFelements\cf0 --;\
        \cf3 int\cf0  frontElement = \cf5 front\cf0 [q];\
        \cf5 front\cf0 [q] = \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [frontElement];\
        \cf6 cout\cf0 <<\cf7 "\\nPopped "\cf0 <<\cf5 QueueArray\cf0 [frontElement];\
        \cf5 QueueArray\cf0 [frontElement] = \cf4 0\cf0 ;\
        \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [frontElement] = \cf5 CurrentFree\cf0 ;\
        \cf5 CurrentFree\cf0  = frontElement;\
        \cf3 if\cf0 (\cf5 front\cf0 [q] == -\cf4 9\cf0 )\
        \{\
            \cf6 cout\cf0 <<\cf7 "\\nPopped Last emement"\cf0 ;\
            \cf5 front\cf0 [q] = -\cf4 1\cf0 ;\
            \cf5 back\cf0 [q] = -\cf4 1\cf0 ;\
        \}\
        \
        \cf3 if\cf0 (\cf5 NumberOFelements\cf0  == \cf4 0\cf0 )\
        \{\
            \cf6 cout\cf0 <<\cf7 "\\nThe Queue is completely empty"\cf0 ;\
            \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i ++)\
            \{\
                \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [i] = i+\cf4 1\cf0 ;\
            \}\
            \cf5 CurrentFree\cf0  = \cf4 0\cf0 ;\
        \}\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf2 //Initilise\cf0 \
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i ++)\
    \{\
        \cf5 QueueArray\cf0 [i] = \cf4 0\cf0 ;\
        \cf5 whenFilledGivesNextWhenEmptyGivesFreeSpaceInfo\cf0 [i] = i+\cf4 1\cf0 ;\
    \}\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 k\cf0 ; i ++)\
    \{\
        \cf5 front\cf0 [i] = -\cf4 1\cf0 ;\
        \cf5 back\cf0 [i] = -\cf4 1\cf0 ;\
    \}\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
    \cf8 push\cf0 (\cf4 0\cf0 , \cf4 10\cf0 );\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
    \cf8 push\cf0 (\cf4 1\cf0 , \cf4 20\cf0 );\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
    \cf8 push\cf0 (\cf4 2\cf0 , \cf4 30\cf0 );\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
    \cf8 push\cf0 (\cf4 0\cf0 , \cf4 100\cf0 );\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
    \cf8 push\cf0 (\cf4 0\cf0 , \cf4 1000\cf0 );\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
    \cf8 push\cf0 (\cf4 1\cf0 , \cf4 200\cf0 );\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
    \cf8 push\cf0 (\cf4 2\cf0 , \cf4 300\cf0 );\
    \cf8 display\cf0 ();\
    \cf6 cout\cf0 <<\cf7 "\\n-----------------"\cf0 ;\
\}}