{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red63\green110\blue116;\red28\green0\blue207;
\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;\red0\green116\blue0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 struct\cf0  SuffixTree\
\{\
    \cf2 char\cf0  k;\
    \cf2 int\cf0  prefix;\
    \cf2 int\cf0  wordComplete;\
    \cf3 SuffixTree\cf0  *edges[\cf4 26\cf0 ];\
\};\
\
\cf3 SuffixTree\cf0  *Root = \cf2 new\cf0  \cf3 SuffixTree\cf0 ;\
\
\cf3 SuffixTree\cf0  *initialise(\cf2 char\cf0  alphabet)\
\{\
    \cf3 SuffixTree\cf0  *NewNode;\
    NewNode = \cf2 new\cf0  \cf3 SuffixTree\cf0 ;\
    NewNode->\cf3 k\cf0  = alphabet;\
    NewNode->\cf3 prefix\cf0  = \cf4 0\cf0 ;\
    NewNode->\cf3 wordComplete\cf0  = \cf4 0\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i < \cf4 26\cf0 ; i++)\
    \{\
        NewNode->\cf3 edges\cf0 [i] = \cf2 NULL\cf0 ;\
    \}\
    \cf2 return\cf0  NewNode;\
\}\
\
\cf2 void\cf0  addSuffix(\cf3 SuffixTree\cf0  *Node, \cf5 string\cf0  word)\
\{\
    \cf2 if\cf0 (word == \cf6 ""\cf0 )\
    \{\
        Node->\cf3 wordComplete\cf0 ++;\
        \cf2 return\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf2 char\cf0  k = \cf7 tolower\cf0 (word[\cf4 0\cf0 ]);\
        \cf2 int\cf0  i = \cf2 int\cf0 (k) - \cf2 int\cf0 (\cf4 'a'\cf0 );\
        word = word.\cf7 erase\cf0 (\cf4 0\cf0 ,\cf4 1\cf0 );\
        \cf2 if\cf0 (Node->\cf3 edges\cf0 [i] == \cf2 NULL\cf0 )\
        \{\
            \cf3 SuffixTree\cf0  *NewNode = \cf8 initialise\cf0 (k);\
            Node->\cf3 edges\cf0 [i] = NewNode;\
            Node = Node->\cf3 edges\cf0 [i];\
        \}\
        \cf2 else\cf0 \
        \{\
            Node = Node->\cf3 edges\cf0 [i];\
            Node->\cf3 prefix\cf0 ++;\
        \}\
        \cf8 addSuffix\cf0 (Node, word);\
    \}\
    \
\}\
\
\cf5 stack\cf0 <\cf3 SuffixTree\cf0 *> LCSstack;\
\cf5 stack\cf0 <\cf3 SuffixTree\cf0 *> dispstack;\
\cf2 void\cf0  LongestCommonSubstring()\
\{\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i <\cf4 26\cf0 ; i ++)\
    \{\
        \cf2 if\cf0 (\cf3 Root\cf0 ->\cf3 edges\cf0 [i] != \cf2 NULL\cf0 )\
        \{\
            \cf3 LCSstack\cf0 .\cf7 push\cf0 (\cf3 Root\cf0 ->\cf3 edges\cf0 [i]);\
        \}\
    \}\
    \
    \cf2 while\cf0 (!\cf3 LCSstack\cf0 .\cf7 empty\cf0 ())\
    \{\
        \cf3 SuffixTree\cf0  *node = \cf3 LCSstack\cf0 .\cf7 top\cf0 ();\
        \cf3 LCSstack\cf0 .\cf7 pop\cf0 ();\
        \cf9 //if prefix >=1 then the strings have been repeated\cf0 \
        \cf2 if\cf0 (node->\cf3 prefix\cf0  >=\cf4 1\cf0 )\
        \{\
            \cf5 cout\cf0 <<node->\cf3 prefix\cf0 <<\cf6 " "\cf0 <<node->\cf3 k\cf0 ;\
            \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i<\cf4 26\cf0 ;i++)\
            \{\
                \cf2 if\cf0 (node->\cf3 edges\cf0 [i] != \cf2 NULL\cf0 )\
                \{\
                    \cf3 dispstack\cf0 .\cf7 push\cf0 (node->\cf3 edges\cf0 [i]);\
                \}\
            \}\
            \
            \cf3 SuffixTree\cf0  *maxnode;\
            \cf2 int\cf0  maxcount = \cf4 1\cf0 ;\
            \
            \cf2 while\cf0 (!\cf3 dispstack\cf0 .\cf7 empty\cf0 ())\
            \{\
                \cf3 SuffixTree\cf0  *top = \cf3 dispstack\cf0 .\cf7 top\cf0 ();\
                \cf3 dispstack\cf0 .\cf7 pop\cf0 ();\
                \cf2 if\cf0 (top->\cf3 prefix\cf0  > \cf4 0\cf0 )\
                \{\
                    \cf5 cout\cf0 <<top->\cf3 k\cf0 ;\
                    maxcount++;\
                    \cf2 if\cf0 (top->\cf3 wordComplete\cf0  >\cf4 0\cf0 )\
                    \{\
                        \cf5 cout\cf0 <<\cf6 " "\cf0 ;\
                    \}\
                    \cf2 for\cf0 (\cf2 int\cf0  i =\cf4 0\cf0 ; i < \cf4 26\cf0 ; i++)\
                    \{\
                        \cf2 if\cf0 (top->\cf3 edges\cf0 [i] != \cf2 NULL\cf0 )\
                        \{\
                            \cf3 dispstack\cf0 .\cf7 push\cf0 (top->\cf3 edges\cf0 [i]);\
                        \}\
                    \}\
                \}\
            \}\
            \cf5 cout\cf0 <<maxcount<<\cf6 " *"\cf0 ;\
            \cf5 cout\cf0 <<\cf7 endl\cf0 ;\
            \
        \}\
    \}\
\}\
\
\cf2 void\cf0  addword(\cf5 string\cf0  word)\
\{\
    \cf2 if\cf0 (word == \cf6 ""\cf0 )\
    \{\
        \cf2 return\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf8 addSuffix\cf0 (\cf3 Root\cf0 , word);\
        word = word.\cf7 erase\cf0 (\cf4 0\cf0 ,\cf4 1\cf0 );\
        \cf8 addword\cf0 (word);\
    \}\
\}\
\
\cf5 stack\cf0 <\cf3 SuffixTree\cf0  *> stacks;\
\
\cf2 void\cf0  display()\
\{\
    \cf3 stacks\cf0 .\cf7 push\cf0 (\cf3 Root\cf0 );\
    \cf2 while\cf0 (!\cf3 stacks\cf0 .\cf7 empty\cf0 ())\
    \{\
        \cf3 SuffixTree\cf0  *top = \cf3 stacks\cf0 .\cf7 top\cf0 ();\
        \cf3 stacks\cf0 .\cf7 pop\cf0 ();\
        \cf5 cout\cf0 <<top->\cf3 k\cf0 <<top->\cf3 prefix\cf0 <<\cf7 endl\cf0 ;\
        \cf2 if\cf0 (top->\cf3 wordComplete\cf0  > \cf4 0\cf0 )\
        \{\
            \cf5 cout\cf0 <<\cf7 endl\cf0 <<\cf7 endl\cf0 ;\
        \}\
        \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i < \cf4 26\cf0 ; i ++)\
        \{\
            \cf2 if\cf0 (top->\cf3 edges\cf0 [i] != \cf2 NULL\cf0 )\
            \{\
                \cf3 stacks\cf0 .\cf7 push\cf0 (top->\cf3 edges\cf0 [i]);\
            \}\
        \}\
    \}\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf3 Root\cf0 ->\cf3 k\cf0  = \cf4 ' '\cf0 ;\
    \cf3 Root\cf0 ->\cf3 prefix\cf0  = \cf4 0\cf0 ;\
    \cf3 Root\cf0 ->\cf3 wordComplete\cf0  = \cf4 0\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0  ; i < \cf4 26\cf0 ; i++)\
    \{\
        \cf3 Root\cf0 ->\cf3 edges\cf0 [i] = \cf2 NULL\cf0 ;\
    \}\
    \cf8 addword\cf0 (\cf6 "pqqpabcdfghfdcbaabcdfhgfdcbapqqp"\cf0 );\
    \cf8 LongestCommonSubstring\cf0 ();\
    \cf9 //display();\cf0 \
    \
\}}