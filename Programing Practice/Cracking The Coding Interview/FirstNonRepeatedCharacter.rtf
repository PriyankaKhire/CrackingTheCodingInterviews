{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red92\green38\blue153;
\red196\green26\blue22;\red28\green0\blue207;\red46\green13\blue110;\red63\green110\blue116;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
find the first nonrepeated character\
 \
 ProbLem Write an efficient function to find the first nonrepeated character in a string. For instance, the first nonrepeated character in \'93total\'94 is 'o' and the first nonrepeated character in \'93teeter\'94 is 'r'. Discuss the efficiency of your algorithm\
*/\cf0 \
\
\
\cf3 int\cf0  main()\
\{\
    \cf2 //First Approach\cf0 \
    \cf2 //O(n^2)\cf0 \
    \
    \cf4 string\cf0  str = \cf5 "teeter"\cf0 ;\
    \cf3 bool\cf0  duplicate = \cf3 false\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf6 0\cf0 ; i < str.\cf7 length\cf0 (); i ++)\
    \{\
        \cf2 //Why do we need to see if str[i] is not marked\cf0 \
        \cf2 //Because at some point str[i] will be incremented and since str[j] is always more than str[i] in index position\cf0 \
        \cf3 if\cf0 (str[\cf7 i\cf0 ] != \cf6 '0'\cf0 )\
        \{\
            \cf4 cout\cf0 <<\cf5 "str[i] is "\cf0 <<str[\cf7 i\cf0 ]<<\cf7 endl\cf0 ;\
            \cf2 //We first mark that str[i] has no duplicate\cf0 \
            duplicate = \cf3 false\cf0 ;\
            \cf3 for\cf0 (\cf3 int\cf0  j = i+\cf6 1\cf0 ; j< str.\cf7 length\cf0 (); j++)\
            \{\
                \cf2 //if str[j] is not marked\cf0 \
                \cf3 if\cf0 (str[\cf7 j\cf0 ] != \cf6 '0'\cf0 )\
                \{\
                    \cf4 cout\cf0 <<\cf5 "str[j] is "\cf0 <<str[\cf7 j\cf0 ]<<\cf7 endl\cf0 ;\
                    \cf3 if\cf0 (str[\cf7 i\cf0 ] == str[\cf7 j\cf0 ])\
                    \{\
                        \cf2 //Mark str[j]\cf0 \
                        str[\cf7 j\cf0 ] = \cf6 '0'\cf0 ;\
                        \cf2 //Say str[i] has a duplicate\cf0 \
                        duplicate = \cf3 true\cf0 ;\
                    \}\
                \}\
            \}\
            \cf4 cout\cf0 <<\cf7 endl\cf0 ;\
            \cf3 if\cf0 (duplicate == \cf3 false\cf0 )\
            \{\
                \cf4 cout\cf0 <<\cf5 "First Non Repeated Character is "\cf0 <<str[\cf7 i\cf0 ]<<\cf7 endl\cf0 ;\
                \cf7 exit\cf0 (\cf6 0\cf0 );\
            \}\
        \}\
    \}\
    \
    \cf4 cout\cf0 <<\cf5 "The string has all duplicates"\cf0 <<\cf7 endl\cf0 ;\
\}\
\
\
==================================================================================================================================================================\
\
\
\cf4 map\cf0 <\cf3 char\cf0 , \cf3 int\cf0 > HashTable;\
\cf4 map\cf0 <\cf3 char\cf0 , \cf3 int\cf0 >::\cf4 iterator\cf0  it;\
\
\cf3 int\cf0  main()\
\{\
    \cf2 //Second Approach\cf0 \
    \cf2 //O(n)\cf0 \
    \cf2 //Requires use of extra storage\cf0 \
    \cf2 //in this case hash table since the access time is O(1)\cf0 \
    \
    \cf4 string\cf0  str = \cf5 "totalo"\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf6 0\cf0  ; i < str.\cf7 length\cf0 (); i++)\
    \{\
        \cf3 if\cf0 (\cf8 HashTable\cf0 [\cf7 str\cf0 [\cf7 i\cf0 ]])\
        \{\
            \cf4 cout\cf0 <<\cf5 "character present in hash table "\cf0 <<str[\cf7 i\cf0 ]<<\cf7 endl\cf0 ;\
            \cf2 //If str[i] is already present in hash table give it a value which is very big\cf0 \
            \cf2 //in this case we know that value is position so we know that str.length()+10 is some position which will never be used\cf0 \
            \cf8 HashTable\cf0 [\cf7 str\cf0 [\cf7 i\cf0 ]] = str.\cf7 length\cf0 ()+\cf6 10\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf4 cout\cf0 <<\cf5 "Characte not present in hash table "\cf0 <<str[\cf7 i\cf0 ]<<\cf7 endl\cf0 ;\
            \cf2 //if str[i] is not in hash table put it in hash table and add its value as its position\cf0 \
            \cf8 HashTable\cf0 [\cf7 str\cf0 [\cf7 i\cf0 ]] = i+\cf6 1\cf0 ;\
        \}\
    \}\
    \
    \cf3 int\cf0  FirstSmallPositonInHashTable = str.\cf7 length\cf0 ()+\cf6 10\cf0 ;\
    \cf3 for\cf0 (\cf8 it\cf0  = \cf8 HashTable\cf0 .\cf7 begin\cf0 (); \cf8 it\cf0  != \cf8 HashTable\cf0 .\cf7 end\cf0 (); \cf8 it\cf0 ++)\
    \{\
        \cf4 cout\cf0 <<\cf8 it\cf0 ->\cf4 first\cf0 <<\cf5 " "\cf0 <<\cf8 HashTable\cf0 [\cf7 it\cf0 ->\cf7 first\cf0 ]<<\cf7 endl\cf0 ;\
        \cf3 if\cf0 (\cf8 HashTable\cf0 [\cf7 it\cf0 ->\cf7 first\cf0 ] < FirstSmallPositonInHashTable)\
        \{\
            FirstSmallPositonInHashTable = \cf8 HashTable\cf0 [\cf7 it\cf0 ->\cf7 first\cf0 ];\
        \}\
    \}\
    \
    \
\}}