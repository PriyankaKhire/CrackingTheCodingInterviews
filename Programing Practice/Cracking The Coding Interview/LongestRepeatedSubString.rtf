{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red63\green110\blue116;\red28\green0\blue207;
\red92\green38\blue153;\red0\green116\blue0;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 struct\cf0  SuffixTree\
\{\
    \cf2 char\cf0  alphabet;\
    \cf2 int\cf0  wordCount;\
    \cf2 int\cf0  internalNodeCount;\
    \cf2 bool\cf0  isRoot;\
    \cf3 SuffixTree\cf0  *edges[\cf4 26\cf0 ];\
\};\
\
\cf5 stack\cf0 <\cf3 SuffixTree\cf0  *>SuffixTreeStack;\
\
\cf3 SuffixTree\cf0  *Root = \cf2 new\cf0  \cf3 SuffixTree\cf0 ;\
\
\cf3 SuffixTree\cf0  *initialise(\cf2 char\cf0  alphabet)\
\{\
    \cf3 SuffixTree\cf0  *Node;\
    Node = \cf2 new\cf0  \cf3 SuffixTree\cf0 ;\
    Node->\cf3 alphabet\cf0  = alphabet;\
    Node->\cf3 isRoot\cf0  = \cf2 false\cf0 ;\
    Node->\cf3 internalNodeCount\cf0  = \cf4 0\cf0 ;\
    Node->\cf3 wordCount\cf0  = \cf4 0\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i < \cf4 26\cf0 ; i ++)\
    \{\
        Node->\cf3 edges\cf0 [i] = \cf2 NULL\cf0 ;\
    \}\
    \cf2 return\cf0  Node;\
\}\
\
\cf6 //Ending of the owrd is denoted by $\cf0 \
\cf2 void\cf0  addSuffix(\cf3 SuffixTree\cf0  *Node, \cf5 string\cf0  word)\
\{\
    \cf2 if\cf0 (word == \cf7 "$"\cf0 )\
    \{\
        Node->\cf3 wordCount\cf0 ++;\
        \cf2 return\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf2 char\cf0  k = \cf8 tolower\cf0 (word[\cf4 0\cf0 ]);\
        word = word.\cf8 erase\cf0 (\cf4 0\cf0 ,\cf4 1\cf0 );\
        \cf2 int\cf0  i = \cf2 int\cf0 (k) - \cf2 int\cf0 (\cf4 'a'\cf0 );\
        \cf2 if\cf0 (Node->\cf3 edges\cf0 [i] == \cf2 NULL\cf0 )\
        \{\
            \cf3 SuffixTree\cf0  *NewNode = \cf9 initialise\cf0 (k);\
            Node->\cf3 edges\cf0 [i] = NewNode;\
            \cf2 if\cf0 (Node == \cf3 Root\cf0 )\
            \{\
                \cf6 //This check identifies the nodes that are directly connected to the root\cf0 \
                Node->\cf3 edges\cf0 [i]->\cf3 isRoot\cf0  = \cf2 true\cf0 ;\
            \}\
            Node = Node->\cf3 edges\cf0 [i];\
        \}\
        \cf2 else\cf0 \
        \{\
            Node = Node->\cf3 edges\cf0 [i];\
            Node->\cf3 internalNodeCount\cf0 ++; \cf6 //Adding this line in else and not out of if else statement, gives me the number of the internal nodes below a word.\cf0 \
        \}\
        \cf9 addSuffix\cf0 (Node, word);\
    \}\
\}\
\
\cf2 void\cf0  AddWord(\cf5 string\cf0  word)\
\{\
    \cf2 if\cf0 (word == \cf7 "$"\cf0 )\
    \{\
        \cf2 return\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf9 addSuffix\cf0 (\cf3 Root\cf0 , word);\
        word = word.\cf8 erase\cf0 (\cf4 0\cf0 ,\cf4 1\cf0 );\
        \cf9 AddWord\cf0 (word);\
    \}\
\}\
\
\cf2 void\cf0  search(\cf3 SuffixTree\cf0  *Node, \cf5 string\cf0  word)\
\{\
    \cf2 if\cf0 (word == \cf7 "$"\cf0 )\
    \{\
        \cf5 cout\cf0 <<Node->\cf3 alphabet\cf0 <<Node->\cf3 wordCount\cf0 <<Node->\cf3 internalNodeCount\cf0 <<\cf8 endl\cf0 ;\
        \cf5 cout\cf0 <<\cf7 "Found\\n"\cf0 ;\
        \cf2 return\cf0 ;\
    \}\
    \cf2 else\cf0 \
    \{\
        \cf2 char\cf0  k = \cf8 tolower\cf0 (word[\cf4 0\cf0 ]);\
        \cf2 int\cf0  i = \cf2 int\cf0 (k) - \cf2 int\cf0 (\cf4 'a'\cf0 );\
        \cf2 if\cf0 (Node->\cf3 edges\cf0 [i] != \cf2 NULL\cf0 )\
        \{\
            \cf5 cout\cf0 <<Node->\cf3 alphabet\cf0 <<Node->\cf3 wordCount\cf0 <<Node->\cf3 internalNodeCount\cf0 <<\cf8 endl\cf0 ;\
            word = word.\cf8 erase\cf0 (\cf4 0\cf0 ,\cf4 1\cf0 );\
            Node = Node->\cf3 edges\cf0 [i];\
            \cf9 search\cf0 (Node, word);\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf5 cout\cf0 <<\cf7 "Not Found \\n"\cf0 ;\
            \cf2 return\cf0 ;\
        \}\
    \}\
\}\
\
\cf2 int\cf0  MaxInternalNodeCount = \cf4 0\cf0 ;\
\cf2 int\cf0  wordCount = \cf4 0\cf0 ;\
\cf3 SuffixTree\cf0  *MaxInternalNode;\
\
\cf2 void\cf0  display()\
\{\
    \cf3 SuffixTreeStack\cf0 .\cf8 push\cf0 (\cf3 Root\cf0 );\
    \cf2 while\cf0  (!\cf3 SuffixTreeStack\cf0 .\cf8 empty\cf0 ())\
    \{\
        \cf3 SuffixTree\cf0  *top = \cf3 SuffixTreeStack\cf0 .\cf8 top\cf0 ();\
        \cf3 SuffixTreeStack\cf0 .\cf8 pop\cf0 ();\
        \cf2 if\cf0 (top->\cf3 isRoot\cf0  == \cf2 true\cf0 )\
        \{\
            \cf5 cout\cf0 <<\cf7 "internal node count = "\cf0 <<top->\cf3 internalNodeCount\cf0 <<\cf8 endl\cf0 ;\
            \cf2 if\cf0 (top->\cf3 internalNodeCount\cf0  > \cf3 MaxInternalNodeCount\cf0  && top->\cf3 wordCount\cf0  > \cf3 wordCount\cf0 )\
            \{\
                \cf3 wordCount\cf0  = top->\cf3 wordCount\cf0 ;\
                \cf3 MaxInternalNodeCount\cf0  = top->\cf3 internalNodeCount\cf0 ;\
                \cf3 MaxInternalNode\cf0  = top;\
            \}\
        \}\
        \cf5 cout\cf0 <<top->\cf3 alphabet\cf0 ;\
        \cf2 if\cf0 (top->\cf3 wordCount\cf0  > \cf4 0\cf0 )\
        \{\
            \cf5 cout\cf0 <<\cf8 endl\cf0 ;\
        \}\
        \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i < \cf4 26\cf0 ; i++)\
        \{\
            \cf2 if\cf0 (top->\cf3 edges\cf0 [i] != \cf2 NULL\cf0 )\
            \{\
                \cf3 SuffixTreeStack\cf0 .\cf8 push\cf0 (top->\cf3 edges\cf0 [i]);\
            \}\
        \}\
    \}\
\}\
\
\cf5 stack\cf0 <\cf3 SuffixTree\cf0 *>LRPStack;\
\cf2 void\cf0  LongestRepeatedPattern()\
\{\
    \cf5 cout\cf0 <<\cf7 "The Longest Repeated SubString is "\cf0 ;\
    \cf3 LRPStack\cf0 .\cf8 push\cf0 (\cf3 MaxInternalNode\cf0 );\
    \cf2 while\cf0 (!\cf3 LRPStack\cf0 .\cf8 empty\cf0 ())\
    \{\
        \cf3 SuffixTree\cf0  *top = \cf3 LRPStack\cf0 .\cf8 top\cf0 ();\
        \cf3 LRPStack\cf0 .\cf8 pop\cf0 ();\
        \cf2 if\cf0 (top->\cf3 internalNodeCount\cf0  == \cf4 0\cf0 )\
        \{\
            \cf2 break\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf5 cout\cf0 <<top->\cf3 alphabet\cf0 ;\
            \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i < \cf4 26\cf0 ; i++)\
            \{\
                \cf2 if\cf0 (top->\cf3 edges\cf0 [i] != \cf2 NULL\cf0 )\
                \{\
                    \cf3 LRPStack\cf0 .\cf8 push\cf0 (top->\cf3 edges\cf0 [i]);\
                \}\
            \}\
        \}\
    \}\
    \cf5 cout\cf0 <<\cf8 endl\cf0 ;\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf3 Root\cf0 ->\cf3 alphabet\cf0  = \cf4 ' '\cf0 ;\
    \cf3 Root\cf0 ->\cf3 wordCount\cf0  = \cf4 0\cf0 ;\
    \cf3 Root\cf0 ->\cf3 isRoot\cf0  = \cf2 false\cf0 ;\
    \cf3 Root\cf0 ->\cf3 internalNodeCount\cf0  = \cf4 0\cf0 ;\
    \cf2 for\cf0 (\cf2 int\cf0  i = \cf4 0\cf0 ; i < \cf4 26\cf0 ; i ++)\
    \{\
        \cf3 Root\cf0 ->\cf3 edges\cf0 [i] = \cf2 NULL\cf0 ;\
    \}\
    \
    \cf9 AddWord\cf0 (\cf7 "gekfrgek$"\cf0 );\
    \cf6 search(Root, "bababa$");\cf0 \
    \cf9 display\cf0 ();\
    \cf9 LongestRepeatedPattern\cf0 ();\
\}}