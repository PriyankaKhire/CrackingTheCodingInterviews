{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red63\green110\blue116;
\red38\green71\blue75;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red28\green0\blue207;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 //This function basically stops once the inorder successor is found\cf0 \
\cf3 bool\cf0  flag = \cf3 false\cf0 ;\
\cf3 bool\cf0  endRecurssion = \cf3 false\cf0 ;\
\cf4 TreeNode\cf0  *NextNode;\
\cf3 void\cf0  inorderTraversal(\cf4 TreeNode\cf0  *Node, \cf4 TreeNode\cf0  *OriginalNode)\
\{\
    \cf3 if\cf0 (Node != \cf3 NULL\cf0  && \cf4 endRecurssion\cf0  == \cf3 false\cf0 )\
    \{\
        \cf5 inorderTraversal\cf0 (Node->\cf4 llink\cf0 , OriginalNode);\
        \cf2 //cout<<"Node traversed "<<Node->data<<endl;\cf0 \
        \cf3 if\cf0 (\cf4 flag\cf0  == \cf3 true\cf0 )\
        \{\
            \cf3 if\cf0 (Node != \cf3 NULL\cf0 )\
            \{\
                \cf4 NextNode\cf0  = Node;\
                \cf4 flag\cf0  = \cf3 false\cf0 ;\
                \cf4 endRecurssion\cf0  = \cf3 true\cf0 ;\
                \cf3 return\cf0 ;\
            \}\
        \}\
        \cf3 if\cf0 (Node == OriginalNode && \cf4 flag\cf0  == \cf3 false\cf0 )\
        \{\
            \cf4 flag\cf0  = \cf3 true\cf0 ;\
        \}\
        \cf5 inorderTraversal\cf0 (Node->\cf4 rlink\cf0 , OriginalNode);\
    \}\
\}\
\
\
\cf3 void\cf0  NextNodeFunction(\cf4 TreeNode\cf0  *Node)\
\{\
    \cf4 NextNode\cf0  = \cf3 NULL\cf0 ;\
    \cf4 flag\cf0  = \cf3 false\cf0 ;\
    \cf4 endRecurssion\cf0  = \cf3 false\cf0 ;\
    \cf5 inorderTraversal\cf0 (\cf4 RootNode\cf0 , Node);\
    \cf3 if\cf0 (\cf4 NextNode\cf0  != \cf3 NULL\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "\\n The inorder successor for "\cf0 <<Node->\cf4 data\cf0 <<\cf7 " is "\cf0 <<\cf4 NextNode\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
    \}\
\}\
\
\cf4 TreeNode\cf0  *PreviousNode;\
\cf3 void\cf0  inorderPredessor(\cf4 TreeNode\cf0  *Node, \cf4 TreeNode\cf0  *originalNode)\
\{\
    \cf3 if\cf0 (Node != \cf3 NULL\cf0  && \cf4 endRecurssion\cf0  == \cf3 false\cf0 )\
    \{\
        \cf5 inorderPredessor\cf0 (Node->\cf4 llink\cf0 , originalNode);\
        \cf2 //cout<<"Node traversed "<<Node->data<<endl;\cf0 \
        \cf3 if\cf0 (Node == originalNode )\
        \{\
            \cf4 endRecurssion\cf0  = \cf3 true\cf0 ;\
            \cf3 return\cf0 ;\
        \}\
        \cf3 else\cf0 \
        \{\
            \cf3 if\cf0 (\cf4 endRecurssion\cf0  == \cf3 false\cf0 )\cf2 //This check is there coz of recurrssion doesnt stop immediately after you change the flag it recursses one more time.\cf0 \
            \{\
                \cf4 PreviousNode\cf0  = Node;\
                \cf2 //cout<<"Previous node "<<PreviousNode->data;\cf0 \
            \}\
        \}\
        \cf5 inorderPredessor\cf0 (Node->\cf4 rlink\cf0 , originalNode);\
    \}\
\}\
\
\cf3 void\cf0  previousNode(\cf4 TreeNode\cf0  *Node)\
\{\
    \cf4 PreviousNode\cf0  = \cf3 NULL\cf0 ;\
    \cf4 endRecurssion\cf0  = \cf3 false\cf0 ;\
    \cf5 inorderPredessor\cf0 (\cf4 RootNode\cf0 , Node);\
    \cf3 if\cf0 (\cf4 PreviousNode\cf0  != \cf3 NULL\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "\\n The inorder predessor for "\cf0 <<Node->\cf4 data\cf0 <<\cf7 " is "\cf0 <<\cf4 PreviousNode\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
    \}\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf4 RootNode\cf0 ->\cf4 data\cf0  = \cf9 0\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 llink\cf0  = \cf4 RootNode\cf0 ->\cf4 rlink\cf0  = \cf3 NULL\cf0 ;\
    \
    \cf5 CreateTree\cf0 ();\
    \
    \cf5 NextNodeFunction\cf0 (\cf4 RootNode\cf0 ->\cf4 llink\cf0 ->\cf4 rlink\cf0 );\
    \cf5 previousNode\cf0 (\cf4 RootNode\cf0 ->\cf4 llink\cf0 ->\cf4 rlink\cf0 );\
    \
 \}}