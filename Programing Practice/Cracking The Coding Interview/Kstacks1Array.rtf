{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red63\green110\blue116;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red38\green71\blue75;
\red254\green73\blue64;\red134\green205\blue77;\red0\green68\blue254;\red163\green217\blue121;\red255\green39\blue18;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww19220\viewh12200\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 //K stacks implementation for size n\cf0 \
\
\cf3 static\cf0  \cf3 const\cf0  \cf3 int\cf0  n = \cf4 9\cf0 ;\
\cf3 static\cf0  \cf3 const\cf0  \cf3 int\cf0  k = \cf4 3\cf0 ;\
\
\cf3 int\cf0  Array[\cf5 n\cf0 ];\
\cf3 int\cf0  WhenFilledPreviousElementWhenEmptyNextElement[\cf5 n\cf0 ];\
\cf3 int\cf0  TopElements[\cf5 k\cf0 ];\
\cf3 int\cf0  CurrentFreeSlot = \cf4 0\cf0 ; \cf2 //Keeps the track of the current free slot and it gets it's updated value from the WhenFilledPreviousElementWhenEmptyNextElement[CurrentFreeSlot] array.\cf0 \
\cf3 int\cf0  TotalElementCount = \cf4 0\cf0 ;\
\
\cf3 void\cf0  initialise()\
\{\
    \cf6 cout\cf0 <<\cf7 "Initialising the stack elements\\n"\cf0 ;\
    \
    \cf6 cout\cf0 <<\cf7 "Array "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i ++)\
    \{\
        \cf5 Array\cf0 [i] = \cf4 0\cf0 ;\
        \cf6 cout\cf0 <<\cf5 Array\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \
    \cf6 cout\cf0 <<\cf7 "\\n When this array is filled at index i it gives the previous element of index i and when it is free it gives the next slot where free element is present"\cf0 ;\
    \cf6 cout\cf0 <<\cf7 "\\nPrevious Elements Array "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i ++)\
    \{\
        \cf5 WhenFilledPreviousElementWhenEmptyNextElement\cf0 [i] = i+\cf4 1\cf0 ;\
        \cf6 cout\cf0 <<\cf5 WhenFilledPreviousElementWhenEmptyNextElement\cf0 [i]<<\cf7 " "\cf0 ;\
        \
    \}\
    \
    \cf6 cout\cf0 <<\cf7 "\\nTop "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 k\cf0 ; i ++)\
    \{\
        \cf5 TopElements\cf0 [i] = -\cf4 1\cf0 ;\
        \cf6 cout\cf0 <<\cf5 TopElements\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf7 "\\n------------------------------------------"\cf0 <<\cf8 endl\cf0 ;\
    \
\}\
\
\cf3 bool\cf0  isFull()\
\{\
    \cf3 if\cf0 (\cf5 TotalElementCount\cf0  == \cf5 n\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 bool\cf0  isEmpty(\cf3 int\cf0  Stack)\
\{\
    \cf3 if\cf0 (\cf5 TopElements\cf0 [Stack] == -\cf4 1\cf0 )\
    \{\
        \cf3 return\cf0  \cf3 true\cf0 ;\
    \}\
    \cf3 return\cf0  \cf3 false\cf0 ;\
\}\
\
\cf3 void\cf0  push(\cf3 int\cf0  Stack, \cf3 int\cf0  data)\
\{\
    \cf3 if\cf0 (\cf9 isFull\cf0 () == \cf3 true\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "Stack Full\\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 TotalElementCount\cf0 ++;\
        \cf5 Array\cf0 [\cf5 CurrentFreeSlot\cf0 ] = data;\
        \cf2 //For the given stack the top element is now in CurrentFreeSlot index of the array\cf0 \
        \cf2 //But we also neet to keep track of this previous element of the stack which is currently present in top[stack]\cf0 \
        \
        \cf3 int\cf0  NewTopElement = \cf5 CurrentFreeSlot\cf0 ;\
        \cf3 int\cf0  PreviousTopElement = \cf5 TopElements\cf0 [Stack];\
        \
        \cf2 //Update the CurrentFreeSlot\cf0 \
        \cf5 CurrentFreeSlot\cf0  = \cf5 WhenFilledPreviousElementWhenEmptyNextElement\cf0 [\cf5 CurrentFreeSlot\cf0 ];\
        \
        \cf2 //Previous element for this newly filled element\cf0 \
        \cf5 WhenFilledPreviousElementWhenEmptyNextElement\cf0 [NewTopElement] = PreviousTopElement;\
        \
        \cf2 //Update the top\cf0 \
        \cf5 TopElements\cf0 [Stack] = NewTopElement;\
        \
    \}\
\}\
\
\cf3 void\cf0  pop(\cf3 int\cf0  Stack)\
\{\
    \cf3 if\cf0 (\cf9 isEmpty\cf0 (Stack) == \cf3 true\cf0 )\
    \{\
        \cf6 cout\cf0 <<\cf7 "The requested stack is empty\\n"\cf0 ;\
        \cf3 return\cf0 ;\
    \}\
    \cf3 else\cf0 \
    \{\
        \cf5 TotalElementCount\cf0 --;\
        \cf3 int\cf0  ArrayElementIndexTodBeDeleted = \cf5 TopElements\cf0 [Stack];\
        \cf6 cout\cf0 <<\cf7 "Popped element is "\cf0 <<\cf5 Array\cf0 [ArrayElementIndexTodBeDeleted]<<\cf8 endl\cf0 ;\
        \cf5 Array\cf0 [ArrayElementIndexTodBeDeleted] = \cf4 0\cf0 ;\
        \
        \cf2 //Update the top emenent Coz when that array is filled it gives previous element\cf0 \
        \cf5 TopElements\cf0 [Stack] = \cf5 WhenFilledPreviousElementWhenEmptyNextElement\cf0 [ArrayElementIndexTodBeDeleted];\
\
        \
        \cf2 //We are going to make the below array empty now\cf0 \
        \cf5 WhenFilledPreviousElementWhenEmptyNextElement\cf0 [ArrayElementIndexTodBeDeleted] = \cf5 CurrentFreeSlot\cf0 ;\
        \
        \cf2 //Update the current Free Slot\cf0 \
        \cf5 CurrentFreeSlot\cf0  = ArrayElementIndexTodBeDeleted;\
        \
    \}\
\}\
\
\cf3 void\cf0  display()\
\{\
    \cf6 cout\cf0 <<\cf7 "Array "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i ++)\
    \{\
        \cf6 cout\cf0 <<\cf5 Array\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \
    \cf6 cout\cf0 <<\cf7 "\\nCurrent Free Slot "\cf0 <<\cf5 CurrentFreeSlot\cf0 <<\cf8 endl\cf0 ;\
    \cf6 cout\cf0 <<\cf7 "Previous Elements Array "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 n\cf0 ; i ++)\
    \{\
        \cf6 cout\cf0 <<\cf5 WhenFilledPreviousElementWhenEmptyNextElement\cf0 [i]<<\cf7 " "\cf0 ;\
        \
    \}\
    \
    \cf6 cout\cf0 <<\cf7 "\\nTop "\cf0 ;\
    \cf3 for\cf0 (\cf3 int\cf0  i = \cf4 0\cf0 ; i < \cf5 k\cf0 ; i ++)\
    \{\
        \cf6 cout\cf0 <<\cf5 TopElements\cf0 [i]<<\cf7 " "\cf0 ;\
    \}\
    \cf6 cout\cf0 <<\cf7 "\\n------------------------------------------"\cf0 <<\cf8 endl\cf0 ;\
\}\
\
\cf3 int\cf0  main()\
\{\
    \cf9 initialise\cf0 ();\
    \cf9 push\cf0 (\cf4 0\cf0 , \cf4 10\cf0 );\
    \cf9 push\cf0 (\cf4 1\cf0 , \cf4 20\cf0 );\
    \cf9 push\cf0 (\cf4 0\cf0 , \cf4 30\cf0 );\
    \cf9 push\cf0 (\cf4 1\cf0 , \cf4 200\cf0 );\
    \cf9 push\cf0 (\cf4 1\cf0 , \cf4 2000\cf0 );\
    \cf9 pop\cf0 (\cf4 0\cf0 );\
    \cf9 display\cf0 ();\
\}\
\
\
\
/*\
\
The logic is simple\
We have an array where we push and pop the elements\
There is another array let's call it X\
So this X array: When at an index i; \
if X[i] = empty\
\{\
X[i] Gives the next slot in Array which is empty\
\}\
if X[i] = Filled\
\{\
This filled position indicates that where the previous element attached to the current element is present\
\}\
\
There is 3rd array Top which keeps track of the top elements of the stacks\
\
\cf10 Stack 1 \
\cf11 Stack 2\
\cf12 Stack 3\
\cf0 \
Array\cf10 |_|_|\cf13 |_|_|\cf12 |_|_|\cf0 _|_|_|_|_|_|_|_|_|_|_|\
\
X \cf14 |_-1_|_0_|\cf11 |_-1_|_2_|\cf12 |_-1_|_4_|\cf0 _|_|_|_|_|_|_|_|_|_|_|\
\
Top \cf14 |_1_|\cf11 |_3_|\cf12 |_5_|\
\
\cf0 Current Free Slot is in 6\
\
Let's pop element from \cf11 Stack 2\
\
\cf0 Array\cf10 |_|_|\cf13 |_|\cf0 |_|\cf12 |_|_|\cf0 _|_|_|_|_|_|_|_|_|_|_|\
\
X \cf14 |_-1_|_0_|\cf11 |_-1_|\cf0 |_6_|\cf12 |_-1_|_4_|\cf0 _|_|_|_|_|_|_|_|_|_|_|\
\
Top \cf14 |_1_|\cf11 |_2_|\cf12 |_5_|\cf0 \
\cf11 \
\cf0 Current Free Slot is in 3\
*/}