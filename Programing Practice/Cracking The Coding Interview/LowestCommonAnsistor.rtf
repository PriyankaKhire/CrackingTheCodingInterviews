{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red63\green110\blue116;
\red38\green71\blue75;\red92\green38\blue153;\red196\green26\blue22;\red46\green13\blue110;\red0\green116\blue0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 bool\cf0  n1Fond = \cf2 false\cf0 ;\
\cf2 bool\cf0  n2Found = \cf2 false\cf0 ;\
\cf2 bool\cf0  RootFound = \cf2 false\cf0 ;\
\cf2 char\cf0  n1LR = \cf3 ' '\cf0 ;\
\cf2 char\cf0  n2LR = \cf3 ' '\cf0 ;\
\cf2 void\cf0  LCA(\cf4 TreeNode\cf0  *N1, \cf4 TreeNode\cf0  *N2, \cf4 TreeNode\cf0  *Root, \cf4 TreeNode\cf0  *Node)\
\{\
    \cf2 if\cf0 (Node != \cf2 NULL\cf0  && \cf4 endRecurssion\cf0  == \cf2 false\cf0 )\
    \{\
        \cf5 LCA\cf0 (N1, N2, Root, Node->\cf4 llink\cf0 );\
        \cf6 cout\cf0 <<\cf7 "Node traversed "\cf0 <<Node->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
        \cf2 if\cf0 (Node == N1)\
        \{\
            \cf4 n1Fond\cf0  = \cf2 true\cf0 ;\
            \cf2 if\cf0 (\cf4 RootFound\cf0  == \cf2 false\cf0 )\
            \{\
                \cf6 cout\cf0 <<\cf7 "Node 1 found in left\\n"\cf0 ;\
                \cf9 //Node lies in left part of tree\cf0 \
                \cf4 n1LR\cf0  = \cf3 'L'\cf0 ;\
            \}\
            \cf2 else\cf0 \
            \{\
                \cf6 cout\cf0 <<\cf7 "Node 1 found in right\\n"\cf0 ;\
                \cf9 //Node lies in the right part of the tree\cf0 \
                \cf4 n1LR\cf0  = \cf3 'R'\cf0 ;\
            \}\
        \}\
        \cf2 if\cf0 (Node == N2)\
        \{\
            \cf4 n2Found\cf0  = \cf2 true\cf0 ;\
            \cf2 if\cf0 (\cf4 RootFound\cf0  == \cf2 false\cf0 )\
            \{\
                \cf6 cout\cf0 <<\cf7 "Node 2 found in left\\n"\cf0 ;\
                \cf9 //Node lies in left part of tree\cf0 \
                \cf4 n2LR\cf0  = \cf3 'L'\cf0 ;\
            \}\
            \cf2 else\cf0 \
            \{\
                \cf6 cout\cf0 <<\cf7 "Node 2 found in right\\n"\cf0 ;\
                \cf9 //Node lies in the right part of the tree\cf0 \
                \cf4 n2LR\cf0  = \cf3 'R'\cf0 ;\
            \}\
        \}\
        \cf2 if\cf0 (Node == Root)\
        \{\
            \cf6 cout\cf0 <<\cf7 "Found Root\\n"\cf0 ;\
            \cf2 if\cf0 (\cf4 endRecurssion\cf0  == \cf2 false\cf0 )\
            \{\
                \cf4 RootFound\cf0  = \cf2 true\cf0 ;\
            \}\
        \}\
        \
        \cf2 if\cf0 (\cf4 n1Fond\cf0  == \cf2 true\cf0  && \cf4 n2Found\cf0  == \cf2 true\cf0 )\
        \{\
            \cf4 endRecurssion\cf0  = \cf2 true\cf0 ;\
        \}\
        \cf5 LCA\cf0 (N1, N2, Root, Node->\cf4 rlink\cf0 );\
    \}\
\}\
\
\cf2 void\cf0  LowestCommonAnsistor(\cf4 TreeNode\cf0  *N1, \cf4 TreeNode\cf0  *N2, \cf4 TreeNode\cf0  *Root)\
\{\
    \cf2 if\cf0 (Root != \cf2 NULL\cf0 )\
    \{\
        \cf2 if\cf0 (N1 == Root || N2 == Root)\
        \{\
            \cf6 cout\cf0 <<\cf7 "Lowest common ansistor of "\cf0 <<N1->\cf4 data\cf0 <<\cf7 " and "\cf0 <<N2->\cf4 data\cf0 <<\cf7 " is "\cf0 ;\
            \cf6 cout\cf0 <<Root->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
            \cf2 return\cf0 ;\
        \}\
        \cf2 else\cf0 \
        \{\
            \cf6 cout\cf0 <<\cf7 "root = "\cf0 <<Root->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
            \cf5 LCA\cf0 (N1, N2, Root, Root);\
            \cf6 cout\cf0 <<\cf4 n1Fond\cf0 <<\cf7 " "\cf0 <<\cf4 n2Found\cf0 <<\cf7 " "\cf0 <<\cf4 n1LR\cf0 <<\cf7 " "\cf0 <<\cf4 n2LR\cf0 <<\cf8 endl\cf0 ;\
            \cf2 if\cf0 (\cf4 n1Fond\cf0  == \cf2 false\cf0  || \cf4 n2Found\cf0  == \cf2 false\cf0 )\
            \{\
                \cf6 cout\cf0 <<\cf7 "Not Found\\n"\cf0 ;\
            \}\
            \cf2 else\cf0 \
            \{\
                \cf2 if\cf0 (\cf4 n1LR\cf0  != \cf4 n2LR\cf0 )\
                \{\
                    \cf6 cout\cf0 <<\cf7 "Lowest common ansistor of "\cf0 <<N1->\cf4 data\cf0 <<\cf7 " and "\cf0 <<N2->\cf4 data\cf0 <<\cf7 " is "\cf0 ;\
                    \cf6 cout\cf0 <<Root->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
                    \cf2 return\cf0 ;\
                \}\
                \cf2 else\cf0 \
                    \cf2 if\cf0 (\cf4 n1LR\cf0  == \cf3 'L'\cf0  && \cf4 n2LR\cf0  == \cf3 'L'\cf0 )\
                    \{\
                        \cf6 cout\cf0 <<\cf7 "Going left, new root is "\cf0 <<Root->\cf4 llink\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
                        \cf4 n1Fond\cf0  = \cf2 false\cf0 ;\
                        \cf4 n2Found\cf0  = \cf2 false\cf0 ;\
                        \cf4 RootFound\cf0  = \cf2 false\cf0 ;\
                        \cf4 endRecurssion\cf0  = \cf2 false\cf0 ;\
                        \cf4 n1LR\cf0  = \cf3 ' '\cf0 ;\
                        \cf4 n2LR\cf0  = \cf3 ' '\cf0 ;\
                        \cf5 LowestCommonAnsistor\cf0 (N1, N2, Root->\cf4 llink\cf0 );\
                    \}\
                \cf2 else\cf0 \
                    \cf2 if\cf0 (\cf4 n1LR\cf0  == \cf3 'R'\cf0  && \cf4 n2LR\cf0  == \cf3 'R'\cf0 )\
                    \{\
                        \cf6 cout\cf0 <<\cf7 "Going right, new root is "\cf0 <<Root->\cf4 llink\cf0 ->\cf4 data\cf0 <<\cf8 endl\cf0 ;\
                        \cf4 n1Fond\cf0  = \cf2 false\cf0 ;\
                        \cf4 n2Found\cf0  = \cf2 false\cf0 ;\
                        \cf4 RootFound\cf0  = \cf2 false\cf0 ;\
                        \cf4 endRecurssion\cf0  = \cf2 false\cf0 ;\
                        \cf4 n1LR\cf0  = \cf3 ' '\cf0 ;\
                        \cf4 n2LR\cf0  = \cf3 ' '\cf0 ;\
                        \cf5 LowestCommonAnsistor\cf0 (N1, N2, Root->\cf4 rlink\cf0 );\
                    \}\
            \}\
        \}\
    \}\
\}\
\
\cf2 int\cf0  main()\
\{\
    \cf4 RootNode\cf0 ->\cf4 data\cf0  = \cf3 0\cf0 ;\
    \cf4 RootNode\cf0 ->\cf4 llink\cf0  = \cf4 RootNode\cf0 ->\cf4 rlink\cf0  = \cf2 NULL\cf0 ;\
    \
    \cf5 CreateTree\cf0 ();\
    \
    \cf5 LowestCommonAnsistor\cf0 (\cf4 RootNode\cf0 ->\cf4 llink\cf0 ->\cf4 rlink\cf0 ->\cf4 llink\cf0 , \cf4 RootNode\cf0 ->\cf4 llink\cf0 ->\cf4 rlink\cf0 ->\cf4 rlink\cf0 ->\cf4 rlink\cf0 , \cf4 RootNode\cf0 );\
\}}